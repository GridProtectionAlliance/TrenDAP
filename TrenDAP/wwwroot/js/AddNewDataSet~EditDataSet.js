(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["AddNewDataSet~EditDataSet"],{

/***/ "./TypeScript/Constants.ts":
/*!*********************************!*\
  !*** ./TypeScript/Constants.ts ***!
  \*********************************/
/*! exports provided: HeavyCheckMark, Pencil, TrashCan, CrossMark, Plus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeavyCheckMark", function() { return HeavyCheckMark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pencil", function() { return Pencil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrashCan", function() { return TrashCan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CrossMark", function() { return CrossMark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plus", function() { return Plus; });
//******************************************************************************************************
//  Constants.ts - Gbtc
//
//  Copyright ¬© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  09/30/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
// emojis
var HeavyCheckMark = '‚úîÔ∏è';
var Pencil = '‚úèÔ∏è';
var TrashCan = 'üóëÔ∏è';
var CrossMark = '‚ùå';
var Plus = '‚ûï';



/***/ }),

/***/ "./TypeScript/Features/DataSets/DataSet.tsx":
/*!**************************************************!*\
  !*** ./TypeScript/Features/DataSets/DataSet.tsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "../node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Constants */ "./TypeScript/Constants.ts");
/* harmony import */ var _DataSources_DataSourcesSlice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DataSources/DataSourcesSlice */ "./TypeScript/Features/DataSources/DataSourcesSlice.ts");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-redux */ "../node_modules/react-redux/es/index.js");
/* harmony import */ var _DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DataSourceTypes/DataSourceTypesSlice */ "./TypeScript/Features/DataSourceTypes/DataSourceTypesSlice.ts");
/* harmony import */ var _DataSetsSlice__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./DataSetsSlice */ "./TypeScript/Features/DataSets/DataSetsSlice.ts");
/* harmony import */ var _OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../OpenXDA/OpenXDASlice */ "./TypeScript/Features/OpenXDA/OpenXDASlice.ts");
//******************************************************************************************************
//  DataSet.tsx - Gbtc
//
//  Copyright ¬© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  09/25/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (undefined && undefined.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};








var DataSet = function (props) {
    var dataSourceTypes = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(_DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__["SelectDataSourceTypes"]);
    var dstStatus = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(_DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__["SelectDataSourceTypesStatus"]);
    var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useDispatch"])();
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        if (dstStatus != 'unitiated')
            return;
        var promise = dispatch(Object(_DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__["FetchDataSourceTypes"])());
        return function () {
            if (dstStatus === 'loading')
                promise.abort();
        };
    }, [dispatch, dstStatus]);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__["useState"]('settings'), 2), tab = _a[0], setTab = _a[1];
    var dataSources = JSON.parse(props.Record.JSONString);
    return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"](react__WEBPACK_IMPORTED_MODULE_0__["Fragment"], null,
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("ul", { className: "nav nav-tabs", style: { padding: 10 } },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("li", { className: "nav-item" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("a", { className: "nav-link active", "data-toggle": "tab", onClick: function () { return setTab('settings'); } }, "Settings")),
            dataSources.map(function (ds, index) { return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("li", { className: "nav-item", key: index },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("a", { className: "nav-link", "data-toggle": "tab", onClick: function () { return setTab(index.toString()); } }, ds.DataSource.Name))); })),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "tab-content" },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "tab-pane container " + (tab === "settings" ? 'active' : 'fade') },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DataSetGlobalSettings, __assign({}, props))),
            dataSources.map(function (ds, index) {
                var _a;
                return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "tab-pane container " + (tab === index.toString() ? 'active' : 'fade'), id: index, key: index }, (((_a = dataSourceTypes.find(function (dst) { return dst.ID === ds.DataSource.DataSourceTypeID; })) === null || _a === void 0 ? void 0 : _a.Name) === "OpenXDA" ? react__WEBPACK_IMPORTED_MODULE_0__["createElement"](DataSetOpenXDA, __assign({}, props, { Data: ds, Index: index })) : null)));
            }))));
};
var DataSetGlobalSettings = function (props) {
    var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useDispatch"])();
    var dataSources = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_DataSources_DataSourcesSlice__WEBPACK_IMPORTED_MODULE_3__["SelectDataSourcesForUser"])(state, userName); });
    var publicDataSources = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_DataSources_DataSourcesSlice__WEBPACK_IMPORTED_MODULE_3__["SelectDataSourcesAllPublicNotUser"])(state, userName); });
    var dsStatus = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(_DataSources_DataSourcesSlice__WEBPACK_IMPORTED_MODULE_3__["SelectDataSourcesStatus"]);
    var dataSourceTypes = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(_DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__["SelectDataSourceTypes"]);
    var dstStatus = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(_DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__["SelectDataSourceTypesStatus"]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        if (dsStatus != 'unitiated' && dsStatus != 'changed')
            return;
        var promise = dispatch(Object(_DataSources_DataSourcesSlice__WEBPACK_IMPORTED_MODULE_3__["FetchDataSources"])());
        return function () {
            if (dsStatus === 'loading')
                promise.abort();
        };
    }, [dispatch, dsStatus]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        if (dstStatus != 'unitiated')
            return;
        var promise = dispatch(Object(_DataSourceTypes_DataSourceTypesSlice__WEBPACK_IMPORTED_MODULE_5__["FetchDataSourceTypes"])());
        return function () {
            if (dstStatus === 'loading')
                promise.abort();
        };
    }, [dispatch, dstStatus]);
    function valid(field) {
        if (field == 'Name')
            return props.Record.Name != null && props.Record.Name.length > 0 && props.Record.Name.length <= 200;
        else
            return true;
    }
    function AddDS(dataSource) {
        var json = JSON.parse(props.Record.JSONString);
        json.push({ DataSource: dataSource, Data: GetDS(dataSource) });
        props.SetDataSet(__assign(__assign({}, props.Record), { JSONString: JSON.stringify(json) }));
    }
    function GetDS(dataSource) {
        if (dataSourceTypes.find(function (dst) { return dst.ID === dataSource.DataSourceTypeID; }).Name === "OpenXDA")
            return Object(_DataSetsSlice__WEBPACK_IMPORTED_MODULE_6__["SelectNewXDADataSet"])();
        else
            return {};
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("form", null,
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["Input"], { Record: props.Record, Field: "Name", Setter: function (record) { return props.SetDataSet(record); }, Valid: valid }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["DateRangePicker"], { Record: props.Record, FromField: "From", ToField: "To", Setter: props.SetDataSet, Label: "Date Range" }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["EnumCheckBoxes"], { Record: props.Record, Field: "Hours", Label: "Hour of Day", Setter: function (record) { return props.SetDataSet(record); }, Enum: Array.from({ length: 24 }, function (_, i) { return i.toString(); }) }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["EnumCheckBoxes"], { Record: props.Record, Field: "Days", Label: "Day of Week", Setter: function (record) { return props.SetDataSet(record); }, Enum: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'] }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["EnumCheckBoxes"], { Record: props.Record, Field: "Weeks", Label: "Week of Year", Setter: function (record) { return props.SetDataSet(record); }, Enum: Array.from({ length: 53 }, function (_, i) { return i.toString(); }) }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["EnumCheckBoxes"], { Record: props.Record, Field: "Months", Label: "Month of Year", Setter: function (record) { return props.SetDataSet(record); }, Enum: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["CheckBox"], { Record: props.Record, Field: "Public", Setter: function (record) { return props.SetDataSet(record); } }),
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "form-group" },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "dropup" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("button", { className: "btn btn-secondary dropdown-toggle", type: "button", id: "dropdownMenuButton", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" },
                    _Constants__WEBPACK_IMPORTED_MODULE_2__["Plus"],
                    " DataSource"),
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" },
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "dropdown-header" }, "Your DataSources"),
                    dataSources.map(function (ds) { var _a; return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("a", { key: ds.ID, className: "dropdown-item", onClick: function () { return AddDS(ds); } },
                        ds.Name,
                        " (", (_a = dataSourceTypes.find(function (dst) { return dst.ID === ds.DataSourceTypeID; })) === null || _a === void 0 ? void 0 :
                        _a.Name,
                        ")"); }),
                    react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "dropdown-header" }, "Public DataSources"),
                    publicDataSources.map(function (ds) { var _a; return react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("a", { key: ds.ID, className: "dropdown-item", onClick: function () { return AddDS(ds); } },
                        ds.Name,
                        " (", (_a = dataSourceTypes.find(function (dst) { return dst.ID === ds.DataSourceTypeID; })) === null || _a === void 0 ? void 0 :
                        _a.Name,
                        ")"); }))))));
};
var DataSetOpenXDA = function (props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    var dispatch = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useDispatch"])();
    var phases = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["SelectOpenXDA"])(state, props.Data.DataSource.ID, 'Phase'); });
    var meters = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["SelectOpenXDA"])(state, props.Data.DataSource.ID, 'Meter'); });
    var assets = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["SelectOpenXDA"])(state, props.Data.DataSource.ID, 'Asset'); });
    var channelGroups = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["SelectOpenXDA"])(state, props.Data.DataSource.ID, 'ChannelGroup'); });
    var channelTypes = Object(react_redux__WEBPACK_IMPORTED_MODULE_4__["useSelector"])(function (state) { return Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["SelectOpenXDA"])(state, props.Data.DataSource.ID, 'ChannelGroupType'); });
    function UpdateDS() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        var json = JSON.parse(props.Record.JSONString);
        json[props.Index].Data = __assign({}, props.Data.Data);
        for (var index in params)
            json[props.Index].Data[params[index].field] = params[index].value;
        props.SetDataSet(__assign(__assign({}, props.Record), { JSONString: JSON.stringify(json) }));
    }
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var _a, _b;
        if (phases != undefined && ((_a = phases) === null || _a === void 0 ? void 0 : _a.Status) != 'unitiated' && ((_b = phases) === null || _b === void 0 ? void 0 : _b.Status) != 'changed')
            return;
        var promise = dispatch(Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["FetchOpenXDA"])({ dataSourceID: props.Data.DataSource.ID, table: 'Phase' }));
        return function () {
            var _a;
            if (((_a = phases) === null || _a === void 0 ? void 0 : _a.Status) === 'loading')
                promise.abort();
        };
    }, [dispatch, (_a = phases) === null || _a === void 0 ? void 0 : _a.Status]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var _a, _b;
        if (meters != undefined && ((_a = meters) === null || _a === void 0 ? void 0 : _a.Status) != 'unitiated' && ((_b = meters) === null || _b === void 0 ? void 0 : _b.Status) != 'changed')
            return;
        var promise = dispatch(Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["FetchOpenXDA"])({ dataSourceID: props.Data.DataSource.ID, table: 'Meter' }));
        return function () {
            var _a;
            if (((_a = meters) === null || _a === void 0 ? void 0 : _a.Status) === 'loading')
                promise.abort();
        };
    }, [dispatch, (_b = meters) === null || _b === void 0 ? void 0 : _b.Status]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var _a, _b;
        if (assets != undefined && ((_a = assets) === null || _a === void 0 ? void 0 : _a.Status) != 'unitiated' && ((_b = assets) === null || _b === void 0 ? void 0 : _b.Status) != 'changed')
            return;
        var promise = dispatch(Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["FetchOpenXDA"])({ dataSourceID: props.Data.DataSource.ID, table: 'Asset' }));
        return function () {
            var _a;
            if (((_a = assets) === null || _a === void 0 ? void 0 : _a.Status) === 'loading')
                promise.abort();
        };
    }, [dispatch, (_c = assets) === null || _c === void 0 ? void 0 : _c.Status]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var _a, _b;
        if (channelGroups != undefined && ((_a = channelGroups) === null || _a === void 0 ? void 0 : _a.Status) != 'unitiated' && ((_b = channelGroups) === null || _b === void 0 ? void 0 : _b.Status) != 'changed')
            return;
        var promise = dispatch(Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["FetchOpenXDA"])({ dataSourceID: props.Data.DataSource.ID, table: 'ChannelGroup' }));
        return function () {
            var _a;
            if (((_a = channelGroups) === null || _a === void 0 ? void 0 : _a.Status) === 'loading')
                promise.abort();
        };
    }, [dispatch, (_d = channelGroups) === null || _d === void 0 ? void 0 : _d.Status]);
    react__WEBPACK_IMPORTED_MODULE_0__["useEffect"](function () {
        var _a, _b;
        if (channelTypes != undefined && ((_a = channelTypes) === null || _a === void 0 ? void 0 : _a.Status) != 'unitiated' && ((_b = channelTypes) === null || _b === void 0 ? void 0 : _b.Status) != 'changed')
            return;
        var promise = dispatch(Object(_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_7__["FetchOpenXDA"])({ dataSourceID: props.Data.DataSource.ID, table: 'ChannelGroupType' }));
        return function () {
            var _a;
            if (((_a = channelTypes) === null || _a === void 0 ? void 0 : _a.Status) === 'loading')
                promise.abort();
        };
    }, [dispatch, (_e = channelTypes) === null || _e === void 0 ? void 0 : _e.Status]);
    return (react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("form", null,
        react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "row" },
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["Select"], { Record: props.Data.Data, Field: "Aggregate", Options: [{ Value: '', Label: 'None' }, { Value: '1h', Label: 'Hour' }, { Value: '1d', Label: 'Day' }, { Value: '1w', Label: 'Week' }], Setter: function (record) { return UpdateDS({ field: 'Aggregate', value: record.Aggregate }); } }),
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["Select"], { Record: props.Data.Data, Field: "By", Options: [{ Value: 'Meter', Label: 'Meter' }, { Value: 'Asset', Label: 'Asset' }], Setter: function (record) { return UpdateDS({ field: 'By', value: record.By }, { field: 'IDs', value: [] }); } }),
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["ArrayMultiSelect"], { Style: { height: window.innerHeight - 510 }, Record: props.Data.Data, Options: (_h = (props.Data.Data.By == 'Meter' ? (_f = meters) === null || _f === void 0 ? void 0 : _f.Data.map(function (m) { return ({ Value: m.ID, Label: m.Name }); }) : (_g = assets) === null || _g === void 0 ? void 0 : _g.Data.map(function (m) { return ({ Value: m.ID, Label: m.AssetName }); })), (_h !== null && _h !== void 0 ? _h : [])), Field: "IDs", Setter: function (record) { return UpdateDS({ field: 'IDs', value: record.IDs }); } })),
            react__WEBPACK_IMPORTED_MODULE_0__["createElement"]("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["ArrayCheckBoxes"], { Record: props.Data.Data, Checkboxes: (_k = (_j = phases) === null || _j === void 0 ? void 0 : _j.Data.map(function (m) { return ({ ID: m.ID, Label: m.Name }); }), (_k !== null && _k !== void 0 ? _k : [])), Field: "Phases", Setter: function (record) { return UpdateDS({ field: 'Phases', value: record.Phases }); } }),
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["ArrayCheckBoxes"], { Label: "Quick Selection", Record: props.Data.Data, Checkboxes: (_m = (_l = channelGroups) === null || _l === void 0 ? void 0 : _l.Data.map(function (m) { return ({ ID: m.ID, Label: m.Name }); }), (_m !== null && _m !== void 0 ? _m : [])), Field: "Groups", Setter: function (record) {
                        var oldGroups = props.Data.Data.Groups;
                        if (oldGroups.length > record.Groups.length) { // something was taken out
                            var a = oldGroups.map(function (x) { return record.Groups.indexOf(x); });
                            var i_1 = a.indexOf(-1);
                            var channelGroupID = oldGroups[i_1];
                            var newa = props.Data.Data.Types.map(function (t) { return channelTypes.Data.find(function (ct) { return ct.ID === t; }); }).filter(function (t) { return t.ChannelGroupID !== oldGroups[i_1]; }).map(function (t) { return t.ID; });
                            UpdateDS({ field: 'Groups', value: record.Groups }, { field: 'Types', value: newa });
                        }
                        else if (oldGroups.length < record.Groups.length) { // something was put in
                            var a = record.Groups.map(function (x) { return oldGroups.indexOf(x); });
                            var i = a.indexOf(-1);
                            var channelGroupID_1 = record.Groups[i];
                            var newa = __spread(props.Data.Data.Types, channelTypes.Data.filter(function (t) { return t.ChannelGroupID === channelGroupID_1; }).map(function (t) { return t.ID; }));
                            UpdateDS({ field: 'Groups', value: record.Groups }, { field: 'Types', value: newa });
                        }
                        else { // this probably can't happen, but means nothing changed
                        }
                    } }),
                react__WEBPACK_IMPORTED_MODULE_0__["createElement"](_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__["ArrayMultiSelect"], { Style: { height: window.innerHeight - 520 }, Record: props.Data.Data, Options: (_p = (_o = channelTypes) === null || _o === void 0 ? void 0 : _o.Data.map(function (m) { return ({ Value: m.ID, Label: m.DisplayName }); }), (_p !== null && _p !== void 0 ? _p : [])), Field: "Types", Setter: function (record) { return UpdateDS({ field: 'Types', value: record.Types }); } })))));
};
/* harmony default export */ __webpack_exports__["default"] = (DataSet);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,