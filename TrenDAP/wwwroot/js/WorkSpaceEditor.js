(self["webpackChunktrendap"] = self["webpackChunktrendap"] || []).push([["WorkSpaceEditor"],{

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Histogram.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Histogram.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HistogramJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
//******************************************************************************************************
//  Histogram.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};










var SvgStyle = {
    fill: 'none',
    shapeRendering: 'crispEdges',
    userSelect: 'none',
    WebkitTouchCallout: 'none',
    WebkitUserSelect: 'none',
    KhtmlUserSelect: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none'
};
function HistogramJSX(props) {
    var _a;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _b[0], setToggle = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(props)), 2), record = _c[0], setRecord = _c[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
    }, [toggle, props.JSON]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { Height: props.Height })));
    }, [props.Height]);
    function Initialize(settings) {
        var _a, _b;
        var profile = settings.JSON.Series.map(function (series) { return series.Profile; }).reduce(function (prev, curr) { return prev || curr; }, false);
        var margin = { bottom: 50, left: 50, top: 40, right: (profile ? 70 : 20) };
        var svgHeight = record.Height - margin.top - margin.bottom;
        var extent = d3__WEBPACK_IMPORTED_MODULE_0__.extent([].concat.apply([], __spreadArray([], __read(settings.JSON.Series.map(function (series) { var _a, _b, _c, _d; return ((_d = (_c = ((_b = (_a = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (d) { return d.ID.toString() === series.ID; })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).map(function (d) { return d[series.Field]; }); })))));
        //// set the parameters for the histogram
        var histograms = ((_b = (_a = settings.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series) {
            var _a, _b, _c, _d;
            var dataSource = (_b = (_a = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var datum = (_d = (_c = dataSource.find(function (d) { return d.ID.toString() === series.ID; })) === null || _c === void 0 ? void 0 : _c.Data.map(function (d) { return d[series.Field]; })) !== null && _d !== void 0 ? _d : [];
            var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                .value(function (d) { return d; }) // I need to give the vector of value
                .domain(extent) // then the domain of the graphic
                .thresholds(settings.JSON.BinCount); // then the numbers of bins
            // And apply this function to data to get the bins
            return histogram(datum);
        });
        var yMax = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.length; }))));
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', settings.Height);
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([settings.JSON.Min, settings.JSON.Max]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (settings.Height - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (settings.Height - margin.bottom / 3) + ")")
            .text(record.JSON.Units);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([settings.Height - margin.top - margin.bottom, 0])
            .domain([0, yMax]); // d3.hist has to be called before the Y axis obviously
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + margin.left / 3 + ")")
            .style("text-anchor", "middle")
            .text("Counts");
        var binWidth = Math.max.apply(Math, __spreadArray([], __read(histograms.map(function (histogram) { return Math.max.apply(Math, __spreadArray([], __read(histogram.map(function (a) { return x(a.x1) - x(a.x0); })))); }))));
        //svg.selectAll("g.bins").remove();
        svg.selectAll("g.bins")
            .data(settings.JSON.Series)
            .enter()
            .append('g').attr('class', 'bins').attr("fill", function (series) { return series.Color; })
            .attr('transform', function (d, index) { return "translate(" + (margin.left + index * binWidth / settings.JSON.Series.length) + "," + margin.top + ")"; })
            //.attr("opacity", 0.3)
            .selectAll('rect')
            .data(function (series, index) { return histograms[index]; })
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function (d, i, g) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
            .attr("width", function (d) { return (x(d.x1) - x(d.x0) > 2 ? (x(d.x1) - x(d.x0)) / settings.JSON.Series.length : 2) - 1; })
            .attr("height", function (d) { return svgHeight - y(d.length); });
        if (profile) {
            var profiles = record.JSON.Series.filter(function (series) { return series.Profile; }).map(function (series, index) {
                var _a, _b, _c, _d;
                var dataSource = (_b = (_a = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
                var datum = (_d = (_c = dataSource.find(function (d) { return d.ID.toString() === series.ID; })) === null || _c === void 0 ? void 0 : _c.Data.map(function (d) { return d[series.Field]; })) !== null && _d !== void 0 ? _d : [];
                var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                    .value(function (d) { return d; }) // I need to give the vector of value
                    .domain(d3__WEBPACK_IMPORTED_MODULE_0__.extent(datum)) // then the domain of the graphic
                    .thresholds(settings.JSON.BinCount)(datum); // then the numbers of bins
                return { Color: series.ProfileColor, Profile: histogram.map((function (sum) { return function (value) { return sum += value.length; }; })(0)).map(function (prof, i) { return ({ Bin: histogram[i].x0, Value: prof }); }) };
            });
            //const profiles = histograms.map(hist => hist.map((sum => value => sum += value.length)(0)).map((prof, i) => ({ Bin: hist[i].x0, Value: prof })));
            var pyMax = Math.max.apply(Math, __spreadArray([], __read(profiles.map(function (pr) { return pr.Profile; }).reduce(function (prev, curr) { return prev.concat(curr); }, []).map(function (p) { return p.Value; }))));
            var py_1 = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
                .range([settings.Height - margin.top - margin.bottom, 0])
                .domain([0, pyMax]); // d3.hist has to be called before the Y axis obviously
            var pyAxis = svg.append("g")
                .attr("transform", "translate(" + (settings.Width - margin.right) + "," + margin.top + ")")
                .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(py_1));
            svg.append("text")
                .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + (settings.Width - margin.right / 3) + ")")
                .style("text-anchor", "middle")
                .text("Profile");
            //const filteredData = profile.find(ds => ds.ID === series.ID)?.Data ?? []).filter(ds => moment(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[field] >= axis.Min && ds[field] <= axis.Max)
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd.Bin); }).y(function (dd) { return py_1(dd.Value); });
            svg.append("path")
                .data(profiles)
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", function (d) { return d.Color; })
                .attr("d", function (d) { return lineFunc_1(d.Profile); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-4" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: (_a = record === null || record === void 0 ? void 0 : record.Width) !== null && _a !== void 0 ? _a : 0, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Units', Record: record.JSON, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'BinCount', Label: 'Bins', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Min', Label: 'Min', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(__assign(__assign({}, record), { JSON: r })); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Max', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(__assign(__assign({}, record), { JSON: r })); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateAxisRange()); } }, "Use Data")))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d, _e, _f;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" },
                                    (d.DataSource.Type === 'TrenDAPDB' ? ((_b = (_a = record.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                        if (datum === undefined)
                                            return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum, Index: i })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null),
                                    (d.DataSource.Type === 'Sapphire' ? ((_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Series) !== null && _d !== void 0 ? _d : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                        if (datum === undefined)
                                            return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__.default, { Data: datum, Index: i })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null),
                                    (d.DataSource.Type === 'OpenHistorian' ? ((_f = (_e = record.JSON) === null || _e === void 0 ? void 0 : _e.Series) !== null && _f !== void 0 ? _f : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                        if (datum === undefined)
                                            return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum.Device + ' - ' + datum.Description),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null)))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Color), 2), color = _a[0], setColor = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _b[0], setType = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Profile), 2), profile = _c[0], setProfile = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.ProfileColor), 2), pColor = _d[0], setPColor = _d[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Color", color)); }, [color]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Field", type)); }, [type]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Profile", profile)); }, [profile]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "ProfileColor", pColor)); }, [pColor]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "checkbox", className: "form-control", style: { width: 20 }, value: profile === null || profile === void 0 ? void 0 : profile.toString(), checked: profile, onChange: function (evt) { return setProfile(evt.target.checked); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: pColor, onChange: function (evt) { return setPColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () { return props.Callback(props.Widget.RemoveSeries(props.Index)); } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_8__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts":
/*!************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Widget": () => (/* binding */ Widget),
/* harmony export */   "Histogram": () => (/* binding */ Histogram),
/* harmony export */   "Trend": () => (/* binding */ Trend),
/* harmony export */   "Stats": () => (/* binding */ Stats),
/* harmony export */   "Table": () => (/* binding */ Table),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "XvsY": () => (/* binding */ XvsY),
/* harmony export */   "CreateWidget": () => (/* binding */ CreateWidget)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/helper-functions */ "./node_modules/@gpa-gemstone/helper-functions/lib/index.js");
/* harmony import */ var stats_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stats-lite */ "./node_modules/stats-lite/stats.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
//******************************************************************************************************
//  Implementations.ts - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/27/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};



var Widget = /** @class */ (function () {
    function Widget(props) {
        var _this = this;
        this.SetLabel = function (label) {
            _this.Label = label;
        };
        this.SetHeight = function (height) { return _this.Height = height; };
        this.SetWidth = function (width) { return _this.Width = width; };
        this.SetJSON = function (json) { return _this.JSON = json; };
        this.AvailableSeries = function () { return _this.Data.map(function (dd) { return (__assign(__assign({}, dd), { DataSourceID: dd.DataSource.ID, DataSource: dd.DataSource })).Data.map(function (ddd) { return (__assign(__assign({}, ddd), { Data: [], DataSource: dd.DataSource.Name, DataSourceID: dd.DataSource.ID })); }); }).reduce(function (acc, val) { return acc.concat(val); }, []); };
        this.UpdateJSON = function (field, value) {
            _this.JSON[field] = value;
            return _this;
        };
        this.Height = props.Height;
        this.Width = props.Width;
        this.Type = props.Type;
        this.Label = props.Label;
        this.JSON = props.JSON;
        if (props.Data == undefined)
            this.Data = [];
        else
            this.Data = props.Data;
    }
    return Widget;
}());

var Histogram = /** @class */ (function (_super) {
    __extends(Histogram, _super);
    function Histogram(props) {
        var _this = _super.call(this, props) || this;
        _this.AddSeries = function (id, dataSourceID, label) {
            _this.JSON.Series.push({ ID: id.toString(), DataSourceID: dataSourceID, Field: "Average", Color: GetColor(), Profile: false, ProfileColor: GetColor(label) });
            return new Histogram(_this);
        };
        _this.RemoveSeries = function (index) {
            _this.JSON.Series.splice(index, 1);
            return new Histogram(_this);
        };
        _this.UpdateSeries = function (index, field, value) {
            _this.JSON.Series[index][field] = value;
            return new Histogram(_this);
        };
        _this.CalculateAxisRange = function () {
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() === series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
            var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
            _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
            _this.JSON.Max = _this.JSON.Max + buffer;
            _this.JSON.Min = _this.JSON.Min - buffer;
            return new Histogram(_this);
        };
        _this.Type = "Histogram";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Units: '', Series: [], BinCount: 10 };
        return _this;
    }
    return Histogram;
}(Widget));

var Trend = /** @class */ (function (_super) {
    __extends(Trend, _super);
    function Trend(props) {
        var _this = _super.call(this, props) || this;
        _this.AddAxis = function () { return _this.JSON.YAxis.push({ Max: 10, Min: 0, Position: 'left', Units: '' }); };
        _this.RemoveAxis = function (index) {
            if (_this.JSON.YAxis.length == 1)
                return;
            _this.JSON.YAxis.splice(index, 1);
            _this.JSON.Series.forEach(function (series) {
                if (series.Axis >= index)
                    series.Axis = (index > 0 ? series.Axis - 1 : 0);
            });
        };
        _this.UpdateAxis = function (index, field, value) { _this.JSON.YAxis[index][field] = value; };
        _this.CalculateAxisRange = function (type, index) {
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            if (type === 'x') {
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() == series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return moment__WEBPACK_IMPORTED_MODULE_2___default()(d.Timestamp).toDate().getTime(); }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            }
            else {
                if (index == undefined) {
                    var _loop_1 = function (index_1) {
                        var ss = _this.JSON.Series.filter(function (series) { return series.Axis === index_1; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() == series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                        var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                        _this.JSON.YAxis[index_1]['Max'] = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                        _this.JSON.YAxis[index_1]['Min'] = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                        var buffer = (_this.JSON.YAxis[index_1]['Max'] - _this.JSON.YAxis[index_1]['Min']) * .10;
                        _this.JSON.YAxis[index_1]['Max'] = _this.JSON.YAxis[index_1]['Max'] + buffer;
                        _this.JSON.YAxis[index_1]['Min'] = _this.JSON.YAxis[index_1]['Min'] - buffer;
                    };
                    for (var index_1 = 0; index_1 < _this.JSON.YAxis.length; index_1++) {
                        _loop_1(index_1);
                    }
                }
                else {
                    var ss = _this.JSON.Series.filter(function (series) { return series.Axis === index; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() == series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                    var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                    _this.JSON.YAxis[index]['Max'] = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                    _this.JSON.YAxis[index]['Min'] = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                    var buffer = (_this.JSON.YAxis[index]['Max'] - _this.JSON.YAxis[index]['Min']) * .10;
                    _this.JSON.YAxis[index]['Max'] = _this.JSON.YAxis[index]['Max'] + buffer;
                    _this.JSON.YAxis[index]['Min'] = _this.JSON.YAxis[index]['Min'] - buffer;
                }
            }
            return new Trend(_this);
        };
        _this.AddSeries = function (id, dataSourceID, label) {
            if (_this.JSON.Series.find(function (series) { return series.ID === id.toString() && series.DataSourceID === dataSourceID; }) !== undefined)
                return;
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            var series = dd.find(function (d) { return d.ID.toString() === id.toString(); });
            var axisIndex = 0;
            if (series['Unit'] != undefined) {
                axisIndex = _this.JSON.YAxis.findIndex(function (a) { return a.Units === series['Unit']; });
                if (axisIndex === -1) {
                    axisIndex = _this.JSON.YAxis.push({ Units: series['Unit'], Min: 0, Max: 100, Position: 'left' }) - 1;
                }
            }
            _this.JSON.Series.push({ ID: id.toString(), DataSourceID: dataSourceID, Axis: axisIndex, Field: "Average", Color: GetColor(label), Label: label, ShowEvents: false });
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddVoltageRMS = function (dataSourceID) {
            var _a;
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'V'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'V', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            (_a = _this.JSON.Series).push.apply(_a, __spreadArray([], __read(_this.Data.find(function (datum) { return datum.DataSource.ID === dataSourceID; }).Data.filter(function (datum) { return datum['Type'] === 'Voltage' && datum['Characteristic'] === 'RMS'; }).map(function (datum) { return ({ ID: datum.ID.toString(), DataSourceID: dataSourceID, Axis: axis, Field: 'Average', Color: GetColor("V" + datum.Phase + " - " + datum['Meter']), Label: datum['Name'], ShowEvents: false }); }))));
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddCurrentRMS = function (dataSourceID) {
            var _a;
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'A'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'A', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            (_a = _this.JSON.Series).push.apply(_a, __spreadArray([], __read(_this.Data.find(function (datum) { return datum.DataSource.ID === dataSourceID; }).Data.filter(function (datum) { return datum['Type'] === 'Current' && datum['Characteristic'] === 'RMS'; }).map(function (datum) { return ({ ID: datum.ID.toString(), DataSourceID: dataSourceID, Axis: axis, Field: 'Average', Color: GetColor("V" + datum.Phase + " - " + datum['Meter']), Label: datum['Name'], ShowEvents: false }); }))));
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.RemoveSeries = function (index) { return _this.JSON.Series.splice(index, 1); };
        _this.RemoveAll = function (dataSourceID) {
            _this.JSON.Series = _this.JSON.Series.filter(function (series) { return series.DataSourceID != dataSourceID; });
            return new Trend(_this);
        };
        _this.UpdateSeries = function (index, field, value) { _this.JSON.Series[index][field] = value; };
        _this.Pan = function (value) {
            _this.JSON.Max = _this.JSON.Max + value;
            _this.JSON.Min = _this.JSON.Min + value;
            return new Trend(_this);
        };
        _this.Type = "Trend";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Legend: false, Split: false, SplitType: 'Axis', YAxis: [{ Max: 10, Min: 0, Position: 'left', Units: '' }], Series: [] };
        return _this;
    }
    return Trend;
}(Widget));

//export class Profile extends Widget<TrenDAP.iProfile> {
//    constructor(height: number, width: number, json?: TrenDAP.iTrend) {
//        super("Profile", height, width, json);
//        if (json === undefined)
//            this.JSON = {  };
//    }
//}
var Stats = /** @class */ (function (_super) {
    __extends(Stats, _super);
    function Stats(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeries = function (id, dsID) { return _this.JSON.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        _this.Stats = function () {
            var _a, _b, _c, _d;
            var series = _this.JSON.Series;
            if (series == null)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            var dataSourceData = (_b = (_a = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var dataSeries = (_d = (_c = dataSourceData.find(function (d) { return d.ID.toString() === series.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
            var data = dataSeries.map(function (d) { return d[series.Field]; });
            if (data.length == 0)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            return {
                Mean: stats_lite__WEBPACK_IMPORTED_MODULE_1__.mean(data).toFixed(_this.JSON.Precision),
                Median: stats_lite__WEBPACK_IMPORTED_MODULE_1__.median(data).toFixed(_this.JSON.Precision),
                //Mode: stats.mode(data)/*.toPrecision(this.JSON.Precision)*/,
                Variance: stats_lite__WEBPACK_IMPORTED_MODULE_1__.variance(data).toFixed(_this.JSON.Precision),
                StdDev: stats_lite__WEBPACK_IMPORTED_MODULE_1__.stdev(data).toFixed(_this.JSON.Precision),
                Percentile: {
                    10: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.10).toFixed(_this.JSON.Precision),
                    25: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.25).toFixed(_this.JSON.Precision),
                    50: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.50).toFixed(_this.JSON.Precision),
                    75: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.75).toFixed(_this.JSON.Precision),
                    90: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.90).toFixed(_this.JSON.Precision),
                }
            };
        };
        _this.Type = "Stats";
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Stats;
}(Widget));

var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeries = function (id, dsID) { return _this.JSON.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Table;
}(Widget));

var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(props) {
        var _this = _super.call(this, props) || this;
        if (_this.JSON === undefined)
            _this.JSON = { Text: '' };
        return _this;
    }
    return Text;
}(Widget));

var XvsY = /** @class */ (function (_super) {
    __extends(XvsY, _super);
    function XvsY(props) {
        var _this = _super.call(this, props) || this;
        _this.CalculateRange = function (type) {
            var _a, _b, _c, _d, _e, _f;
            if (type === 'x') {
                var dd = (_b = (_a = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === _this.JSON.X.Series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
                var ss = dd.find(function (d) { return d.ID.toString() === _this.JSON.X.Series.ID.toString(); }).Data.map(function (d) { return d[_this.JSON.X.Series.Field]; });
                _this.JSON.X.Max = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.X.Min = Math.min.apply(Math, __spreadArray([], __read(ss)));
                var buffer = (_this.JSON.X.Max - _this.JSON.X.Min) * .10;
                _this.JSON.X.Max = _this.JSON.X.Max + buffer;
                _this.JSON.X.Min = _this.JSON.X.Min - buffer;
            }
            else if (type === 'y') {
                var dd = (_d = (_c = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === _this.JSON.Y.Series.DataSourceID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
                var ss = dd.find(function (d) { return d.ID.toString() === _this.JSON.Y.Series.ID.toString(); }).Data.map(function (d) { return d[_this.JSON.Y.Series.Field]; });
                _this.JSON.Y.Max = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.Y.Min = Math.min.apply(Math, __spreadArray([], __read(ss)));
                var buffer = (_this.JSON.Y.Max - _this.JSON.Y.Min) * .10;
                _this.JSON.Y.Max = _this.JSON.Y.Max + buffer;
                _this.JSON.Y.Min = _this.JSON.Y.Min - buffer;
            }
            else {
                var dd = (_f = (_e = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === _this.JSON.X.Series.DataSourceID.toString(); })) === null || _e === void 0 ? void 0 : _e.Data) !== null && _f !== void 0 ? _f : [];
                var ss = dd.find(function (d) { return d.ID.toString() === _this.JSON.X.Series.ID.toString(); }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                _this.JSON.TimeMax = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.TimeMin = Math.min.apply(Math, __spreadArray([], __read(ss)));
            }
            return new XvsY(_this);
        };
        _this.SetAxis = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X[field] = value;
            else
                _this.JSON.Y[field] = value;
            return new XvsY(_this);
        };
        _this.SetSeries = function (axis, id, dsID) {
            if (axis === 'x')
                _this.JSON.X.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' };
            else
                _this.JSON.Y.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' };
            return new XvsY(_this);
        };
        _this.UpdateSeries = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X.Series[field] = value;
            else
                _this.JSON.Y.Series[field] = value;
            return new XvsY(_this);
        };
        _this.RemoveSeries = function (axis) {
            if (axis === 'x')
                _this.JSON.X.Series = null;
            else
                _this.JSON.Y.Series = null;
            return new XvsY(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = {
                Y: { Min: 0, Max: 100, Units: '', Series: null },
                X: { Min: 0, Max: 100, Units: '', Series: null },
                TimeMin: null, TimeMax: null, RegressionLine: false
            };
        if (_this.JSON.X == undefined)
            _this.JSON.X = { Min: 0, Max: 100, Units: '', Series: null };
        if (_this.JSON.Y == undefined)
            _this.JSON.Y = { Min: 0, Max: 100, Units: '', Series: null };
        return _this;
    }
    return XvsY;
}(Widget));

function CreateWidget(type, height, width) {
    if (type == 'Histogram')
        return new Histogram({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    //else if (type == 'Profile')
    //    return new Profile(height, width);
    else if (type == 'Stats')
        return new Stats({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    else if (type == 'Table')
        return new Table({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    else if (type == 'Text')
        return new Text({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    else if (type == 'Trend')
        return new Trend({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    if (type == 'XvsY')
        return new XvsY({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
}
function GetColor(label) {
    if (label == undefined)
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
    else if (label.indexOf('Voltage A') >= 0)
        return '#A30000';
    else if (label.indexOf('Voltage B') >= 0)
        return '#0029A3';
    else if (label.indexOf('Voltage C') >= 0)
        return '#007A29';
    else if (label.indexOf('Voltage N') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('Current A') >= 0)
        return '#FF0000';
    else if (label.indexOf('Current B') >= 0)
        return '#0066CC';
    else if (label.indexOf('Current C') >= 0)
        return '#33CC33';
    else if (label.indexOf('AN') >= 0)
        return '#FF0000';
    else if (label.indexOf('BN') >= 0)
        return '#0066CC';
    else if (label.indexOf('CN') >= 0)
        return '#33CC33';
    else if (label.indexOf('NG') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('RES') >= 0)
        return '#ffc107';
    else if (label.indexOf('Average') >= 0)
        return '#9A52A4';
    else if (label.indexOf('Total') >= 0)
        return '#9A52A4';
    else if (label.indexOf('S0') >= 0)
        return '#A30000';
    else if (label.indexOf('S2') >= 0)
        return '#007A29';
    else if (label.indexOf('S1') >= 0)
        return '#0029A3';
    else
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Profile.tsx":
/*!*****************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Profile.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Profile)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  Widgit.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function Profile(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "Profile");
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Stats.tsx":
/*!***************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Stats.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StatsJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Stats.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};








function StatsJSX(props) {
    var _a, _b;
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _c[0], setToggle = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(props)), 2), record = _d[0], setRecord = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    var stats = record.Stats();
    var dataSource = (_b = (_a = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID.toString())) !== null && _b !== void 0 ? _b : 0; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
    var datum = dataSource.find(function (dd) { var _a, _b; return (_b = dd.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.ID.toString())) !== null && _b !== void 0 ? _b : 0; });
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { className: 'table' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("thead", null,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", null,
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Category"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Statistic"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", null, Object.keys(stats).map(function (key) {
                    if (key !== 'Percentile')
                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, key),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats[key]));
                    else
                        return Object.keys(stats.Percentile).map(function (pkey) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key + pkey },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null,
                                    pkey,
                                    "th Percentile"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats.Percentile[pkey]));
                        });
                })))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_a = datum) === null || _a === void 0 ? void 0 : _a.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__.default, { Index: i, Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'Sapphire' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = datum) === null || _b === void 0 ? void 0 : _b.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Index: i, Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_c = datum) === null || _c === void 0 ? void 0 : _c.Description),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Table.tsx":
/*!***************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Table.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TableJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/react-table */ "./node_modules/@gpa-gemstone/react-table/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_9__);
//******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};










function TableJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(props)), 2), record = _b[0], setRecord = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState('Timestamp'), 2), sortField = _c[0], setSortField = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(true), 2), ascending = _d[0], setAscending = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), data = _e[0], setData = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({}), 2), info = _f[0], setInfo = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a, _b;
        var dataSource = (_b = (_a = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID.toString())) !== null && _b !== void 0 ? _b : 0; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
        var datum = dataSource.find(function (dd) { var _a, _b; return (_b = dd.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.ID.toString())) !== null && _b !== void 0 ? _b : 0; });
        if (datum == undefined)
            setInfo({});
        else
            setInfo(datum);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a;
        var ordered = lodash__WEBPACK_IMPORTED_MODULE_9___default().orderBy((_a = info === null || info === void 0 ? void 0 : info.Data) !== null && _a !== void 0 ? _a : [], [sortField], [ascending ? 'asc' : 'desc']);
        setData(ordered);
    }, [ascending, sortField, info]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__.default, { tableClass: 'table', cols: [
                    { key: 'Timestamp', field: 'Timestamp', label: 'Timestamp' },
                    { key: 'Minimum', field: 'Minimum', label: 'Min', content: function (item, key, style) { var _a; return (_a = item === null || item === void 0 ? void 0 : item.Minimum.toFixed(record.JSON.Precision)) !== null && _a !== void 0 ? _a : ''; } },
                    { key: 'Average', field: 'Average', label: 'Avg', content: function (item, key, style) { var _a; return (_a = item === null || item === void 0 ? void 0 : item.Average.toFixed(record.JSON.Precision)) !== null && _a !== void 0 ? _a : ''; } },
                    { key: 'Maximum', field: 'Maximum', label: 'Max', content: function (item, key, style) { var _a; return (_a = item === null || item === void 0 ? void 0 : item.Maximum.toFixed(record.JSON.Precision)) !== null && _a !== void 0 ? _a : ''; } },
                ], data: data, sortKey: sortField, onClick: function (data) { }, ascending: ascending, onSort: function (data) {
                    if (data.colField === sortField)
                        setAscending(!ascending);
                    else {
                        setSortField(data.colField);
                        setAscending(true);
                    }
                } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_8__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d, _e, _f;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = (_a = info) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'Sapphire' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_d = (_c = info) === null || _c === void 0 ? void 0 : _c.Name) !== null && _d !== void 0 ? _d : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__.default, { Index: i, Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_f = (_e = info) === null || _e === void 0 ? void 0 : _e.Description) !== null && _f !== void 0 ? _f : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Text.tsx":
/*!**************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Text.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Text.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function TextJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(props)), 2), record = _b[0], setRecord = _b[1];
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { style: { position: 'relative', top: 30 } }, props.JSON.Text)),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.TextArea, { Record: record.JSON, Field: "Text", Rows: 10, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { JSON: __assign({}, r) }))); }, Valid: function (field) { return true; } })))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Axis.tsx":
/*!********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Axis.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Axis)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
//******************************************************************************************************
//  Axis.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function Axis(props) {
    var firstRender = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        firstRender.current = false;
    }, []);
    //const [bins, setBins] = React.useState<number>(props.Series?.BinCount ?? 10);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Units), 2), units = _a[0], setUnits = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Position), 2), position = _b[0], setPosition = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Min), 2), min = _c[0], setMin = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Max), 2), max = _d[0], setMax = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Units", units);
            props.Callback();
        }
    }, [units]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Position", position);
            props.Callback();
        }
    }, [position]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Max", max);
            props.Callback();
        }
    }, [max]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Min", min);
            props.Callback();
        }
    }, [min]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Position"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: position, onChange: function (evt) { return setPosition(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "left" }, "Left"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "right" }, "Right"))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Units', Record: props.Axis, Type: 'text', Setter: function (r) { return setUnits(r.Units); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Min', Label: 'Min', Record: props.Axis, Type: 'number', Setter: function (r) { return setMin(r.Min); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Max', Record: props.Axis, Type: 'number', Setter: function (r) { return setMax(r.Max); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2", style: { position: 'relative' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () {
                    props.Widget.CalculateAxisRange('y', props.Index);
                    props.Callback();
                } }, "Use Data")),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", style: { top: 30 }, onClick: function () {
                    props.Widget.RemoveAxis(props.Index);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/SeriesPicker.tsx":
/*!****************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Trend/SeriesPicker.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesPicker)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
//******************************************************************************************************
//  SeriesPicker.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};







function SeriesPicker(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Axis), 2), axis = _a[0], setAxis = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Color), 2), color = _b[0], setColor = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Field), 2), type = _c[0], setType = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.ShowEvents), 2), showEvents = _d[0], setShowEvents = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Color", color);
        props.Callback();
    }, [color]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Field", type);
        props.Callback();
    }, [type]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "ShowEvents", showEvents);
        props.Callback();
    }, [showEvents]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Axis", axis);
        props.Widget.CalculateAxisRange('y');
        props.Widget.CalculateAxisRange('x');
        props.Callback();
    }, [axis]);
    function ShowAdditionInfo() {
        if (props.Type === 'TrenDAPDB')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__.default, { Index: props.Index, Data: props.Data });
        else if (props.Type === 'Sapphire')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__.default, { Index: props.Index, Data: props.Data });
        else if (props.Type === 'OpenHistorian')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__.default, { Data: props.Data });
        return null;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, props.Series.Label),
                ShowAdditionInfo()),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "YAxis"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: axis, onChange: function (evt) { return setAxis(parseInt(evt.target.value)); } }, props.Widget.JSON.YAxis.map(function (axis, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: index, key: index }, axis.Units); }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Color"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", onClick: function () {
                        props.Widget.RemoveSeries(props.Index);
                        props.Callback();
                    } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__.CrossMark))),
        (props.Type === 'TrenDAPDB' && props.Data.Events.length > 0 ?
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.CheckBox, { Record: props.Series, Field: 'ShowEvents', Label: 'Show Events', Setter: function (r) { return setShowEvents(!showEvents); } })))
            : null)));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Trend.tsx":
/*!*********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Trend.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TrendJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../Constants */ "./wwwroot/TypeScript/Constants.ts");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-datetime */ "./node_modules/react-datetime/dist/react-datetime.cjs.js");
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_datetime__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! bootstrap-switch-button-react */ "./node_modules/bootstrap-switch-button-react/lib/bootstrap-switch-button-react.js");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Axis */ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Axis.tsx");
/* harmony import */ var _SeriesPicker__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SeriesPicker */ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/SeriesPicker.tsx");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
//******************************************************************************************************
//  Trend.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/13/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};













function TrendJSX(props) {
    var _a, _b, _c, _d;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _e[0], setToggle = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props)), 2), record = _f[0], setRecord = _f[1];
    var hover = react__WEBPACK_IMPORTED_MODULE_1__.useRef(-10);
    var svgs = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);
    var margin = react__WEBPACK_IMPORTED_MODULE_1__.useRef({ bottom: 50, left: 50, top: 40, right: 50 });
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('Pan'), 2), chartAction = _g[0], setChartAction = _g[1];
    var chartActionRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef('Pan');
    var setHover = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function (value) {
        HandleHoverUpdate(value);
    }, []);
    try {
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props));
        }, [props]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            chartActionRef.current = chartAction;
        }, [chartAction]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            Initialize(record);
        }, [record]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Height: props.Height })));
        }, [props.Height]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Data: props.Data })));
        }, [props.Data]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            return function () { d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove(); };
        }, []);
    }
    catch (ex) {
        console.log(ex);
    }
    function Initialize(settings) {
        var svgCount = 1;
        if (settings.JSON.Split && settings.JSON.SplitType === 'Axis') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.YAxis.length;
        }
        else if (settings.JSON.Split && settings.JSON.SplitType === 'Series') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.Series.length;
        }
        else
            margin.current = {
                bottom: 50,
                left: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length * 50),
                top: 40,
                right: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length * 50)
            };
        if (settings.JSON.Legend)
            margin.current.right = margin.current.right + 200;
        var svgHeight = props.Height / svgCount;
        if (svgs.current.length !== svgCount) {
            svgs.current = [];
            d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
            for (var i = 0; i < svgCount; i++) {
                var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
                    .append('svg')
                    .attr('width', settings.Width)
                    .attr('height', svgHeight);
                svgs.current.push(svg);
            }
        }
        var x = GetXScale(settings);
        svgs.current.forEach(function (svg, i) {
            if (settings.JSON.Split && settings.JSON.SplitType === 'Axis')
                return InitializeSplitOnAxis(settings, svg, x, i);
            if (settings.JSON.Split && settings.JSON.SplitType === 'Series')
                return InitializeSplitOnSeries(settings, svg, x, i);
            else
                return InitializeNotSplit(settings, svg, x);
        });
    }
    function InitializeSplitOnSeries(settings, svg, x, i) {
        var _a, _b, _c, _d;
        var svgHeight = parseInt(svg.attr('height'));
        var series = settings.JSON.Series[i];
        var axis = settings.JSON.YAxis[series.Axis];
        var field = series.Field;
        AddXAxis(svg, x);
        var y = GetYScale(svgHeight, axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        var filteredData = ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === series.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).filter(function (ds) { return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[field] >= axis.Min && ds[field] <= axis.Max; });
        var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(moment__WEBPACK_IMPORTED_MODULE_7___default()(dd.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ')); }).y(function (dd) { return y(dd[series.Field]); });
        svg.selectAll("g.line").remove();
        svg.selectAll('g.line')
            .data([filteredData])
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", series.Color)
            .attr("d", function (d) {
            return lineFunc(d);
        });
        if (series.ShowEvents) {
            AddEventLine(series, svg, x);
        }
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, [series]);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeSplitOnAxis(settings, svg, x, i) {
        var svgHeight = parseInt(svg.attr('height'));
        var axis = settings.JSON.YAxis[i];
        var series = settings.JSON.Series.filter(function (s) { return s.Axis === i; }).map(function (s) {
            var _a, _b, _c, _d;
            return (__assign(__assign({}, s), { Data: ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === s.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === s.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).filter(function (ds) { return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[s.Field] >= axis.Min && ds[s.Field] <= axis.Max; }).map(function (point) { return [point.Timestamp, point[s.Field]]; }) }));
        });
        AddXAxis(svg, x);
        var y = GetYScale(svgHeight, axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(moment__WEBPACK_IMPORTED_MODULE_7___default()(dd[0], 'YYYY-MM-DDTHH:mm:ss.fffZ')); }).y(function (dd) { return y(dd[1]); });
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(series)
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (s) { return s.Color; })
            .attr("d", function (s) { return lineFunc(s.Data); });
        series.forEach(function (s) { return AddEventLine(s, svg, x); });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, series);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeNotSplit(settings, svg, x) {
        AddXAxis(svg, x);
        var y = settings.JSON.YAxis.map(function (axis) { return GetYScale(settings.Height, axis); });
        svg.selectAll('g.yaxis').remove();
        var yAxis = settings.JSON.YAxis.map(function (axis, index) {
            var a;
            if (axis.Position === 'left') {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisLeft(axis, svg, y[index], false, ind);
            }
            else {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisRight(axis, svg, y[index], ind);
            }
            return a;
        });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, settings.JSON.Series);
        }
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(settings.JSON.Series)
            .enter()
            .append("g")
            .classed("line", true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (d) { return d.Color; })
            .attr("d", function (d) {
            var _a, _b, _c, _d;
            var yScale = y[d.Axis];
            var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(moment__WEBPACK_IMPORTED_MODULE_7___default()(dd.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ')); }).y(function (dd) { return yScale(dd[d.Field]); });
            var filteredData = ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === d.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === d.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).filter(function (ds) { var _a, _b; return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[d.Field] >= ((_a = settings.JSON.YAxis[d.Axis]) === null || _a === void 0 ? void 0 : _a.Min) && ds[d.Field] <= ((_b = settings.JSON.YAxis[d.Axis]) === null || _b === void 0 ? void 0 : _b.Max); });
            return lineFunc(filteredData);
        });
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
        settings.JSON.Series.filter(function (series) { return series.ShowEvents; }).forEach(function (series) { return AddEventLine(series, svg, x); });
    }
    function AddLegend(svg, series) {
        var svgHeight = parseInt(svg.attr('height'));
        var svgWidth = parseInt(svg.attr('width'));
        var legend = svg.selectAll('g.legend')
            .data([series])
            .enter()
            .append('g')
            .attr('class', 'legend')
            .attr('transform', "translate(" + (svgWidth - 200) + "," + margin.current.top + ")");
        var legendRows = legend.selectAll('g.legendRow')
            .data(function (d) { return d; })
            .enter()
            .append('g')
            .attr('class', 'legendrow')
            .attr('transform', function (d, i) { return "translate(10," + i * 30 + ")"; });
        legendRows.append('rect').attr('height', 20).attr('width', 20).attr('fill', function (d) { return d.Color; });
        legendRows.append('text').attr('x', 30).attr('y', 15)
            .text(function (d) {
            var _a, _b;
            if (((_a = d === null || d === void 0 ? void 0 : d.Label) !== null && _a !== void 0 ? _a : '').length > 15)
                return d.Label.slice(0, 15) + '...';
            else
                return (_b = d === null || d === void 0 ? void 0 : d.Label) !== null && _b !== void 0 ? _b : '';
        });
        legendRows.append('title').text(function (d) { return d.Label; });
    }
    function AddEventLine(series, svg, x) {
        var _a, _b, _c, _d;
        var svgHeight = parseInt(svg.attr('height'));
        var data = ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === series.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Events) !== null && _d !== void 0 ? _d : []);
        svg.selectAll('g.event-line').remove();
        var g = svg.selectAll('g.event-line')
            .data(data)
            .enter()
            .append('g')
            .classed('event-line', true);
        g.append('path')
            .attr('stroke-width', '2px')
            .attr("d", function (d) { return "M0," + (svgHeight - margin.current.bottom - margin.current.top) + "L-10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + ",L10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + "L0," + (svgHeight - margin.current.bottom - margin.current.top) + "Z"; })
            .attr("transform", function (d) { return "translate(" + x(moment__WEBPACK_IMPORTED_MODULE_7___default()(d.StartTime, 'YYYY-MM-DDTHH:mm:ss.fff')) + "," + margin.current.top + ")"; })
            .attr('stroke', 'red')
            .attr('fill', 'red')
            .style('cursor', 'pointer')
            .on('click', function (e, d) {
            window.open(record.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); }).DataSource.OpenSEE + '?eventID=' + d.ID);
        });
    }
    function AddXAxis(svg, x) {
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        svg.selectAll('g.xaxis').remove();
        var xAxis = svg.append("g").classed('xaxis', true)
            .attr("transform", "translate(0," + (svgHeight - margin.current.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("g").classed('xaxis', true).append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (svgWidth / 2) + "," + (svgHeight - margin.current.bottom / 3) + ")")
            .text("Time");
    }
    function AddYAxisLeft(axis, svg, y, rotate, index) {
        if (rotate === void 0) { rotate = true; }
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (margin.current.left - index * 50) + ",0)")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return d3__WEBPACK_IMPORTED_MODULE_0__.format("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        if (rotate)
            text.attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + ((margin.current.left - index * 50) / 3) + ")").style("text-anchor", "middle");
        else
            text.attr("transform", "translate(" + (margin.current.left - index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "end");
    }
    function AddYAxisRight(axis, svg, y, index) {
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + ",0)")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return d3__WEBPACK_IMPORTED_MODULE_0__.format("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        text.attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "start");
    }
    function GetXScale(settings) {
        return d3__WEBPACK_IMPORTED_MODULE_0__.scaleUtc()
            .domain([settings.JSON.Min, settings.JSON.Max]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([margin.current.left, settings.Width - margin.current.right]);
    }
    function GetYScale(svgHeight, axis) {
        return d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.current.bottom, margin.current.top])
            .domain([axis.Min, axis.Max]);
    }
    function HandleHoverUpdate(hover) {
        if (chartActionRef.current !== 'Click')
            return;
        svgs.current.forEach(function (svg, index) {
            var height = parseInt(svg.attr('height')) - margin.current.top - margin.current.bottom;
            if (hover >= margin.current.left && hover <= (props.Width - margin.current.right)) {
                svg.selectAll('g.mouse-over').remove();
                svg.append('g')
                    .classed('mouse-over', true)
                    .append('path')
                    .attr("d", function (d) { return "M 0 0 V " + height; })
                    .attr("transform", "translate(" + hover + "," + margin.current.top + ")")
                    .attr('stroke', 'gray');
            }
        });
    }
    function HandleReset() {
        setRecord(record.CalculateAxisRange('x'));
    }
    function HandleChartAction(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var width = parseInt(svg.attr('width'));
        evt.preventDefault();
        if (evt.offsetX < margin.current.left || evt.offsetX > width - margin.current.right)
            return;
        else if (evt.offsetY < margin.current.top || evt.offsetY > height - margin.current.bottom)
            return;
        else if (chartActionRef.current == 'Click')
            OnClick(evt, svg, scale);
        else if (chartActionRef.current == 'Pan')
            OnPan(evt, svg, scale);
        else if (chartActionRef.current == 'ZoomX')
            OnXZoom(evt, svg, scale);
    }
    function OnClick(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var tooltipHeight = record.JSON.Series.length * 15;
        if (evt.offsetX < margin.current.left && evt.offsetX > (props.Width - margin.current.right))
            return;
        svg.selectAll('g.mouse-over2').remove();
        svg.append('g')
            .classed('mouse-over2', true)
            .append('path')
            .attr("d", function (d) { return "M 0 0 V " + (height - margin.current.bottom - margin.current.top); })
            .attr("transform", "translate(" + evt.offsetX + "," + margin.current.top + ")")
            .attr('stroke', 'grey');
        svg.selectAll('g.charttooltip').remove();
        var tooltip = svg.append('g')
            .attr('class', 'charttooltip')
            .attr("transform", "translate(" + (evt.offsetX + 15) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
        var rect = tooltip.append('rect')
            .attr('fill', 'gainsboro')
            .attr('height', record.JSON.Series.length + 'em')
            .attr('width', 200)
            .attr('x', 0)
            .attr('y', 0);
        var text = tooltip.append('text')
            .attr('x', 0)
            .attr('y', 0);
        var width = 200;
        record.JSON.Series.forEach(function (series, index) {
            var _a, _b, _c, _d;
            tooltip.append('rect').attr('x', 5).attr('y', index + "em").attr('height', '1em').attr('width', '1em').attr('fill', series.Color);
            var dataSource = (_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID == series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var data = (_d = (_c = dataSource.find(function (ds) { return ds.ID == series.ID; })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
            var floor = Math.floor(data.length * evt.offsetX / props.Width * .95);
            var ceil = Math.ceil(data.length * evt.offsetX / props.Width * 1.05);
            var shortenedData = data.slice(floor, ceil);
            var dist = shortenedData.map(function (datum) { return ({ Value: datum[series.Field], Distance: Math.abs(evt.offsetX - scale(moment__WEBPACK_IMPORTED_MODULE_7___default()(datum.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ').toDate().getTime())) }); });
            dist.sort(function (a, b) {
                if (a.Distance > b.Distance)
                    return 1;
                else if (a.Distance == b.Distance)
                    return 0;
                else
                    return -1;
            });
            var datum = d3__WEBPACK_IMPORTED_MODULE_0__.format('.2f')(dist[0].Value);
            text.append('tspan').text(series.Label + ' - ' + datum).attr('x', '1.5em').attr('y', index + 1 + "em");
            width = text.node().getBBox().width + 25 > width ? text.node().getBBox().width + 25 : width;
        });
        rect.attr('width', width);
        if (width > props.Width - margin.current.right - evt.offsetX)
            tooltip.attr("transform", "translate(" + (evt.offsetX - 15 - width) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
    }
    function OnPan(evt, svg, scale) {
        var start = evt.clientX;
        svg.on('mousemove.pan', function (e) {
            record.UpdateJSON('Min', scale.invert(scale.range()[0] + start - e.clientX).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(scale.range()[1] + start - e.clientX).getTime())));
        });
        svg.on('mouseup.pan', function () { return svg.on('mousemove.pan', null); });
    }
    function OnXZoom(evt, svg, scale) {
        var start = evt.offsetX;
        var brush = d3__WEBPACK_IMPORTED_MODULE_0__.brushX()
            .extent([[margin.current.left, margin.current.top + 0.5], [props.Width - margin.current.right, parseInt(svg.attr('height')) - margin.current.bottom + 0.5]]);
        var br = svg.append('g').call(brush);
        br.call(brush.move, [start, start + 1]);
        svg.on('mousemove.brush', function (e) {
            br.call(brush.move, [start, e.offsetX]);
        });
        svg.on('mouseup.brush', function (e) {
            var min = Math.min(start, e.offsetX);
            var max = Math.max(start, e.offsetX);
            record.UpdateJSON('Min', scale.invert(min).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(max).getTime())));
            br.remove();
            svg.on('mousemove.brush', null);
            svg.on('mouseup.brush', null);
        });
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref, style: { userSelect: 'none' } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { style: { position: 'absolute', left: 10, zIndex: 1010 } },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-light', onClick: HandleReset }, "Reset"),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "form-check-inline" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-check-label" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "radio", className: "form-check-input", checked: chartAction == 'Pan', onChange: function (evt) { return setChartAction('Pan'); } }),
                            "Pan")),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "form-check-inline" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-check-label" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "radio", className: "form-check-input", checked: chartAction == 'ZoomX', onChange: function (evt) { return setChartAction('ZoomX'); } }),
                            "Zoom")),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "form-check-inline" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-check-label" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "radio", className: "form-check-input", checked: chartAction == 'Click', onChange: function (evt) { return setChartAction('Click'); } }),
                            "Click"))))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-1' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Split"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10___default()), { checked: (_b = (_a = record === null || record === void 0 ? void 0 : record.JSON) === null || _a === void 0 ? void 0 : _a.Split) !== null && _b !== void 0 ? _b : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Split', checked)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Select, { Label: 'Split On', Field: 'SplitType', Record: record === null || record === void 0 ? void 0 : record.JSON, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: r }))); }, Options: [{ Value: 'Axis', Label: 'Axis' }, { Value: 'Series', Label: 'Series' }] })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Legend"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10___default()), { checked: (_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Legend) !== null && _d !== void 0 ? _d : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Legend', checked)); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Axis"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_8___default()), { value: moment__WEBPACK_IMPORTED_MODULE_7___default()(record.JSON.Min), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: __assign(__assign({}, record.JSON), { Min: moment__WEBPACK_IMPORTED_MODULE_7___default()(value).toDate().getTime() }) }))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_8___default()), { value: moment__WEBPACK_IMPORTED_MODULE_7___default()(record.JSON.Max), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: __assign(__assign({}, record.JSON), { Max: moment__WEBPACK_IMPORTED_MODULE_7___default()(value).toDate().getTime() }) }))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () {
                                record.CalculateAxisRange('x', 0);
                                setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record));
                            } }, "Use Data"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Axis"),
                " ",
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { style: { position: 'relative', float: 'right', top: -30 }, className: 'btn btn-link', onClick: function () {
                        record.AddAxis();
                        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record));
                    } }, _Constants__WEBPACK_IMPORTED_MODULE_5__.Plus),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group list-group-flush", style: { maxHeight: window.innerHeight - 625, overflowY: 'auto', overflowX: 'hidden', width: '100%' } }, record.JSON.YAxis.map(function (axis, index) { return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: index, className: 'list-group-item' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Axis__WEBPACK_IMPORTED_MODULE_11__.default, { Axis: axis, Index: index, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }))); }))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 250 } }, record.Data.map(function (d, i) {
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                (d.DataSource.Type === 'TrenDAPDB' ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddVoltageRMS(d.DataSource.ID)); } }, "Quick Add VRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddCurrentRMS(d.DataSource.ID)); } }, "Quick Add IRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.RemoveAll(d.DataSource.ID)); } }, "Remove All")) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" }, record.JSON.Series.map(function (series, ind) {
                                    var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                    if (datum === undefined)
                                        return null;
                                    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_SeriesPicker__WEBPACK_IMPORTED_MODULE_12__.default, { Type: d.DataSource.Type, Index: ind, Series: series, Data: datum, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } })));
                                })))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx":
/*!*********************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************


function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    var id = lodash__WEBPACK_IMPORTED_MODULE_1___default().uniqueId('dropdown-');
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: id, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": id },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Device: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Device),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Reference: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.SignalReference),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Type: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.SignalType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Engineering Units: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.EngineeringUnits),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phasor Type: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.PhasorType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Description: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Description))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/SeriesSelect.tsx":
/*!*******************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/SeriesSelect.tsx ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _AdditionalInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};


function SeriesSelect(props) {
    var _a, _b, _c;
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _d[0], setDataSource = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ ID: '0' }), 2), selected = _e[0], setSelected = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), delimeter = _f[0], setDelimeter = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: delimeter, onChange: function (evt) { return setDelimeter(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            ((_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return d.Device; }).filter(function (x, i, a) { return a.indexOf(x) === i; }).map(function (d, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: d }, d); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: (_b = selected === null || selected === void 0 ? void 0 : selected.ID) !== null && _b !== void 0 ? _b : '0', onChange: function (evt) { return setSelected(dataSource.Data.find(function (datum) { return datum.ID === evt.target.value; })); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '0' }),
            ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _c !== void 0 ? _c : []).filter(function (d) { return d.Device.indexOf(delimeter) >= 0; }).map(function (datum, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: index, value: datum.ID }, datum.Description); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_AdditionalInfo__WEBPACK_IMPORTED_MODULE_1__.default, { Data: selected }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    var label = selected.Description;
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeries((selected).ID, props.DataSourceID, label);
                    else if (props.Widget.Type === 'Trend')
                        props.Widget.AddSeries((selected).ID, props.DataSourceID, label);
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeries((selected).ID, props.DataSourceID);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeries((selected).ID, props.DataSourceID);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeries(props.Axis, (selected).ID, props.DataSourceID);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/AdditionalInfo.tsx":
/*!****************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/AdditionalInfo.tsx ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: "dropdownMenuButton" + props.Index, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Addition Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" + props.Index },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Meter: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Meter),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Asset: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.Asset),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Characteristic: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.Characteristic),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Type: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.Type),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Station: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Station),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Harmonic: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Harmonic))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/SeriesSelect.tsx":
/*!**************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/SeriesSelect.tsx ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

function SeriesSelect(props) {
    var _a, _b, _c;
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _d[0], setDataSource = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ ID: -1 }), 2), selected = _e[0], setSelected = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), delimeter = _f[0], setDelimeter = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: delimeter, onChange: function (evt) { return setDelimeter(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            ((_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return d.Meter; }).filter(function (x, i, a) { return a.indexOf(x) === i; }).map(function (d, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: d }, d); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: (_b = selected === null || selected === void 0 ? void 0 : selected.ID) !== null && _b !== void 0 ? _b : '0', onChange: function (evt) { return setSelected(dataSource.Data.find(function (datum) { return datum.ID === parseInt(evt.target.value); })); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '-1' }),
            ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _c !== void 0 ? _c : []).filter(function (datum) { return datum.Meter.indexOf(delimeter) >= 0; }).map(function (datum, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: index, value: datum.ID }, datum.Name + (datum.Characteristic.indexOf('HRMS') >= 0 ? ' HG: ' + datum.Harmonic : '')); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary dropdown-toggle", type: "button", id: "dropdownMenuButton", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "dropdownMenuButton" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Meter: ", selected === null || selected === void 0 ? void 0 :
                    selected.Meter),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Asset: ", selected === null || selected === void 0 ? void 0 :
                    selected.Asset),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Characteristic: ", selected === null || selected === void 0 ? void 0 :
                    selected.Characteristic),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Type: ", selected === null || selected === void 0 ? void 0 :
                    selected.Type),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Station: ", selected === null || selected === void 0 ? void 0 :
                    selected.Station),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Phase: ", selected === null || selected === void 0 ? void 0 :
                    selected.Phase),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Harmonic: ", selected === null || selected === void 0 ? void 0 :
                    selected.Harmonic)),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeries(selected.ID, props.DataSourceID, selected.Type + ' ' + selected.Phase);
                    else if (props.Widget.Type === 'Trend') {
                        var label = '';
                        if (selected.Characteristic === 'Frequency')
                            label = 'Freq - ' + selected.Meter;
                        else if (selected.Characteristic.indexOf('HRMS') >= 0)
                            label = selected.Characteristic + "-" + selected.Phase + " HG: " + selected.Harmonic + " - " + selected.Meter;
                        else if (selected.Characteristic === 'RMS')
                            label = selected.Characteristic + "-" + selected.Phase + " - " + selected.Meter;
                        else
                            label = selected.Phase + " " + selected.Characteristic + " - " + selected.Meter;
                        props.Widget.AddSeries(selected.ID, props.DataSourceID, label);
                    }
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeries(selected.ID, props.DataSourceID);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeries(selected.ID, props.DataSourceID);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeries(props.Axis, selected.ID, props.DataSourceID);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx":
/*!***********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Widgit),
/* harmony export */   "SeriesSelect": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XDA/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/SeriesSelect.tsx");
/* harmony import */ var _OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OpenHistorian/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/SeriesSelect.tsx");
/* harmony import */ var _Sapphire_SeriesSelect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Sapphire/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Sapphire/SeriesSelect.tsx");
//******************************************************************************************************
//  Widget.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function Widgit(props) {
    return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: props.Toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog mw-100 w-75", role: "document" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content mx-auto" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" },
                        props.Label,
                        " Settings"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return props.SetToggle(false); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" }, props.children)),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                            props.Update(props.Record);
                            props.SetToggle(false);
                        } }, "Save changes"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-danger", onClick: function () {
                            props.Remove();
                            props.SetToggle(false);
                        } }, "Delete Widgit"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return props.SetToggle(false); } }, "Close"))))), document.getElementById("window"));
}
function SeriesSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _a[0], setDataSource = _a[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
            //setSelected((dataSource?.Data ?? [undefined])[0]);
        }
    }, [props.Widget.Data]);
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__.default, __assign({}, props));
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Sapphire_SeriesSelect__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Widget: props.Widget }));
    else
        return null;
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx":
/*!***********************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: "dropdownMenuButton" + props.Index, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Addition Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" + props.Index },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Meter: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Meter),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Asset: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.Asset),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Characteristic: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.Characteristic),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Type: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.Type),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Station: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Station),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Harmonic: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Harmonic))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/SeriesSelect.tsx":
/*!*********************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/SeriesSelect.tsx ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

function SeriesSelect(props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var _l = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _l[0], setDataSource = _l[1];
    var _m = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ ID: 0 }), 2), selected = _m[0], setSelected = _m[1];
    var _o = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState('Meter'), 2), type = _o[0], setType = _o[1];
    var _p = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), delimeter = _p[0], setDelimeter = _p[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Meter' }, "Meter"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Asset' }, "Asset")),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: delimeter, onChange: function (evt) { return setDelimeter(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            ((_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return d[type]; }).filter(function (x, i, a) { return a.indexOf(x) === i; }).map(function (d, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: d }, d); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: (_b = selected === null || selected === void 0 ? void 0 : selected.ID) !== null && _b !== void 0 ? _b : '0', onChange: function (evt) { return setSelected(dataSource.Data.find(function (datum) { return datum.ID === parseInt(evt.target.value); })); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '0' }),
            ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _c !== void 0 ? _c : []).filter(function (datum) { return datum[type].indexOf(delimeter) >= 0; }).map(function (datum, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: index, value: datum.ID }, datum.Name); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary dropdown-toggle", type: "button", id: "dropdownMenuButton", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "dropdownMenuButton" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Meter: ", (_d = selected) === null || _d === void 0 ? void 0 :
                    _d.Meter),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Asset: ", (_e = selected) === null || _e === void 0 ? void 0 :
                    _e.Asset),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Characteristic: ", (_f = selected) === null || _f === void 0 ? void 0 :
                    _f.Characteristic),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Type: ", (_g = selected) === null || _g === void 0 ? void 0 :
                    _g.Type),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Station: ", (_h = selected) === null || _h === void 0 ? void 0 :
                    _h.Station),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Phase: ", (_j = selected) === null || _j === void 0 ? void 0 :
                    _j.Phase),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Harmonic: ", (_k = selected) === null || _k === void 0 ? void 0 :
                    _k.Harmonic)),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeries(selected.ID, props.DataSourceID, selected.Type + ' ' + selected.Phase);
                    else if (props.Widget.Type === 'Trend') {
                        var label = '';
                        if (selected.Characteristic === 'Frequency')
                            label = 'Freq - ' + selected.Meter;
                        else if (selected.Type === 'Voltage' && selected.Characteristic === 'RMS')
                            label = "V" + selected.Phase + " - " + selected.Meter;
                        else if (selected.Type === 'Voltage')
                            label = "V" + selected.Phase + " " + selected.Characteristic + " - " + selected.Meter;
                        else if (selected.Type === 'Current' && selected.Characteristic === 'RMS')
                            label = "I" + selected.Phase + " - " + selected.Meter;
                        else if (selected.Type === 'Current')
                            label = "I" + selected.Phase + " " + selected.Characteristic + " - " + selected.Meter;
                        else
                            label = selected.Name;
                        props.Widget.AddSeries(selected.ID, props.DataSourceID, label);
                    }
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeries(selected.ID, props.DataSourceID);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeries(selected.ID, props.DataSourceID);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeries(props.Axis, selected.ID, props.DataSourceID);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/XvsY.tsx":
/*!**************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/XvsY.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ XvsYJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-datetime */ "./node_modules/react-datetime/dist/react-datetime.cjs.js");
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react_datetime__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var simple_statistics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! simple-statistics */ "./node_modules/simple-statistics/dist/simple-statistics.mjs");
//******************************************************************************************************
//  XvsY.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};












function XvsYJSX(props) {
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(props)), 2), record = _b[0], setRecord = _b[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        //record.current = new Trend(props);
    }, [toggle, props.JSON]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Height: props.Height })));
    }, [props.Height]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    function Zip(array1, field1, array2, field2, zipField) {
        var returnArray = [];
        if (array1.length > array2.length) {
            array1.forEach(function (xd, i) {
                var array2Point = array2.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array2Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array1: xd[field1], Array2: array2Point[field2]
                });
            });
        }
        else {
            array2.forEach(function (xd, i) {
                var array1Point = array1.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array1Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array2: xd[field1], Array1: array1Point[field2]
                });
            });
        }
        return returnArray;
    }
    function Initialize(settings) {
        var _a, _b, _c, _d;
        if (settings.JSON.X.Series == undefined || settings.JSON.Y.Series == undefined)
            return;
        var margin = { bottom: 50, left: 50, top: 40, right: 50 };
        var svgHeight = props.Height;
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([settings.JSON.X.Min, settings.JSON.X.Max]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.top - margin.bottom, 0])
            .domain([settings.JSON.Y.Min, settings.JSON.Y.Max]); // d3.hist has to be called before the Y axis obviously
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', svgHeight);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (svgHeight - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (svgHeight - margin.bottom / 3) + ")")
            .text(settings.JSON.X.Units);
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + (margin.left) + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + (margin.left / 3) + ")")
            .style("text-anchor", "middle")
            .text(settings.JSON.Y.Units);
        var xData = (_b = (_a = GetDatum('x')) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
        var yData = (_d = (_c = GetDatum('y')) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
        var combinedData = Zip(xData, record.JSON.X.Series.Field, yData, record.JSON.Y.Series.Field, 'Timestamp');
        //const combinedData = xData.map((xd, i) => ({ Timestamp: xd.Timestamp, X: xd[record.JSON.XSeries.Field], Y: yData[i][record.JSON.YSeries.Field] }))
        var filteredData = combinedData.filter(function (d) { return moment__WEBPACK_IMPORTED_MODULE_8___default()(d.ZipField).toDate().getTime() >= record.JSON.TimeMin && moment__WEBPACK_IMPORTED_MODULE_8___default()(d.ZipField).toDate().getTime() <= record.JSON.TimeMax; });
        svg.selectAll("dot")
            .data(filteredData)
            .enter().append("circle")
            .attr("r", 3.5)
            .attr("cx", function (d) { return x(d.Array1); })
            .attr("cy", function (d) { return y(d.Array2); })
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (record.JSON.RegressionLine) {
            var data = filteredData.map(function (d) { return [d.Array1, d.Array2]; });
            var model = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_11__.linearRegression)(data);
            var lrLine_1 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_11__.linearRegressionLine)(model);
            var r2 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_11__.rSquared)(data, lrLine_1);
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (d) { return x(d[0]); }).y(function (d) { return y(lrLine_1(d[0])); });
            svg.append('text')
                .attr('stroke', 'red')
                .attr("transform", "translate(" + (props.Width - margin.left - margin.right) + "," + margin.top + ")")
                .text("R2 - " + r2.toFixed(3));
            svg.append("path")
                .data([data])
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", 'red')
                .attr("d", function (d) { return lineFunc_1(d); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    function GetDatum(axis) {
        var _a, _b, _c, _d;
        if (axis === 'x') {
            if (record.JSON.X.Series == undefined)
                return { Name: '' };
            var dataSource = (_b = (_a = record.Data.find(function (d) { return d.DataSource.ID.toString() === record.JSON.X.Series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var datum = dataSource.find(function (ds) { return ds.ID.toString() === record.JSON.X.Series.ID.toString(); });
            return datum;
        }
        else {
            if (record.JSON.Y.Series == undefined)
                return { Name: '' };
            var dataSource = (_d = (_c = record.Data.find(function (d) { return d.DataSource.ID.toString() === record.JSON.Y.Series.DataSourceID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
            var datum = dataSource.find(function (ds) { return ds.ID.toString() === record.JSON.Y.Series.ID.toString(); });
            return datum;
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_9___default()), { value: moment__WEBPACK_IMPORTED_MODULE_8___default()(record.JSON.TimeMin), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('TimeMin', moment__WEBPACK_IMPORTED_MODULE_8___default()(value).toDate().getTime()))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_9___default()), { value: moment__WEBPACK_IMPORTED_MODULE_8___default()(record.JSON.TimeMax), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('TimeMax', moment__WEBPACK_IMPORTED_MODULE_8___default()(value).toDate().getTime()))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateRange('time')); } }, "Use Data"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.CheckBox, { Record: record.JSON, Field: 'RegressionLine', Label: 'Add Regression', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('RegressionLine', r.RegressionLine))); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Axis"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Units', r.Units)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Min', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Min', r.Min)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Max', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Max', r.Max)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateRange('x')); } }, "Use Data"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Axis"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Units', r.Units)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Min', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Min', r.Min)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Max', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Max', r.Max)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateRange('y')); } }, "Use Data")))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'x', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.X.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_b = (_a = GetDatum('x')) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('x') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'x', Series: record.JSON.X.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'y', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.Y.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_d = (_c = GetDatum('y')) === null || _c === void 0 ? void 0 : _c.Name) !== null && _d !== void 0 ? _d : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('y') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'y', Series: record.JSON.Y.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _a[0], setType = _a[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        props.Widget.UpdateSeries(props.Axis, "Field", type);
        props.Callback();
    }, [type]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-label" }, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () {
                    props.Widget.RemoveSeries(props.Axis);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Histogram.tsx":
/*!***********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Histogram.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HistogramJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
//******************************************************************************************************
//  Histogram.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};










var SvgStyle = {
    fill: 'none',
    shapeRendering: 'crispEdges',
    userSelect: 'none',
    WebkitTouchCallout: 'none',
    WebkitUserSelect: 'none',
    KhtmlUserSelect: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none'
};
function HistogramJSX(props) {
    var _a;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _b[0], setToggle = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(props)), 2), record = _c[0], setRecord = _c[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
    }, [toggle, props.JSON]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(props));
    }, [props.Data, props.Height, props.Device]);
    function Initialize(settings) {
        var _a, _b;
        var profile = settings.JSON.Series.map(function (series) { return series.Profile; }).reduce(function (prev, curr) { return prev || curr; }, false);
        var margin = { bottom: 50, left: 50, top: 40, right: (profile ? 70 : 20) };
        var svgHeight = record.Height - margin.top - margin.bottom;
        var extent = d3__WEBPACK_IMPORTED_MODULE_0__.extent([].concat.apply([], __spreadArray([], __read(settings.JSON.Series.map(function (series) {
            var _a, _b, _c, _d, _e, _f, _g;
            var dataSource = settings.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum;
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
                var s_1 = series;
                datum = (_c = (_b = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s_1.Type && dd.Phase === s_1.Phase; })) === null || _b === void 0 ? void 0 : _b.Data) !== null && _c !== void 0 ? _c : [];
            }
            else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
                var s_2 = series;
                datum = (_e = (_d = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s_2.Type && dd.Phase === s_2.Phase && dd.Characteristic === s_2.Characteristic; })) === null || _d === void 0 ? void 0 : _d.Data) !== null && _e !== void 0 ? _e : [];
            }
            else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
                var s_3 = series;
                datum = (_g = (_f = data.find(function (dd) { return dd.Meter === props.Device && dd.Phase === s_3.Phase && dd.Characteristic === s_3.Measurement && dd.Harmonic === s_3.Harmonic; })) === null || _f === void 0 ? void 0 : _f.Data) !== null && _g !== void 0 ? _g : [];
            }
            else
                datum = [];
            return datum.map(function (d) { return d[series.Field]; });
        })))));
        //// set the parameters for the histogram
        var histograms = ((_b = (_a = settings.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series) {
            var _a, _b;
            var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum;
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
                var s_4 = series;
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s_4.Type && dd.Phase === s_4.Phase; });
            }
            else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
                var s_5 = series;
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s_5.Type && dd.Phase === s_5.Phase && dd.Characteristic === s_5.Characteristic; });
            }
            else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
                var s_6 = series;
                datum = data.find(function (dd) { return dd.Meter === props.Device && dd.Phase === s_6.Phase && dd.Characteristic === s_6.Measurement && dd.Harmonic === s_6.Harmonic; });
            }
            else
                datum = { Data: [] };
            datum = (_b = datum === null || datum === void 0 ? void 0 : datum.Data.map(function (d) { return d[series.Field]; })) !== null && _b !== void 0 ? _b : [];
            var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                .value(function (d) { return d; }) // I need to give the vector of value
                .domain(extent) // then the domain of the graphic
                .thresholds(settings.JSON.BinCount); // then the numbers of bins
            // And apply this function to data to get the bins
            return histogram(datum);
        });
        var yMax = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.length; }))));
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', settings.Height);
        var xMin = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.x0; }))));
        var xMax = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.x1; }))));
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([xMin, xMax]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (settings.Height - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (settings.Height - margin.bottom / 3) + ")")
            .text(record.JSON.Units);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([settings.Height - margin.top - margin.bottom, 0])
            .domain([0, yMax]); // d3.hist has to be called before the Y axis obviously
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + margin.left / 3 + ")")
            .style("text-anchor", "middle")
            .text("Counts");
        var binWidth = Math.max.apply(Math, __spreadArray([], __read(histograms.map(function (histogram) { return Math.max.apply(Math, __spreadArray([], __read(histogram.map(function (a) { return x(a.x1) - x(a.x0); })))); }))));
        //svg.selectAll("g.bins").remove();
        svg.selectAll("g.bins")
            .data(settings.JSON.Series)
            .enter()
            .append('g').attr('class', 'bins').attr("fill", function (series) { return series.Color; })
            .attr('transform', function (d, index) { return "translate(" + (margin.left + index * binWidth / settings.JSON.Series.length) + "," + margin.top + ")"; })
            //.attr("opacity", 0.3)
            .selectAll('rect')
            .data(function (series, index) { return histograms[index]; })
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function (d, i, g) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
            .attr("width", function (d) { return (x(d.x1) - x(d.x0) > 2 ? (x(d.x1) - x(d.x0)) / settings.JSON.Series.length : 2) - 1; })
            .attr("height", function (d) { return svgHeight - y(d.length); });
        if (profile) {
            var profiles = settings.JSON.Series.filter(function (series) { return series.Profile; }).map(function (series, index) {
                var _a, _b;
                var dataSource = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; });
                var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
                var datum;
                if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
                    datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
                else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
                    datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
                else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire')
                    datum = data.find(function (dd) { return dd.Meter === props.Device && dd.Harmonic === series.Harmonic && dd.Phase === series.Phase && dd.Characteristic === series.Measurement; });
                else
                    datum = { Data: [] };
                datum = (_b = datum === null || datum === void 0 ? void 0 : datum.Data.map(function (d) { return d[series.Field]; })) !== null && _b !== void 0 ? _b : [];
                var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                    .value(function (d) { return d; }) // I need to give the vector of value
                    .domain(d3__WEBPACK_IMPORTED_MODULE_0__.extent(datum)) // then the domain of the graphic
                    .thresholds(settings.JSON.BinCount)(datum); // then the numbers of bins
                return { Color: series.ProfileColor, Profile: histogram.map((function (sum) { return function (value) { return sum += value.length; }; })(0)).map(function (prof, i) { return ({ Bin: histogram[i].x0, Value: prof }); }) };
            });
            //const profiles = histograms.map(hist => hist.map((sum => value => sum += value.length)(0)).map((prof, i) => ({ Bin: hist[i].x0, Value: prof })));
            var pyMax = Math.max.apply(Math, __spreadArray([], __read(profiles.map(function (pr) { return pr.Profile; }).reduce(function (prev, curr) { return prev.concat(curr); }, []).map(function (p) { return p.Value; }))));
            var py_1 = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
                .range([settings.Height - margin.top - margin.bottom, 0])
                .domain([0, pyMax]); // d3.hist has to be called before the Y axis obviously
            var pyAxis = svg.append("g")
                .attr("transform", "translate(" + (settings.Width - margin.right) + "," + margin.top + ")")
                .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(py_1));
            svg.append("text")
                .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + (settings.Width - margin.right / 3) + ")")
                .style("text-anchor", "middle")
                .text("Profile");
            //const filteredData = profile.find(ds => ds.ID === series.ID)?.Data ?? []).filter(ds => moment(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[field] >= axis.Min && ds[field] <= axis.Max)
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd.Bin); }).y(function (dd) { return py_1(dd.Value); });
            svg.append("path")
                .data(profiles)
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", function (d) { return d.Color; })
                .attr("d", function (d) { return lineFunc_1(d.Profile); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-4" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: (_a = record === null || record === void 0 ? void 0 : record.Width) !== null && _a !== void 0 ? _a : 0, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Units', Record: record.JSON, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'BinCount', Label: 'Bins', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d, _e, _f;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_9__.Histogram(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" },
                                    (d.DataSource.Type === 'TrenDAPDB' ? ((_b = (_a = record.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
                                        //if (datum === undefined) return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum === null || datum === void 0 ? void 0 : datum.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum, Index: i })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null),
                                    (d.DataSource.Type === 'Sapphire' ? ((_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Series) !== null && _d !== void 0 ? _d : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd[props.By] === props.Device && dd.Characteristic === series.Measurement && dd.Phase === series.Phase && dd.Harmonic === series.Harmonic; });
                                        //if (datum === undefined) return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum === null || datum === void 0 ? void 0 : datum.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__.default, { Data: datum, Index: i })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null),
                                    (d.DataSource.Type === 'OpenHistorian' ? ((_f = (_e = record.JSON) === null || _e === void 0 ? void 0 : _e.Series) !== null && _f !== void 0 ? _f : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
                                        //if (datum === undefined) return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (datum === null || datum === void 0 ? void 0 : datum.Device) + ' - ' + (datum === null || datum === void 0 ? void 0 : datum.Description)),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null)))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Color), 2), color = _a[0], setColor = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _b[0], setType = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Profile), 2), profile = _c[0], setProfile = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.ProfileColor), 2), pColor = _d[0], setPColor = _d[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Color", color)); }, [color]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Field", type)); }, [type]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Profile", profile)); }, [profile]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "ProfileColor", pColor)); }, [pColor]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "checkbox", className: "form-control", style: { width: 20 }, value: profile === null || profile === void 0 ? void 0 : profile.toString(), checked: profile, onChange: function (evt) { return setProfile(evt.target.checked); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: pColor, onChange: function (evt) { return setPColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () { return props.Callback(props.Widget.RemoveSeries(props.Index)); } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_8__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts":
/*!****************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Widget": () => (/* binding */ Widget),
/* harmony export */   "Histogram": () => (/* binding */ Histogram),
/* harmony export */   "Trend": () => (/* binding */ Trend),
/* harmony export */   "Stats": () => (/* binding */ Stats),
/* harmony export */   "Table": () => (/* binding */ Table),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "XvsY": () => (/* binding */ XvsY),
/* harmony export */   "CreateWidget": () => (/* binding */ CreateWidget)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/helper-functions */ "./node_modules/@gpa-gemstone/helper-functions/lib/index.js");
/* harmony import */ var stats_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stats-lite */ "./node_modules/stats-lite/stats.js");
//******************************************************************************************************
//  Implementations.ts - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/27/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};


var Widget = /** @class */ (function () {
    function Widget(props) {
        var _this = this;
        this.SetLabel = function (label) {
            _this.Label = label;
        };
        this.SetHeight = function (height) { return _this.Height = height; };
        this.SetWidth = function (width) { return _this.Width = width; };
        this.SetJSON = function (json) { return _this.JSON = json; };
        //public AvailableSeries = () => this.Data.map(dd => ({ ...dd, DataSourceID: dd.DataSource.ID, DataSource: dd.DataSource }).Data.map(ddd => ({ ...ddd, Data: [], DataSource: dd.DataSource.Name, DataSourceID: dd.DataSource.ID } as TrenDAP.iXDAReturnWithDataSource))).reduce((acc, val) => acc.concat(val), []);
        this.UpdateJSON = function (field, value) {
            _this.JSON[field] = value;
            return _this;
        };
        this.Height = props.Height;
        this.Width = props.Width;
        this.Type = props.Type;
        this.Label = props.Label;
        this.JSON = props.JSON;
        this.By = props.By;
        this.Device = props.Device;
        if (props.Data == undefined)
            this.Data = [];
        else
            this.Data = props.Data;
    }
    return Widget;
}());

var Histogram = /** @class */ (function (_super) {
    __extends(Histogram, _super);
    function Histogram(props) {
        var _this = _super.call(this, props) || this;
        _this.AddSeriesXDA = function (dataSourceID, phase, type, characteristic) {
            var label = type + " " + phase + " " + characteristic;
            var series = {
                Phase: phase,
                Type: type,
                Characteristic: characteristic,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(),
                Profile: false,
                ProfileColor: GetColor(label)
            };
            _this.JSON.Series.push(series);
            return new Histogram(_this);
        };
        _this.AddSeriesSapphire = function (dataSourceID, phase, measurement, harmonic) {
            var label = phase + " " + measurement + (measurement.indexOf('HRMS') >= 0 ? ' HG: ' + harmonic.toString() : '');
            var series = {
                Phase: phase,
                Measurement: measurement,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(),
                Profile: false,
                ProfileColor: GetColor(label),
                Harmonic: harmonic
            };
            _this.JSON.Series.push(series);
            return new Histogram(_this);
        };
        _this.AddSeriesOH = function (dataSourceID, phase, type) {
            var label = type + " " + phase;
            var series = {
                Phase: phase,
                Type: type,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(),
                Profile: false,
                ProfileColor: GetColor(label)
            };
            _this.JSON.Series.push(series);
            return new Histogram(_this);
        };
        _this.RemoveSeries = function (index) {
            _this.JSON.Series.splice(index, 1);
            return new Histogram(_this);
        };
        _this.UpdateSeries = function (index, field, value) {
            _this.JSON.Series[index][field] = value;
            return new Histogram(_this);
        };
        _this.CalculateAxisRange = function () {
            var ds = _this.Data.find(function (ds) { return ds.DataSource.ID === _this.JSON.Series[0].DataSourceID; });
            if (ds.DataSource.Type === 'TrenDAPDB') {
                var dd_1 = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd_1.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Characteristic === series.Characteristic && d.Type === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
                _this.JSON.Max = _this.JSON.Max + buffer;
                _this.JSON.Min = _this.JSON.Min - buffer;
            }
            else if (ds.DataSource.Type === 'OpenHistorian') {
                var dd_2 = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd_2.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.SignalType === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
                _this.JSON.Max = _this.JSON.Max + buffer;
                _this.JSON.Min = _this.JSON.Min - buffer;
            }
            else if (ds.DataSource.Type === 'Sapphire') {
                var dd_3 = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd_3.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Characteristic === series.Measurement && d.Harmonic == series.Harmonic; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
                _this.JSON.Max = _this.JSON.Max + buffer;
                _this.JSON.Min = _this.JSON.Min - buffer;
            }
            else { }
            return new Histogram(_this);
        };
        _this.Type = "Histogram";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Units: '', Series: [], BinCount: 10 };
        return _this;
    }
    return Histogram;
}(Widget));

var Trend = /** @class */ (function (_super) {
    __extends(Trend, _super);
    function Trend(props) {
        var _this = _super.call(this, props) || this;
        _this.AddAxis = function () { return _this.JSON.YAxis.push({ Max: 10, Min: 0, Position: 'left', Units: '' }); };
        _this.RemoveAxis = function (index) {
            if (_this.JSON.YAxis.length == 1)
                return;
            _this.JSON.YAxis.splice(index, 1);
            _this.JSON.Series.forEach(function (series) {
                if (series.Axis >= index)
                    series.Axis = (index > 0 ? series.Axis - 1 : 0);
            });
        };
        _this.UpdateAxis = function (index, field, value) { _this.JSON.YAxis[index][field] = value; };
        _this.CalculateAxisRange = function (type, index) {
            if (_this.JSON.Series.length == 0)
                return;
            var ds = _this.Data.find(function (ds) { return ds.DataSource.ID === _this.JSON.Series[0].DataSourceID; });
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            if (type === 'x')
                _this.CalculateXAxis(ds, dd);
            else {
                if (index == undefined) {
                    for (var index_1 = 0; index_1 < _this.JSON.YAxis.length; index_1++) {
                        _this.CalculateYAxis(ds, dd, index_1);
                    }
                }
                else {
                    _this.CalculateYAxis(ds, dd, index);
                }
            }
            return new Trend(_this);
        };
        _this.AddSeriesXDA = function (dataSourceID, phase, type, characteristic) {
            var _a;
            var label = '';
            if (characteristic === 'Frequency')
                label = 'Frequency';
            else if (type === 'Voltage' && characteristic === 'RMS')
                label = "V" + phase;
            else if (type === 'Voltage')
                label = "V" + phase + " " + characteristic;
            else if (type === 'Current' && characteristic === 'RMS')
                label = "I" + phase;
            else if (type === 'Current')
                label = "I" + phase + " " + characteristic;
            else
                label = type + " " + phase + " " + characteristic;
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            var channel = dd.find(function (d) { return d.Characteristic === characteristic && d.Type === type && d.Phase === phase; });
            var unit = (_a = channel === null || channel === void 0 ? void 0 : channel.Unit) !== null && _a !== void 0 ? _a : '';
            var axisIndex = _this.JSON.YAxis.findIndex(function (a) { return a.Units === unit; });
            if (axisIndex === -1) {
                axisIndex = _this.JSON.YAxis.push({ Units: unit, Min: 0, Max: 100, Position: 'left' }) - 1;
            }
            var series = {
                Phase: phase,
                Type: type,
                Characteristic: characteristic,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(label),
                Axis: axisIndex,
                ShowEvents: false
            };
            _this.JSON.Series.push(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.AddSeriesSapphire = function (dataSourceID, phase, measurement, harmonic) {
            var _a;
            var label = phase + " " + measurement + (measurement.indexOf('HRMS') >= 0 ? ' HG: ' + harmonic.toString() : '');
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            var channel = dd.find(function (d) { return d.Characteristic === measurement && d.Phase === phase; });
            var unit = (_a = channel === null || channel === void 0 ? void 0 : channel.Unit) !== null && _a !== void 0 ? _a : '';
            var axisIndex = _this.JSON.YAxis.findIndex(function (a) { return a.Units === unit; });
            if (axisIndex === -1) {
                axisIndex = _this.JSON.YAxis.push({ Units: unit, Min: 0, Max: 100, Position: 'left' }) - 1;
            }
            var series = {
                Phase: phase,
                Measurement: measurement,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(label),
                Axis: axisIndex,
                ShowEvents: false,
                Harmonic: harmonic
            };
            _this.JSON.Series.push(series);
            return new Trend(_this);
        };
        _this.AddSeriesOH = function (dataSourceID, phase, type) {
            var label = type + " " + phase;
            var series = {
                Phase: phase,
                Type: type,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(label),
                Axis: 0
            };
            _this.JSON.Series.push(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddVoltageRMS = function (dataSourceID) {
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'Volts'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'Volts', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            var series = [{
                    Phase: 'AN',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VAN RMS'),
                    Axis: 0,
                    Label: 'VAN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'BN',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VBN RMS'),
                    Axis: 0,
                    Label: 'VBN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'CN',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VCN RMS'),
                    Axis: 0,
                    Label: 'VCN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'AB',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VAB RMS'),
                    Axis: 0,
                    Label: 'VAB RMS',
                    ShowEvents: false
                }, {
                    Phase: 'BC',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VBC RMS'),
                    Axis: 0,
                    Label: 'VBC RMS',
                    ShowEvents: false
                }, {
                    Phase: 'CA',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VCA RMS'),
                    Axis: 0,
                    Label: 'VCA RMS',
                    ShowEvents: false
                }];
            _this.JSON.Series.concat(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddCurrentRMS = function (dataSourceID) {
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'Amps'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'Amps', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            var series = [{
                    Phase: 'AN',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('IAN RMS'),
                    Axis: 0,
                    Label: 'IAN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'BN',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('IBN RMS'),
                    Axis: 0,
                    Label: 'IBN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'CN',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('ICN RMS'),
                    Axis: 0,
                    Label: 'ICN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'NG',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('ING RMS'),
                    Axis: 0,
                    Label: 'ING RMS',
                    ShowEvents: false
                }];
            _this.JSON.Series.concat(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.RemoveSeries = function (index) { return _this.JSON.Series.splice(index, 1); };
        _this.RemoveAll = function (dataSourceID) {
            _this.JSON.Series = [];
            return new Trend(_this);
        };
        _this.UpdateSeries = function (index, field, value) { _this.JSON.Series[index][field] = value; };
        _this.Pan = function (value) {
            _this.JSON.Max = _this.JSON.Max + value;
            _this.JSON.Min = _this.JSON.Min + value;
            return new Trend(_this);
        };
        _this.Type = "Trend";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Legend: false, Split: false, SplitType: 'Axis', YAxis: [{ Max: 10, Min: 0, Position: 'left', Units: '' }], Series: [] };
        return _this;
    }
    Trend.prototype.CalculateXAxis = function (ds, dd) {
        var _this = this;
        var _a, _b, _c;
        var ss;
        if (ds.DataSource.Type === 'TrenDAPDB') {
            var phases_1 = this.JSON.Series.map(function (s) { return s.Phase; });
            var types_1 = this.JSON.Series.map(function (s) { return s.Type; });
            var characteristics_1 = this.JSON.Series.map(function (s) { return s.Characteristic; });
            var series = dd.find(function (d) { return d[_this.By] === _this.Device && phases_1.indexOf(d.Phase) >= 0 && characteristics_1.indexOf(d.Characteristic) >= 0 && types_1.indexOf(d.Type) >= 0; });
            ss = ((_a = series === null || series === void 0 ? void 0 : series.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return new Date(d.Timestamp).getTime(); });
        }
        else if (ds.DataSource.Type === 'OpenHistorian') {
            var phases_2 = this.JSON.Series.map(function (s) { return s.Phase; });
            var types_2 = this.JSON.Series.map(function (s) { return s.Type; });
            var series = dd.find(function (d) { return d[_this.By] === _this.Device && phases_2.indexOf(d.Phase) >= 0 && types_2.indexOf(d.SignalType) >= 0; });
            ss = ((_b = series === null || series === void 0 ? void 0 : series.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return new Date(d.Timestamp).getTime(); });
        }
        else if (ds.DataSource.Type === 'Sapphire') {
            var phases_3 = this.JSON.Series.map(function (s) { return s.Phase; });
            var types_3 = this.JSON.Series.map(function (s) { return s.Measurement; });
            var harmonics_1 = this.JSON.Series.map(function (s) { return s.Harmonic; });
            var series = dd.find(function (d) { return d[_this.By] === _this.Device && phases_3.indexOf(d.Phase) >= 0 && types_3.indexOf(d.Characteristic) >= 0 && harmonics_1.indexOf(d.Harmonic) >= 0; });
            ss = ((_c = series === null || series === void 0 ? void 0 : series.Data) !== null && _c !== void 0 ? _c : []).map(function (d) { return new Date(d.Timestamp).getTime(); });
        }
        else
            ss = [];
        var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
        this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
        this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
    };
    Trend.prototype.CalculateYAxis = function (ds, dd, index) {
        var _this = this;
        var axes = this.JSON.Series.filter(function (series) { return series.Axis === index; });
        var ss = axes.map(function (a) {
            var _a, _b, _c;
            if (ds.DataSource.Type === 'TrenDAPDB') {
                var axis_1 = a;
                var series = dd.find(function (d) { return d[_this.By] === _this.Device && axis_1.Phase === d.Phase && axis_1.Characteristic === d.Characteristic && axis_1.Type === d.Type; });
                return ((_a = series === null || series === void 0 ? void 0 : series.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return d[axis_1.Field]; });
            }
            else if (ds.DataSource.Type === 'OpenHistorian') {
                var axis_2 = a;
                var series = dd.find(function (d) { return d[_this.By] === _this.Device && axis_2.Phase === d.Phase && axis_2.Type === d.SignalType; });
                return ((_b = series === null || series === void 0 ? void 0 : series.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[axis_2.Field]; });
            }
            else if (ds.DataSource.Type === 'Sapphire') {
                var axis_3 = a;
                var series = dd.find(function (d) { return d[_this.By] === _this.Device && axis_3.Phase === d.Phase && axis_3.Measurement === d.Characteristic && d.Harmonic === axis_3.Harmonic; });
                return ((_c = series === null || series === void 0 ? void 0 : series.Data) !== null && _c !== void 0 ? _c : []).map(function (d) { return d[axis_3.Field]; });
            }
            else
                ss = [];
        });
        var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
        this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
        this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
    };
    return Trend;
}(Widget));

var Stats = /** @class */ (function (_super) {
    __extends(Stats, _super);
    function Stats(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeriesXDA = function (dataSourceID, phase, type, characteristic) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Characteristic: characteristic, Field: 'Average' }; };
        _this.SetSeriesOH = function (dataSourceID, phase, type) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Field: 'Average' }; };
        _this.SetSeriesSapphire = function (dataSourceID, phase, measurement, harmonic) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Measurement: measurement, Field: 'Average', Harmonic: harmonic }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        _this.Stats = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            var series = _this.JSON.Series;
            if (series == null)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            var dataSourceData = _this.Data.find(function (ds) { return ds.DataSource.ID === series.DataSourceID; });
            //?.Data ?? [];
            var dataSeries;
            if ((dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.DataSource.Type) === 'TrenDAPDB') {
                var s_1 = series;
                dataSeries = (_c = (_b = ((_a = dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.Data) !== null && _a !== void 0 ? _a : []).find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Type === s_1.Type && s_1.Characteristic === d.Characteristic; })) === null || _b === void 0 ? void 0 : _b.Data) !== null && _c !== void 0 ? _c : [];
            }
            else if ((dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.DataSource.Type) === 'Sapphire') {
                var s_2 = series;
                dataSeries = (_f = (_e = ((_d = dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.Data) !== null && _d !== void 0 ? _d : []).find(function (d) { return d.Meter === _this.Device && d.Phase === s_2.Phase && s_2.Measurement === d.Characteristic && d.Harmonic === s_2.Harmonic; })) === null || _e === void 0 ? void 0 : _e.Data) !== null && _f !== void 0 ? _f : [];
            }
            else if ((dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.DataSource.Type) === 'OpenHistorian') {
                var s_3 = series;
                dataSeries = (_j = (_h = ((_g = dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.Data) !== null && _g !== void 0 ? _g : []).find(function (d) { return d[_this.By] === _this.Device && d.Phase === s_3.Phase && d.SignalType === s_3.Type; })) === null || _h === void 0 ? void 0 : _h.Data) !== null && _j !== void 0 ? _j : [];
            }
            else
                dataSeries = [];
            var data = dataSeries.map(function (d) { return d[series.Field]; });
            if (data.length == 0)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            return {
                Mean: stats_lite__WEBPACK_IMPORTED_MODULE_1__.mean(data).toFixed(_this.JSON.Precision),
                Median: stats_lite__WEBPACK_IMPORTED_MODULE_1__.median(data).toFixed(_this.JSON.Precision),
                //Mode: stats.mode(data)/*.toPrecision(this.JSON.Precision)*/,
                Variance: stats_lite__WEBPACK_IMPORTED_MODULE_1__.variance(data).toFixed(_this.JSON.Precision),
                StdDev: stats_lite__WEBPACK_IMPORTED_MODULE_1__.stdev(data).toFixed(_this.JSON.Precision),
                Percentile: {
                    10: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.10).toFixed(_this.JSON.Precision),
                    25: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.25).toFixed(_this.JSON.Precision),
                    50: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.50).toFixed(_this.JSON.Precision),
                    75: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.75).toFixed(_this.JSON.Precision),
                    90: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.90).toFixed(_this.JSON.Precision),
                }
            };
        };
        _this.Type = "Stats";
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Stats;
}(Widget));

var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeriesXDA = function (dataSourceID, phase, type, characteristic) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Characteristic: characteristic, Field: 'Average' }; };
        _this.SetSeriesOH = function (dataSourceID, phase, type) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Field: 'Average' }; };
        _this.SetSeriesSapphire = function (dataSourceID, phase, measurement, harmonic) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Measurement: measurement, Field: 'Average', Harmonic: harmonic }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Table(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Table(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Table;
}(Widget));

var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(props) {
        var _this = _super.call(this, props) || this;
        if (_this.JSON === undefined)
            _this.JSON = { Text: '' };
        return _this;
    }
    return Text;
}(Widget));

var XvsY = /** @class */ (function (_super) {
    __extends(XvsY, _super);
    function XvsY(props) {
        var _this = _super.call(this, props) || this;
        _this.CalculateRange = function (type) {
            var _a;
            var ds = _this.Data.find(function (ds) { return ds.DataSource.ID === _this.JSON.X.Series.DataSourceID; });
            var dd = (_a = ds === null || ds === void 0 ? void 0 : ds.Data) !== null && _a !== void 0 ? _a : [];
            var ss;
            if (type === 'time') {
                if (ds.DataSource.Type === 'TrenDAPDB') {
                    var s_4 = _this.JSON[type].Series;
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === s_4.Phase && d.Characteristic === s_4.Characteristic && d.Type === s_4.Type; }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                }
                else if (ds.DataSource.Type === 'Sapphire') {
                    var s_5 = _this.JSON[type].Series;
                    ss = dd.find(function (d) { return d.Meter === _this.Device && d.Phase === s_5.Phase && d.Characteristic === s_5.Measurement && d.Harmonic === s_5.Harmonic; }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                }
                else if (ds.DataSource.Type === 'OpenHistorian') {
                    var s_6 = _this.JSON[type].Series;
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === s_6.Phase && d.SignalType === s_6.Type; }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                }
                else
                    ss = [];
                _this.JSON.TimeMax = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.TimeMin = Math.min.apply(Math, __spreadArray([], __read(ss)));
            }
            else {
                if (ds.DataSource.Type === 'TrenDAPDB') {
                    var s_7 = _this.JSON[type].Series;
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === s_7.Phase && d.Characteristic === s_7.Characteristic && d.Type === s_7.Type; }).Data.map(function (d) { return d[s_7.Field]; });
                }
                else if (ds.DataSource.Type === 'Sapphire') {
                    var s_8 = _this.JSON[type].Series;
                    ss = dd.find(function (d) { return d.Meter === _this.Device && d.Phase === ss.Phase && d.Characteristic === s_8.Measurement && d.Harmonic === s_8.Harmonic; }).Data.map(function (d) { return d[s_8.Field]; });
                }
                else if (ds.DataSource.Type === 'OpenHistorian') {
                    var s_9 = _this.JSON[type].Series;
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === s_9.Phase && d.SignalType === s_9.Type; }).Data.map(function (d) { return d[s_9.Field]; });
                }
                else
                    ss = [];
                _this.JSON[type].Max = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON[type].Min = Math.min.apply(Math, __spreadArray([], __read(ss)));
                var buffer = (_this.JSON[type].Max - _this.JSON[type].Min) * .10;
                _this.JSON[type].Max = _this.JSON[type].Max + buffer;
                _this.JSON[type].Min = _this.JSON[type].Min - buffer;
            }
            return new XvsY(_this);
        };
        _this.SetAxis = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X[field] = value;
            else
                _this.JSON.Y[field] = value;
            return new XvsY(_this);
        };
        _this.SetSeriesXDA = function (axis, dataSourceID, phase, type, characteristic) {
            _this.JSON[axis].Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Characteristic: characteristic, Field: 'Average' };
            return new XvsY(_this);
        };
        _this.SetSeriesOH = function (axis, dataSourceID, phase, type) {
            _this.JSON[axis].Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Field: 'Average' };
            return new XvsY(_this);
        };
        _this.SetSeriesSapphire = function (axis, dataSourceID, phase, measurement, harmonic) {
            _this.JSON[axis].Series = { DataSourceID: dataSourceID, Phase: phase, Measurement: measurement, Field: 'Average', Harmonic: harmonic };
            return new XvsY(_this);
        };
        _this.UpdateSeries = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X.Series[field] = value;
            else
                _this.JSON.Y.Series[field] = value;
            return new XvsY(_this);
        };
        _this.RemoveSeries = function (axis) {
            if (axis === 'x')
                _this.JSON.X.Series = null;
            else
                _this.JSON.Y.Series = null;
            return new XvsY(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = {
                Y: { Min: 0, Max: 100, Units: '', Series: null },
                X: { Min: 0, Max: 100, Units: '', Series: null },
                TimeMin: null, TimeMax: null, RegressionLine: false
            };
        if (_this.JSON.X == undefined)
            _this.JSON.X = { Min: 0, Max: 100, Units: '', Series: null };
        if (_this.JSON.Y == undefined)
            _this.JSON.Y = { Min: 0, Max: 100, Units: '', Series: null };
        return _this;
    }
    return XvsY;
}(Widget));

function CreateWidget(type, by, device, height, width) {
    if (type == 'Histogram')
        return new Histogram({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    //else if (type == 'Profile')
    //    return new Profile(height, width);
    else if (type == 'Stats')
        return new Stats({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    else if (type == 'Table')
        return new Table({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    else if (type == 'Text')
        return new Text({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    else if (type == 'Trend')
        return new Trend({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    if (type == 'XvsY')
        return new XvsY({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
}
function GetColor(label) {
    if (label == undefined)
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
    else if (label.indexOf('Voltage A') >= 0)
        return '#A30000';
    else if (label.indexOf('Voltage B') >= 0)
        return '#0029A3';
    else if (label.indexOf('Voltage C') >= 0)
        return '#007A29';
    else if (label.indexOf('Voltage N') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('Current A') >= 0)
        return '#FF0000';
    else if (label.indexOf('Current B') >= 0)
        return '#0066CC';
    else if (label.indexOf('Current C') >= 0)
        return '#33CC33';
    else if (label.indexOf('AN') >= 0)
        return '#FF0000';
    else if (label.indexOf('BN') >= 0)
        return '#0066CC';
    else if (label.indexOf('CN') >= 0)
        return '#33CC33';
    else if (label.indexOf('NG') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('RES') >= 0)
        return '#ffc107';
    else if (label.indexOf('Average') >= 0)
        return '#9A52A4';
    else if (label.indexOf('Total') >= 0)
        return '#9A52A4';
    else if (label.indexOf('S0') >= 0)
        return '#A30000';
    else if (label.indexOf('S2') >= 0)
        return '#007A29';
    else if (label.indexOf('S1') >= 0)
        return '#0029A3';
    else
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Profile.tsx":
/*!*********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Profile.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Profile)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  Widgit.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function Profile(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "Profile");
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Stats.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Stats.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StatsJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Stats.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};








function StatsJSX(props) {
    var _a;
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _b[0], setToggle = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(props)), 2), record = _c[0], setRecord = _c[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(props));
    }, [props.Data, props.Height, props.Device]);
    var stats = record.Stats();
    var dataSource = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
    var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
    var datum;
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
        var s_1 = record.JSON.Series;
        datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s_1.Type && dd.Phase === s_1.Phase; });
    }
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
        var s_2 = record.JSON.Series;
        datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s_2.Type && dd.Phase === s_2.Phase && dd.Characteristic === s_2.Characteristic; });
    }
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
        var s_3 = record.JSON.Series;
        datum = data.find(function (dd) { return dd.Meter === props.Device && dd.Phase === s_3.Phase && dd.Characteristic === s_3.Measurement && dd.Harmonic === s_3.Harmonic; });
    }
    else
        datum = { Data: [] };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { className: 'table' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("thead", null,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", null,
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Category"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Statistic"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", null, Object.keys(stats).map(function (key) {
                    if (key !== 'Percentile')
                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, key),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats[key]));
                    else
                        return Object.keys(stats.Percentile).map(function (pkey) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key + pkey },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null,
                                    pkey,
                                    "th Percentile"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats.Percentile[pkey]));
                        });
                })))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_a = datum) === null || _a === void 0 ? void 0 : _a.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__.default, { Index: i, Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'Sapphire' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = datum) === null || _b === void 0 ? void 0 : _b.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Index: i, Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_c = datum) === null || _c === void 0 ? void 0 : _c.Description),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Table.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Table.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TableJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/react-table */ "./node_modules/@gpa-gemstone/react-table/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_9__);
//******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};










function TableJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(props)), 2), record = _b[0], setRecord = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState('Timestamp'), 2), sortField = _c[0], setSortField = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(true), 2), ascending = _d[0], setAscending = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), data = _e[0], setData = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({}), 2), info = _f[0], setInfo = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(props));
    }, [props.Data, props.Device]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a;
        var dataSource = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
        var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
            var s_1 = record.JSON.Series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s_1.Type && dd.Phase === s_1.Phase; });
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
            var s_2 = record.JSON.Series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s_2.Type && dd.Phase === s_2.Phase && dd.Characteristic === s_2.Characteristic; });
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
            var s_3 = record.JSON.Series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Phase === s_3.Phase && dd.Characteristic === s_3.Measurement && s_3.Harmonic === dd.Harmonic; });
        }
        else
            datum = { Data: [] };
        if (datum == undefined)
            setInfo({});
        else
            setInfo(datum);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a;
        var ordered = lodash__WEBPACK_IMPORTED_MODULE_9___default().orderBy((_a = info === null || info === void 0 ? void 0 : info.Data) !== null && _a !== void 0 ? _a : [], [sortField], [ascending ? 'asc' : 'desc']);
        setData(ordered);
    }, [ascending, sortField, info]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__.default, { tableClass: 'table', cols: [
                    { key: 'Timestamp', field: 'Timestamp', label: 'Timestamp' },
                    { key: 'Minimum', field: 'Minimum', label: 'Min', content: function (item, key, style) { return item.Minimum.toFixed(record.JSON.Precision); } },
                    { key: 'Average', field: 'Average', label: 'Avg', content: function (item, key, style) { return item.Average.toFixed(record.JSON.Precision); } },
                    { key: 'Maximum', field: 'Maximum', label: 'Max', content: function (item, key, style) { return item.Maximum.toFixed(record.JSON.Precision); } },
                ], data: data, sortKey: sortField, onClick: function (data) { }, ascending: ascending, onSort: function (data) {
                    if (data.colField === sortField)
                        setAscending(!ascending);
                    else {
                        setSortField(data.colField);
                        setAscending(true);
                    }
                } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_8__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d, _e, _f;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = (_a = info) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'Sapphire' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_d = (_c = info) === null || _c === void 0 ? void 0 : _c.Name) !== null && _d !== void 0 ? _d : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_7__.default, { Index: i, Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_f = (_e = info) === null || _e === void 0 ? void 0 : _e.Description) !== null && _f !== void 0 ? _f : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Text.tsx":
/*!******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Text.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Text.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function TextJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(props)), 2), record = _b[0], setRecord = _b[1];
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { style: { position: 'relative', top: 30 } }, props.JSON.Text)),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.TextArea, { Record: record.JSON, Field: "Text", Rows: 10, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { JSON: __assign({}, r) }))); }, Valid: function (field) { return true; } })))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Axis.tsx":
/*!************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Axis.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Axis)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
//******************************************************************************************************
//  Axis.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function Axis(props) {
    var firstRender = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        firstRender.current = false;
    }, []);
    //const [bins, setBins] = React.useState<number>(props.Series?.BinCount ?? 10);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Units), 2), units = _a[0], setUnits = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Position), 2), position = _b[0], setPosition = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Min), 2), min = _c[0], setMin = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Max), 2), max = _d[0], setMax = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Units", units);
            props.Callback();
        }
    }, [units]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Position", position);
            props.Callback();
        }
    }, [position]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Max", max);
            props.Callback();
        }
    }, [max]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Min", min);
            props.Callback();
        }
    }, [min]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Position"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: position, onChange: function (evt) { return setPosition(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "left" }, "Left"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "right" }, "Right"))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Units', Record: props.Axis, Type: 'text', Setter: function (r) { return setUnits(r.Units); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Min', Label: 'Min', Record: props.Axis, Type: 'number', Setter: function (r) { return setMin(r.Min); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Max', Record: props.Axis, Type: 'number', Setter: function (r) { return setMax(r.Max); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2", style: { position: 'relative' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () {
                    props.Widget.CalculateAxisRange('y', props.Index);
                    props.Callback();
                } }, "Use Data")),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", style: { top: 30 }, onClick: function () {
                    props.Widget.RemoveAxis(props.Index);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/SeriesPicker.tsx":
/*!********************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/SeriesPicker.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesPicker)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Widget/Sapphire/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
//******************************************************************************************************
//  SeriesPicker.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};







function SeriesPicker(props) {
    var _a, _b;
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Axis), 2), axis = _c[0], setAxis = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Color), 2), color = _d[0], setColor = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Field), 2), type = _e[0], setType = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState((_b = (_a = props.Series) === null || _a === void 0 ? void 0 : _a.ShowEvents) !== null && _b !== void 0 ? _b : false), 2), showEvents = _f[0], setShowEvents = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Color", color);
        props.Callback();
    }, [color]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Field", type);
        props.Callback();
    }, [type]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "ShowEvents", showEvents);
        props.Callback();
    }, [showEvents]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Axis", axis);
        props.Widget.CalculateAxisRange('y');
        props.Widget.CalculateAxisRange('x');
        props.Callback();
    }, [axis]);
    function ShowAdditionInfo() {
        if (props.Type === 'TrenDAPDB')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__.default, { Index: props.Index, Data: props.Data });
        else if (props.Type === 'OpenHistorian')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__.default, { Data: props.Data });
        else if (props.Type === 'Sapphire')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Sapphire_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__.default, { Index: props.Index, Data: props.Data });
        return null;
    }
    function GetName() {
        if (props.Series == undefined)
            return '';
        var name;
        if (props.Type === 'OpenHistorian') {
            var d = props.Data;
            return d.PointTag;
        }
        else if (props.Type === 'TrenDAPDB') {
            var d = props.Data;
            return d.Name;
        }
        else if (props.Type === 'Sapphire') {
            var d = props.Data;
            return d.Name;
        }
        else
            name = '';
        return name;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, GetName()),
                ShowAdditionInfo()),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "YAxis"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: axis, onChange: function (evt) { return setAxis(parseInt(evt.target.value)); } }, props.Widget.JSON.YAxis.map(function (axis, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: index, key: index }, axis.Units); }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Color"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", onClick: function () {
                        props.Widget.RemoveSeries(props.Index);
                        props.Callback();
                    } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__.CrossMark))),
        (props.Type === 'TrenDAPDB' && props.Data.Events.length > 0 ?
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.CheckBox, { Record: props.Series, Field: 'ShowEvents', Label: 'Show Events', Setter: function (r) { return setShowEvents(!showEvents); } })))
            : null)));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Trend.tsx":
/*!*************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Trend.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TrendJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! bootstrap-switch-button-react */ "./node_modules/bootstrap-switch-button-react/lib/bootstrap-switch-button-react.js");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Axis */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Axis.tsx");
/* harmony import */ var _SeriesPicker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SeriesPicker */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/SeriesPicker.tsx");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
//******************************************************************************************************
//  Trend.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/13/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};












function TrendJSX(props) {
    var _a, _b, _c, _d;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _e[0], setToggle = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props)), 2), record = _f[0], setRecord = _f[1];
    var hover = react__WEBPACK_IMPORTED_MODULE_1__.useRef(-10);
    var svgs = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);
    var margin = react__WEBPACK_IMPORTED_MODULE_1__.useRef({ bottom: 50, left: 50, top: 40, right: 50 });
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('Pan'), 2), chartAction = _g[0], setChartAction = _g[1];
    var chartActionRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef('Pan');
    var setHover = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function (value) {
        HandleHoverUpdate(value);
    }, []);
    try {
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props));
        }, [props]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            chartActionRef.current = chartAction;
        }, [chartAction]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            Initialize(record);
        }, [record]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props));
        }, [props.Height, props.Data, props.Device]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            return function () { (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(ref.current).selectAll('svg').remove(); };
        }, []);
    }
    catch (ex) {
        console.log(ex);
    }
    function GetDataSeries(series) {
        var _a;
        var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
        var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
            var s_1 = series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s_1.Type && dd.Phase === s_1.Phase; });
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
            var s_2 = series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s_2.Type && dd.Phase === s_2.Phase && dd.Characteristic === s_2.Characteristic; });
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
            var s_3 = series;
            datum = data.find(function (dd) { return dd.Meter === props.Device && dd.Phase === s_3.Phase && dd.Characteristic === s_3.Measurement && dd.Harmonic == s_3.Harmonic; });
        }
        else
            datum = { Data: [] };
        return datum;
    }
    function GetDataSeriesForD3(series) {
        var _a, _b;
        return ((_b = (_a = GetDataSeries(series)) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return [new Date(d.Timestamp).getTime(), d[series.Field]]; });
    }
    function GetDataSeriesName(series) {
        var _a, _b, _c;
        var dataSeries = GetDataSeries(series);
        if (series == undefined)
            return '';
        var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
            var d = dataSeries;
            return (_a = d === null || d === void 0 ? void 0 : d.PointTag) !== null && _a !== void 0 ? _a : '';
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
            var d = dataSeries;
            return (_b = d === null || d === void 0 ? void 0 : d.Name) !== null && _b !== void 0 ? _b : '';
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
            var d = dataSeries;
            return (_c = d === null || d === void 0 ? void 0 : d.Name) !== null && _c !== void 0 ? _c : '';
        }
        else
            return '';
    }
    function Initialize(settings) {
        //d3.select(ref.current).selectAll('svg').remove()
        var svgCount = 1;
        if (settings.JSON.Split && settings.JSON.SplitType === 'Axis') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.YAxis.length;
        }
        else if (settings.JSON.Split && settings.JSON.SplitType === 'Series') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.Series.length;
        }
        else
            margin.current = {
                bottom: 50,
                left: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length * 50),
                top: 40,
                right: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length * 50)
            };
        if (settings.JSON.Legend)
            margin.current.right = margin.current.right + 200;
        var svgHeight = props.Height / svgCount;
        if (svgs.current.length !== svgCount) {
            svgs.current = [];
            (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(ref.current).selectAll('svg').remove();
            for (var i = 0; i < svgCount; i++) {
                var svg = (0,d3__WEBPACK_IMPORTED_MODULE_0__.select)(ref.current).append('svg');
                svg.attr('width', settings.Width).attr('height', svgHeight);
                svgs.current.push(svg);
            }
        }
        var x = GetXScale(settings);
        svgs.current.forEach(function (svg, i) {
            if (settings.JSON.Split && settings.JSON.SplitType === 'Axis')
                return InitializeSplitOnAxis(settings, svg, x, i);
            if (settings.JSON.Split && settings.JSON.SplitType === 'Series')
                return InitializeSplitOnSeries(settings, svg, x, i);
            else
                return InitializeNotSplit(settings, svg, x);
        });
    }
    function InitializeSplitOnSeries(settings, svg, x, i) {
        var svgHeight = parseInt(svg.attr('height'));
        var series = settings.JSON.Series[i];
        var axis = settings.JSON.YAxis[series.Axis];
        var field = series.Field;
        AddXAxis(svg, x);
        var y = GetYScale(settings, svgHeight, series.Axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        var lineFunc = (0,d3__WEBPACK_IMPORTED_MODULE_0__.line)().x(function (dd) { return x(dd[0]); }).y(function (dd) { return y(dd[1]); });
        var data = GetDataSeriesForD3(series);
        svg.selectAll("g.line").remove();
        svg.selectAll('g.line')
            .data([data])
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", series.Color)
            .attr("d", function (d) {
            return lineFunc(data);
        });
        if (series.ShowEvents) {
            AddEventLine(series, svg, x);
        }
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, [series]);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeSplitOnAxis(settings, svg, x, i) {
        var svgHeight = parseInt(svg.attr('height'));
        var axis = settings.JSON.YAxis[i];
        var series = settings.JSON.Series.filter(function (s) { return s.Axis === i; }).map(function (s) {
            var _a, _b;
            var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (s === null || s === void 0 ? void 0 : s.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum = GetDataSeries(s);
            return __assign(__assign({}, s), { Data: ((_b = datum === null || datum === void 0 ? void 0 : datum.Data) !== null && _b !== void 0 ? _b : []).filter(function (ds) { return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[s.Field] >= axis.Min && ds[s.Field] <= axis.Max; }).map(function (point) { return [point.Timestamp, point[s.Field]]; }) });
        });
        AddXAxis(svg, x);
        var y = GetYScale(settings, svgHeight, i);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(series)
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (s) { return s.Color; })
            .attr("d", function (s) {
            var lineFunc = (0,d3__WEBPACK_IMPORTED_MODULE_0__.line)().x(function (dd) { return x(dd[0]); }).y(function (dd) { return y(dd[1]); });
            var data = GetDataSeriesForD3(s);
            return lineFunc(data);
        });
        series.forEach(function (s) { return AddEventLine(s, svg, x); });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, series);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeNotSplit(settings, svg, x) {
        AddXAxis(svg, x);
        var y = settings.JSON.YAxis.map(function (axis, index) { return GetYScale(settings, settings.Height, index); });
        svg.selectAll('g.yaxis').remove();
        var yAxis = settings.JSON.YAxis.map(function (axis, index) {
            var a;
            if (axis.Position === 'left') {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisLeft(axis, svg, y[index], false, ind);
            }
            else {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisRight(axis, svg, y[index], ind);
            }
            return a;
        });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, settings.JSON.Series);
        }
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(settings.JSON.Series)
            .enter()
            .append("g")
            .classed("line", true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (d) { return d.Color; })
            .attr("d", function (d) {
            var yScale = y[d.Axis];
            var lineFunc = (0,d3__WEBPACK_IMPORTED_MODULE_0__.line)().x(function (dd) { return x(dd[0]); }).y(function (dd) { return yScale(dd[1]); });
            var data = GetDataSeriesForD3(d);
            return lineFunc(data);
        });
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
        settings.JSON.Series.filter(function (series) { return series.ShowEvents; }).forEach(function (series) { return AddEventLine(series, svg, x); });
    }
    function AddLegend(svg, series) {
        var svgHeight = parseInt(svg.attr('height'));
        var svgWidth = parseInt(svg.attr('width'));
        var legend = svg.selectAll('g.legend')
            .data([series])
            .enter()
            .append('g')
            .attr('class', 'legend')
            .attr('transform', "translate(" + (svgWidth - 200) + "," + margin.current.top + ")");
        var legendRows = legend.selectAll('g.legendRow')
            .data(function (d) { return d; })
            .enter()
            .append('g')
            .attr('class', 'legendrow')
            .attr('transform', function (d, i) { return "translate(10," + i * 30 + ")"; });
        legendRows.append('rect').attr('height', 20).attr('width', 20).attr('fill', function (d) { return d.Color; });
        legendRows.append('text').attr('x', 30).attr('y', 15)
            .text(function (s) {
            var name = GetDataSeriesName(s);
            if (name.length > 15)
                return name.slice(0, 15) + '...';
            else
                return name;
        });
        legendRows.append('title').text(function (d) { return d.Label; });
    }
    function AddEventLine(series, svg, x) {
        var _a, _b, _c;
        var svgHeight = parseInt(svg.attr('height'));
        var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
        if (dataSource == undefined)
            return;
        var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
        var datum = GetDataSeries(series);
        var d = (_c = (_b = datum) === null || _b === void 0 ? void 0 : _b.Events) !== null && _c !== void 0 ? _c : [];
        svg.selectAll('g.event-line').remove();
        var g = svg.selectAll('g.event-line')
            .data(d)
            .enter()
            .append('g')
            .classed('event-line', true);
        g.append('path')
            .attr('stroke-width', '2px')
            .attr("d", function (d) { return "M0," + (svgHeight - margin.current.bottom - margin.current.top) + "L-10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + ",L10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + "L0," + (svgHeight - margin.current.bottom - margin.current.top) + "Z"; })
            .attr("transform", function (d) { return "translate(" + x(moment__WEBPACK_IMPORTED_MODULE_7___default()(d.StartTime, 'YYYY-MM-DDTHH:mm:ss.fff')) + "," + margin.current.top + ")"; })
            .attr('stroke', 'red')
            .attr('fill', 'red')
            .style('cursor', 'pointer')
            .on('click', function (e, d) {
            window.open(record.Data.find(function (ds) { return ds.DataSource.ID === series.DataSourceID; }).DataSource.OpenSEE + '?eventID=' + d.ID);
        });
    }
    function AddXAxis(svg, x) {
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        svg.selectAll('g.xaxis').remove();
        var xAxis = svg.append("g").classed('xaxis', true)
            .attr("transform", "translate(0," + (svgHeight - margin.current.bottom) + ")")
            .call((0,d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom)(x));
        svg.append("g").classed('xaxis', true).append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (svgWidth / 2) + "," + (svgHeight - margin.current.bottom / 3) + ")")
            .text("Time");
    }
    function AddYAxisLeft(axis, svg, y, rotate, index) {
        if (rotate === void 0) { rotate = true; }
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (margin.current.left - index * 50) + ",0)")
            .call((0,d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft)(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return (0,d3__WEBPACK_IMPORTED_MODULE_0__.format)("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        if (rotate)
            text.attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + ((margin.current.left - index * 50) / 3) + ")").style("text-anchor", "middle");
        else
            text.attr("transform", "translate(" + (margin.current.left - index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "end");
    }
    function AddYAxisRight(axis, svg, y, index) {
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + ",0)")
            .call((0,d3__WEBPACK_IMPORTED_MODULE_0__.axisRight)(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return (0,d3__WEBPACK_IMPORTED_MODULE_0__.format)("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        text.attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "start");
    }
    function GetXScale(settings) {
        var d = settings.JSON.Series.map(function (s) { return GetDataSeriesForD3(s); });
        var dd = [].concat.apply([], __spreadArray([], __read(d)));
        var ddx = dd.map(function (dp) { return new Date(dp.Timestamp).getTime(); });
        var xMax = Math.max.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[0]; }))));
        var xMin = Math.min.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[0]; }))));
        return (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleUtc)()
            .domain([xMin, xMax]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([margin.current.left, settings.Width - margin.current.right]);
    }
    function GetYScale(settings, svgHeight, axis) {
        var d = settings.JSON.Series.filter(function (s) { return s.Axis === axis; }).map(function (s) { return GetDataSeriesForD3(s); });
        var dd = [].concat.apply([], __spreadArray([], __read(d)));
        var yMax = Math.max.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[1]; }))));
        var yMin = Math.min.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[1]; }))));
        return (0,d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear)()
            .range([svgHeight - margin.current.bottom, margin.current.top])
            .domain([yMin, yMax]);
    }
    function HandleHoverUpdate(hover) {
        if (chartActionRef.current !== 'Click')
            return;
        svgs.current.forEach(function (svg, index) {
            var height = parseInt(svg.attr('height')) - margin.current.top - margin.current.bottom;
            if (hover >= margin.current.left && hover <= (props.Width - margin.current.right)) {
                svg.selectAll('g.mouse-over').remove();
                svg.append('g')
                    .classed('mouse-over', true)
                    .append('path')
                    .attr("d", function (d) { return "M 0 0 V " + height; })
                    .attr("transform", "translate(" + hover + "," + margin.current.top + ")")
                    .attr('stroke', 'gray');
            }
        });
    }
    function HandleReset() {
        setRecord(record.CalculateAxisRange('x'));
    }
    function HandleChartAction(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var width = parseInt(svg.attr('width'));
        evt.preventDefault();
        if (evt.offsetX < margin.current.left || evt.offsetX > width - margin.current.right)
            return;
        else if (evt.offsetY < margin.current.top || evt.offsetY > height - margin.current.bottom)
            return;
        else if (chartActionRef.current == 'Click')
            OnClick(evt, svg, scale);
        else if (chartActionRef.current == 'Pan')
            OnPan(evt, svg, scale);
        else if (chartActionRef.current == 'ZoomX')
            OnXZoom(evt, svg, scale);
    }
    function OnClick(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var tooltipHeight = record.JSON.Series.length * 15;
        if (evt.offsetX < margin.current.left && evt.offsetX > (props.Width - margin.current.right))
            return;
        svg.selectAll('g.mouse-over2').remove();
        svg.append('g')
            .classed('mouse-over2', true)
            .append('path')
            .attr("d", function (d) { return "M 0 0 V " + (height - margin.current.bottom - margin.current.top); })
            .attr("transform", "translate(" + evt.offsetX + "," + margin.current.top + ")")
            .attr('stroke', 'grey');
        svg.selectAll('g.charttooltip').remove();
        var tooltip = svg.append('g')
            .attr('class', 'charttooltip')
            .attr("transform", "translate(" + (evt.offsetX + 15) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
        var rect = tooltip.append('rect')
            .attr('fill', 'gainsboro')
            .attr('height', record.JSON.Series.length + 'em')
            .attr('width', 200)
            .attr('x', 0)
            .attr('y', 0);
        var text = tooltip.append('text')
            .attr('x', 0)
            .attr('y', 0);
        var width = 200;
        record.JSON.Series.forEach(function (series, index) {
            var _a;
            tooltip.append('rect').attr('x', 5).attr('y', index + "em").attr('height', '1em').attr('width', '1em').attr('fill', series.Color);
            var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var ds = GetDataSeries(series);
            var datum = (_a = ds === null || ds === void 0 ? void 0 : ds.Data) !== null && _a !== void 0 ? _a : [];
            var floor = Math.floor(datum.length * evt.offsetX / props.Width * .95);
            var ceil = Math.ceil(datum.length * evt.offsetX / props.Width * 1.05);
            var shortenedData = datum.slice(floor, ceil);
            var dist = shortenedData.map(function (d) { return ({ Value: d[series.Field], Distance: Math.abs(evt.offsetX - scale(moment__WEBPACK_IMPORTED_MODULE_7___default()(d.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ').toDate().getTime())) }); });
            dist.sort(function (a, b) {
                if (a.Distance > b.Distance)
                    return 1;
                else if (a.Distance == b.Distance)
                    return 0;
                else
                    return -1;
            });
            var formated = (0,d3__WEBPACK_IMPORTED_MODULE_0__.format)('.2f')(dist[0].Value);
            text.append('tspan').text(series.Label + ' - ' + formated).attr('x', '1.5em').attr('y', index + 1 + "em");
            width = text.node().getBBox().width + 25 > width ? text.node().getBBox().width + 25 : width;
        });
        rect.attr('width', width);
        if (width > props.Width - margin.current.right - evt.offsetX)
            tooltip.attr("transform", "translate(" + (evt.offsetX - 15 - width) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
    }
    function OnPan(evt, svg, scale) {
        var start = evt.clientX;
        svg.on('mousemove.pan', function (e) {
            record.UpdateJSON('Min', scale.invert(scale.range()[0] + start - e.clientX).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(scale.range()[1] + start - e.clientX).getTime())));
        });
        svg.on('mouseup.pan', function () { return svg.on('mousemove.pan', null); });
    }
    function OnXZoom(evt, svg, scale) {
        var start = evt.offsetX;
        var brush = (0,d3__WEBPACK_IMPORTED_MODULE_0__.brushX)()
            .extent([[margin.current.left, margin.current.top + 0.5], [props.Width - margin.current.right, parseInt(svg.attr('height')) - margin.current.bottom + 0.5]]);
        var br = svg.append('g').call(brush);
        br.call(brush.move, [start, start + 1]);
        svg.on('mousemove.brush', function (e) {
            br.call(brush.move, [start, e.offsetX]);
        });
        svg.on('mouseup.brush', function (e) {
            var min = Math.min(start, e.offsetX);
            var max = Math.max(start, e.offsetX);
            record.UpdateJSON('Min', scale.invert(min).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(max).getTime())));
            br.remove();
            svg.on('mousemove.brush', null);
            svg.on('mouseup.brush', null);
        });
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref, style: { userSelect: 'none' } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { style: { position: 'absolute', left: 10, zIndex: 1010 } }))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-1' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Split"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9___default()), { checked: (_b = (_a = record === null || record === void 0 ? void 0 : record.JSON) === null || _a === void 0 ? void 0 : _a.Split) !== null && _b !== void 0 ? _b : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Split', checked)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Select, { Label: 'Split On', Field: 'SplitType', Record: record === null || record === void 0 ? void 0 : record.JSON, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: r }))); }, Options: [{ Value: 'Axis', Label: 'Axis' }, { Value: 'Series', Label: 'Series' }] })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Legend"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9___default()), { checked: (_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Legend) !== null && _d !== void 0 ? _d : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Legend', checked)); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Axis"),
                " ",
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { style: { position: 'relative', float: 'right', top: -30 }, className: 'btn btn-link', onClick: function () {
                        record.AddAxis();
                        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record));
                    } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__.Plus),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group list-group-flush", style: { maxHeight: window.innerHeight - 625, overflowY: 'auto', overflowX: 'hidden', width: '100%' } }, record.JSON.YAxis.map(function (axis, index) { return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: index, className: 'list-group-item' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Axis__WEBPACK_IMPORTED_MODULE_10__.default, { Axis: axis, Index: index, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }))); }))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 250 } }, record.Data.map(function (d, i) {
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                (d.DataSource.Type === 'TrenDAPDB' ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddVoltageRMS(d.DataSource.ID)); } }, "Quick Add VRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddCurrentRMS(d.DataSource.ID)); } }, "Quick Add IRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.RemoveAll(d.DataSource.ID)); } }, "Remove All")) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" }, (record.JSON.Series).map(function (series, ind) {
                                    var _a;
                                    var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
                                    var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
                                    var datum = GetDataSeries(series);
                                    if (datum === undefined)
                                        return null;
                                    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_SeriesPicker__WEBPACK_IMPORTED_MODULE_11__.default, { Type: dataSource.DataSource.Type, Index: ind, Series: series, Data: datum, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } })));
                                })))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx":
/*!*************************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************


function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    var id = lodash__WEBPACK_IMPORTED_MODULE_1___default().uniqueId('dropdown-');
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: id, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": id },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Device: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Device),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Reference: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.SignalReference),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Type: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.SignalType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Engineering Units: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.EngineeringUnits),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phasor Type: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.PhasorType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Description: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Description))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/SeriesSelect.tsx":
/*!***********************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/SeriesSelect.tsx ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/application-typings */ "./node_modules/@gpa-gemstone/application-typings/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};


function SeriesSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(undefined), 2), dataSource = _a[0], setDataSource = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState({ ID: '0' }), 2), selected = _b[0], setSelected = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(''), 2), delimeter = _c[0], setDelimeter = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('VPHM'), 2), type = _d[0], setType = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('A'), 2), phase = _e[0], setPhase = _e[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } }, _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenHistorian.Lists.SignalTypes.map(function (a, i) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: i, value: a }, a); })),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: phase, onChange: function (evt) { return setPhase(evt.target.value); } }, _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenHistorian.Lists.Phases.map(function (a, i) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: i, value: a }, a); })),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-append" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                        if (props.Widget.Type === 'Histogram')
                            props.Widget.AddSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'Trend')
                            props.Widget.AddSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'Stats')
                            props.Widget.SetSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'Table')
                            props.Widget.SetSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'XvsY')
                            props.Widget.SetSeriesOH(props.Axis, props.DataSourceID, phase, type);
                        props.Callback();
                    } }, "Select")))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/AdditionalInfo.tsx":
/*!********************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/AdditionalInfo.tsx ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: "dropdownMenuButton" + props.Index, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Addition Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" + props.Index },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Meter: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Meter),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Asset: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.Asset),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Characteristic: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.Characteristic),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Type: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.Type),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Station: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Station),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Harmonic: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Harmonic))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/SeriesSelect.tsx":
/*!******************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/SeriesSelect.tsx ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TemplateSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Sapphire/SapphireSlice */ "./wwwroot/TypeScript/Features/Sapphire/SapphireSlice.ts");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  12/14/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function TemplateSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), measurement = _a[0], setMeasurement = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), phase = _b[0], setPhase = _b[1];
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useDispatch)();
    var measurements = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { return (0,_Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__.SelectSapphire)(state, props.DataSourceID, 'ChannelGroupType'); });
    var mtStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { return (0,_Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__.SelectSapphireStatus)(state, props.DataSourceID, 'ChannelGroupType'); });
    var phases = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { return (0,_Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__.SelectSapphire)(state, props.DataSourceID, 'Phase'); });
    var phStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { return (0,_Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__.SelectSapphireStatus)(state, props.DataSourceID, 'Phase'); });
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(0), 2), harmonic = _c[0], setHarmonic = _c[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (mtStatus != 'unitiated' && mtStatus != 'changed')
            return;
        dispatch((0,_Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__.FetchSapphire)({ dataSourceID: props.DataSourceID, table: 'ChannelGroupType' }));
        return function () {
        };
    }, [mtStatus]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (phStatus != 'unitiated' && phStatus != 'changed')
            return;
        dispatch((0,_Sapphire_SapphireSlice__WEBPACK_IMPORTED_MODULE_2__.FetchSapphire)({ dataSourceID: props.DataSourceID, table: 'Phase' }));
        return function () {
        };
    }, [phStatus]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: measurement, onChange: function (evt) { return setMeasurement(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            measurements.map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: mts.ID, value: mts.Description }, mts.DisplayName); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: phase, onChange: function (evt) { return setPhase(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            phases.map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: mts.ID, value: mts.Name }, mts.Name); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: 'form-control', value: harmonic, type: 'number', onChange: function (evt) { return setHarmonic(parseInt(evt.target.value)); }, placeholder: 'harmonic' }),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeriesSapphire(props.DataSourceID, phase, measurement, harmonic);
                    else if (props.Widget.Type === 'Trend')
                        props.Widget.AddSeriesSapphire(props.DataSourceID, phase, measurement, harmonic);
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeriesSapphire(props.DataSourceID, phase, measurement, harmonic);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeriesSapphire(props.DataSourceID, phase, measurement, harmonic);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeriesSapphire(props.Axis, props.DataSourceID, phase, measurement, harmonic);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx":
/*!***************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Widgit),
/* harmony export */   "SeriesSelect": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XDA/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/SeriesSelect.tsx");
/* harmony import */ var _OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OpenHistorian/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/SeriesSelect.tsx");
/* harmony import */ var _Sapphire_SeriesSelect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Sapphire/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Sapphire/SeriesSelect.tsx");
//******************************************************************************************************
//  Widget.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function Widgit(props) {
    return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: props.Toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog mw-100 w-75", role: "document" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content mx-auto" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" },
                        props.Label,
                        " Settings"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return props.SetToggle(false); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" }, props.children)),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                            props.Update(props.Record);
                            props.SetToggle(false);
                        } }, "Save changes"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-danger", onClick: function () {
                            props.Remove();
                            props.SetToggle(false);
                        } }, "Delete Widgit"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return props.SetToggle(false); } }, "Close"))))), document.getElementById("window"));
}
function SeriesSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _a[0], setDataSource = _a[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
            //setSelected((dataSource?.Data ?? [undefined])[0]);
        }
    }, [props.Widget.Data]);
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__.default, __assign({}, props));
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Sapphire_SeriesSelect__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Widget: props.Widget }));
    else
        return null;
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx":
/*!***************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: "dropdownMenuButton" + props.Index, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Addition Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" + props.Index },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Meter: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Meter),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Asset: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.Asset),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Characteristic: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.Characteristic),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Type: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.Type),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Station: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Station),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Harmonic: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Harmonic))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/SeriesSelect.tsx":
/*!*************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/SeriesSelect.tsx ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/application-typings */ "./node_modules/@gpa-gemstone/application-typings/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../OpenXDA/OpenXDASlice */ "./wwwroot/TypeScript/Features/OpenXDA/OpenXDASlice.ts");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};




function SeriesSelect(props) {
    var _a;
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(undefined), 2), dataSource = _b[0], setDataSource = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('AN'), 2), phase = _c[0], setPhase = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(_gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenXDA.Lists.Phases), 2), phases = _d[0], setPhases = _d[1];
    var channelGroupsTypes = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useSelector)(function (state) { return (0,_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_3__.SelectOpenXDA)(state, props.DataSourceID, 'ChannelGroupDetails'); });
    var cgtStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useSelector)(function (state) { return (0,_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_3__.SelectOpenXDAStatus)(state, props.DataSourceID, 'ChannelGroupDetails'); });
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(undefined), 2), channelGroupType = _e[0], setChannelGroupType = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState([]), 2), reducedChannelGroupTypes = _f[0], setReducedChannelGroupTypes = _f[1];
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        var _a, _b;
        if (cgtStatus === 'unitiated' || cgtStatus === 'changed')
            dispatch((0,_OpenXDA_OpenXDASlice__WEBPACK_IMPORTED_MODULE_3__.FetchOpenXDA)({ dataSourceID: props.DataSourceID, table: 'ChannelGroupDetails' }));
        else if (cgtStatus === 'idle') {
            if (((_b = (_a = props.Widget) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).length === 0)
                setReducedChannelGroupTypes(channelGroupsTypes);
            else {
                var channels_1 = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; }).Data;
                var reduced = channelGroupsTypes.filter(function (d) { return channels_1.find(function (c) { return c.Type === d.MeasurementType && c.Characteristic === d.MeasurementCharacteristic; }) != undefined; });
                setReducedChannelGroupTypes(reduced);
            }
        }
        return function () {
        };
    }, [dispatch, cgtStatus]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
            var ph = phases.filter(function (p) { return dataSource.Data.find(function (d) { return d.Phase === p; }); });
            setPhases(ph);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: (_a = channelGroupType === null || channelGroupType === void 0 ? void 0 : channelGroupType.DisplayName) !== null && _a !== void 0 ? _a : '', onChange: function (evt) { return setChannelGroupType(channelGroupsTypes.find(function (c) { return c.DisplayName === evt.target.value; })); } }, reducedChannelGroupTypes.map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: mts.DisplayName, value: mts.DisplayName }, mts.DisplayName); })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: phase, onChange: function (evt) { return setPhase(evt.target.value); } }, phases.sort(function (a, b) {
            if (a > b)
                return 1;
            else if (a == b)
                return 0;
            else
                -1;
        }).map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: mts, value: mts }, mts); })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeriesXDA(props.DataSourceID, phase, channelGroupType.MeasurementType, channelGroupType.MeasurementCharacteristic);
                    else if (props.Widget.Type === 'Trend')
                        props.Widget.AddSeriesXDA(props.DataSourceID, phase, channelGroupType.MeasurementType, channelGroupType.MeasurementCharacteristic);
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeriesXDA(props.DataSourceID, phase, channelGroupType.MeasurementType, channelGroupType.MeasurementCharacteristic);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeriesXDA(props.DataSourceID, phase, channelGroupType.MeasurementType, channelGroupType.MeasurementCharacteristic);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeriesXDA(props.Axis, props.DataSourceID, phase, channelGroupType.MeasurementType, channelGroupType.MeasurementCharacteristic);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/XvsY.tsx":
/*!******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/XvsY.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ XvsYJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var simple_statistics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! simple-statistics */ "./node_modules/simple-statistics/dist/simple-statistics.mjs");
//******************************************************************************************************
//  XvsY.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};










function XvsYJSX(props) {
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(props)), 2), record = _b[0], setRecord = _b[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(props));
    }, [props.Height, props.Data, props.Device]);
    function Zip(array1, field1, array2, field2, zipField) {
        var returnArray = [];
        if (array1.length > array2.length) {
            array1.forEach(function (xd, i) {
                var array2Point = array2.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array2Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array1: xd[field1], Array2: array2Point[field2]
                });
            });
        }
        else {
            array2.forEach(function (xd, i) {
                var array1Point = array1.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array1Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array2: xd[field1], Array1: array1Point[field2]
                });
            });
        }
        return returnArray;
    }
    function Initialize(settings) {
        var _a, _b, _c, _d, _e, _f;
        if (settings.JSON.X.Series == undefined || settings.JSON.Y.Series == undefined || ((_a = settings === null || settings === void 0 ? void 0 : settings.Data.length) !== null && _a !== void 0 ? _a : 0) == 0)
            return;
        var dataSource = settings.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID === ((_a = settings.JSON.X.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
        var data = (_b = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _b !== void 0 ? _b : [];
        var xSeries, ySeries;
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
            var x_1 = __assign({}, settings.JSON.X.Series);
            var y_1 = __assign({}, settings.JSON.Y.Series);
            xSeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === x_1.Type && dd.Phase === x_1.Phase; });
            ySeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === y_1.Type && dd.Phase === y_1.Phase; });
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
            var x_2 = __assign({}, settings.JSON.X.Series);
            var y_2 = __assign({}, settings.JSON.Y.Series);
            xSeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === x_2.Type && dd.Phase === x_2.Phase && dd.Characteristic === x_2.Characteristic; });
            ySeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === y_2.Type && dd.Phase === y_2.Phase && dd.Characteristic === y_2.Characteristic; });
        }
        else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'Sapphire') {
            var x_3 = __assign({}, settings.JSON.X.Series);
            var y_3 = __assign({}, settings.JSON.Y.Series);
            xSeries = data.find(function (dd) { return dd.Meter == props.Device && dd.Phase === x_3.Phase && dd.Characteristic === x_3.Measurement && dd.Harmonic === x_3.Harmonic; });
            ySeries = data.find(function (dd) { return dd.Meter === props.Device && dd.Phase === y_3.Phase && dd.Characteristic === y_3.Measurement && dd.Harmonic === y_3.Harmonic; });
        }
        else {
            xSeries = { Data: [] };
            ySeries = { Data: [] };
        }
        var xMax = 100, xMin = 0, yMax = 100, yMin = 0;
        if ((xSeries === null || xSeries === void 0 ? void 0 : xSeries.Data.length) > 0) {
            xMax = Math.max.apply(Math, __spreadArray([], __read(xSeries.Data.map(function (d) { return d[settings.JSON.X.Series.Field]; }))));
            xMin = Math.min.apply(Math, __spreadArray([], __read(xSeries.Data.map(function (d) { return d[settings.JSON.X.Series.Field]; }))));
        }
        if ((ySeries === null || ySeries === void 0 ? void 0 : ySeries.Data.length) > 0) {
            yMax = Math.max.apply(Math, __spreadArray([], __read(ySeries.Data.map(function (d) { return d[settings.JSON.Y.Series.Field]; }))));
            yMin = Math.min.apply(Math, __spreadArray([], __read(ySeries.Data.map(function (d) { return d[settings.JSON.Y.Series.Field]; }))));
        }
        var margin = { bottom: 50, left: 50, top: 40, right: 50 };
        var svgHeight = props.Height;
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([xMin, xMax]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.top - margin.bottom, 0])
            .domain([yMin, yMax]); // d3.hist has to be called before the Y axis obviously
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', svgHeight);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (svgHeight - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (svgHeight - margin.bottom / 3) + ")")
            .text(settings.JSON.X.Units);
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + (margin.left) + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + (margin.left / 3) + ")")
            .style("text-anchor", "middle")
            .text(settings.JSON.Y.Units);
        var xData = (_d = (_c = GetDatum('X')) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
        var yData = (_f = (_e = GetDatum('Y')) === null || _e === void 0 ? void 0 : _e.Data) !== null && _f !== void 0 ? _f : [];
        var combinedData = Zip(xData, record.JSON.X.Series.Field, yData, record.JSON.Y.Series.Field, 'Timestamp');
        //const combinedData = xData.map((xd, i) => ({ Timestamp: xd.Timestamp, X: xd[record.JSON.XSeries.Field], Y: yData[i][record.JSON.YSeries.Field] }))
        //const filteredData = combinedData.filter(d => moment(d.ZipField).toDate().getTime() >= record.JSON.TimeMin && moment(d.ZipField).toDate().getTime() <= record.JSON.TimeMax);
        svg.selectAll("dot")
            .data(combinedData)
            .enter().append("circle")
            .attr("r", 3.5)
            .attr("cx", function (d) { return x(d.Array1); })
            .attr("cy", function (d) { return y(d.Array2); })
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (record.JSON.RegressionLine) {
            var data_1 = combinedData.map(function (d) { return [d.Array1, d.Array2]; });
            var model = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_9__.linearRegression)(data_1);
            var lrLine_1 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_9__.linearRegressionLine)(model);
            var r2 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_9__.rSquared)(data_1, lrLine_1);
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (d) { return x(d[0]); }).y(function (d) { return y(lrLine_1(d[0])); });
            svg.append('text')
                .attr('stroke', 'red')
                .attr("transform", "translate(" + (props.Width - margin.left - margin.right) + "," + margin.top + ")")
                .text("R2 - " + r2.toFixed(3));
            svg.append("path")
                .data([data_1])
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", 'red')
                .attr("d", function (d) { return lineFunc_1(d); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    function GetDatum(axis) {
        var _a;
        if (record.JSON[axis].Series == undefined)
            return { Name: '' };
        var ds = record.Data.find(function (dd) { var _a, _b; return (_b = (dd === null || dd === void 0 ? void 0 : dd.DataSource.ID) === ((_a = record.JSON[axis].Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
        var data = (_a = ds === null || ds === void 0 ? void 0 : ds.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if ((ds === null || ds === void 0 ? void 0 : ds.DataSource.Type) === 'OpenHistorian') {
            var s_1 = record.JSON[axis].Series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s_1.Type && dd.Phase === s_1.Phase; });
        }
        else if ((ds === null || ds === void 0 ? void 0 : ds.DataSource.Type) === 'TrenDAPDB') {
            var s_2 = record.JSON[axis].Series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s_2.Type && dd.Phase === s_2.Phase && dd.Characteristic === s_2.Characteristic; });
        }
        else if ((ds === null || ds === void 0 ? void 0 : ds.DataSource.Type) === 'Sapphire') {
            var s_3 = record.JSON[axis].Series;
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Phase === s_3.Phase && dd.Characteristic === s_3.Measurement && dd.Harmonic === s_3.Harmonic; });
        }
        else
            datum = { Name: '' };
        return datum;
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.CheckBox, { Record: record.JSON, Field: 'RegressionLine', Label: 'Add Regression', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('RegressionLine', r.RegressionLine))); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Units', Label: 'X Axis Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Units', r.Units)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Units', Label: 'Y Axis Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Units', r.Units)); } })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'X', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.X.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_b = (_a = GetDatum('X')) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('X') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'x', Series: record.JSON.X.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'Y', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.Y.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_d = (_c = GetDatum('Y')) === null || _c === void 0 ? void 0 : _c.Name) !== null && _d !== void 0 ? _d : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('Y') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'y', Series: record.JSON.Y.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _a[0], setType = _a[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        props.Widget.UpdateSeries(props.Axis, "Field", type);
        props.Callback();
    }, [type]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-label" }, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () {
                    props.Widget.RemoveSeries(props.Axis);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Editor.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Regular/Editor.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Editor)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Row__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Row */ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Row.tsx");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../WorkSpacesSlice */ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpacesSlice.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
//******************************************************************************************************
//  Editor.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************





function Editor(props) {
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();
    var workSpaceJSON = JSON.parse(props.WorkSpace.JSONString);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["tab-content"] }, workSpaceJSON.Rows.map(function (row, index) {
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Row__WEBPACK_IMPORTED_MODULE_2__.default, { key: index, WorkSpace: props.WorkSpace, Data: props.Data, Widgets: row.Widgets, Height: row.Height, Update: function (record) {
                var json = __assign({}, workSpaceJSON);
                json.Rows[index].Height = record.Height;
                json.Rows[index].Widgets = record.Widgets;
                json.Rows[index].WorkSpace = undefined;
                json.Rows[index].Data = undefined;
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            }, RemoveRow: function () {
                var json = __assign({}, workSpaceJSON);
                json.Rows.splice(index, 1);
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            }, MoveUp: function () {
                if (index <= 0)
                    return;
                var newIndex = index - 1;
                var json = __assign({}, workSpaceJSON);
                var a = json.Rows[newIndex];
                var b = json.Rows[index];
                json.Rows[newIndex] = b;
                json.Rows[index] = a;
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            }, MoveDown: function () {
                var json = __assign({}, workSpaceJSON);
                if (index >= json.Rows.length)
                    return;
                var newIndex = index + 1;
                var a = json.Rows[newIndex];
                var b = json.Rows[index];
                json.Rows[newIndex] = b;
                json.Rows[index] = a;
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            } });
    })));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Row.tsx":
/*!****************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Regular/Row.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Row)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Widgets_Regular_Histogram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Widgets/Regular/Histogram */ "./wwwroot/TypeScript/Features/Widgets/Regular/Histogram.tsx");
/* harmony import */ var _Widgets_Regular_Profile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Widgets/Regular/Profile */ "./wwwroot/TypeScript/Features/Widgets/Regular/Profile.tsx");
/* harmony import */ var _Widgets_Regular_Stats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Widgets/Regular/Stats */ "./wwwroot/TypeScript/Features/Widgets/Regular/Stats.tsx");
/* harmony import */ var _Widgets_Regular_Table__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Widgets/Regular/Table */ "./wwwroot/TypeScript/Features/Widgets/Regular/Table.tsx");
/* harmony import */ var _Widgets_Regular_Text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Widgets/Regular/Text */ "./wwwroot/TypeScript/Features/Widgets/Regular/Text.tsx");
/* harmony import */ var _Widgets_Regular_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Widgets/Regular/Trend/Trend */ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Trend.tsx");
/* harmony import */ var _Widgets_Regular_XvsY__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Widgets/Regular/XvsY */ "./wwwroot/TypeScript/Features/Widgets/Regular/XvsY.tsx");
/* harmony import */ var _Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Widgets/Regular/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
//******************************************************************************************************
//  Row.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};











var NavMargin = 85;
var NavWidth = 200;
function Row(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Height), 2), height = _b[0], setHeight = _b[1];
    function HandleAddObject(type) {
        var row = __assign(__assign({}, props), { Update: undefined, WorkSpace: undefined, RemoveRow: undefined });
        row.Widgets.push((0,_Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_10__.CreateWidget)(type, 100, (window.innerWidth - NavWidth) / 2));
        props.Update(row);
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { height: props.Height, display: 'grid' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0, zIndex: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default.triangle },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["row-controls"] },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Add Object', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-plus" })),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Histogram'); } }, "Histogram"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Stats'); } }, "Stats"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Table'); } }, "Table"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Text'); } }, "Text"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Trend'); } }, "Trend"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('XvsY'); } }, "X vs Y"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Remove Row', onClick: function () { return props.RemoveRow(); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-minus" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Row Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'grid-container', style: { display: 'inline-flex' } }, props.Widgets.map(function (widget, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Widget, __assign({}, __assign(__assign({}, widget), { Height: props.Height, WorkSpace: props.WorkSpace, Data: props.Data, Update: function (newRecord) {
                    var row = __assign({}, props);
                    var widget = __assign({}, newRecord);
                    widget.WorkSpace = undefined;
                    widget.Data = undefined;
                    row.Widgets[index] = widget;
                    props.Update(row);
                }, Remove: function () {
                    var row = __assign({}, props);
                    row.Widgets.splice(index, 1);
                    props.Update(row);
                } }), { key: index })); }))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog", role: "document", style: { maxWidth: 525 } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" }, "Row Settings"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return setToggle(false); } },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Height"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: height != null ? height : 0, onChange: function (evt) { return setHeight(parseInt(evt.target.value)); } }),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setHeight(window.innerHeight - NavMargin); } }, "Full Height"))),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null,
                            "Widgets (Max Width : ",
                            window.innerWidth - 200,
                            " px, Width Used: ",
                            (props.Widgets.length == 0 ? 0 : props.Widgets.map(function (w) { return w.Width; }).reduce(function (a, b) { return a + b; })),
                            "px)"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: 'list-group' }, props.Widgets.map(function (widget, i) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { className: 'list-group-item', key: i },
                                widget.Label,
                                " -",
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'pull-right' },
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width:"),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { value: widget.Width, type: 'number', onChange: function (evt) {
                                            var row = __assign({}, props);
                                            row.Widgets[i].Width = parseInt(evt.target.value);
                                            props.Update(row);
                                        } }),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i <= 0, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i <= 0)
                                                return;
                                            var newIndex = i - 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.UpArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i >= props.Widgets.length - 1, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i >= row.Widgets.length - 1)
                                                return;
                                            var newIndex = i + 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.DownArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', onClick: function () {
                                            var row = __assign({}, props);
                                            row.Widgets.splice(i, 1);
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark)));
                        }))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveUp();
                                setToggle(false);
                            } }, "Move Row Up"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveDown();
                                setToggle(false);
                            } }, "Move Row Down"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.Update(__assign(__assign({}, props), { Height: height }));
                                setToggle(false);
                            } }, "Save changes"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return setToggle(false); } }, "Close")))))));
}
var Widget = function (props) {
    if (props.Type == 'Histogram')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Histogram__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else if (props.Type == 'Profile')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Profile__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props));
    else if (props.Type == 'Stats')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Stats__WEBPACK_IMPORTED_MODULE_5__.default, __assign({}, props));
    else if (props.Type == 'Table')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Table__WEBPACK_IMPORTED_MODULE_6__.default, __assign({}, props));
    else if (props.Type == 'Text')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Text__WEBPACK_IMPORTED_MODULE_7__.default, __assign({}, props));
    else if (props.Type == 'Trend')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__.default, __assign({}, props));
    else if (props.Type == 'XvsY')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_XvsY__WEBPACK_IMPORTED_MODULE_9__.default, __assign({}, props));
    else
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null, "Not a widget.");
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Editor.tsx":
/*!***********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Editor.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Editor)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Row__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Row */ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Row.tsx");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../WorkSpacesSlice */ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpacesSlice.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
//******************************************************************************************************
//  Editor.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************





function Editor(props) {
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();
    var workSpaceJSON = JSON.parse(props.WorkSpace.JSONString);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), options = _a[0], setOptions = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), selection = _b[0], setSelection = _b[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a, _b, _c;
        if (((_a = props.Data) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            var dataSet = (_c = (_b = props.Data.find(function (d) { return d.DataSource.Type === workSpaceJSON.Type; })) === null || _b === void 0 ? void 0 : _b.Data) !== null && _c !== void 0 ? _c : [];
            setOptions(__spreadArray([], __read(new Set(dataSet.map(function (ds) { return ds[workSpaceJSON.By]; })))).sort());
        }
    }, [props.Data.length]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["tab-content"] },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: 'pull-right form-control', value: selection, style: { width: 300 }, onChange: function (evt) { return setSelection(evt.target.value); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
                    options.map(function (option, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: option }, option); })),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: 'pull-right', style: { padding: 7 } },
                    workSpaceJSON.By,
                    ":"))),
        workSpaceJSON.Rows.map(function (row, index) {
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Row__WEBPACK_IMPORTED_MODULE_2__.default, { key: index, WorkSpace: props.WorkSpace, Data: props.Data, Widgets: row.Widgets, Height: row.Height, By: workSpaceJSON.By, Device: selection, Update: function (record) {
                    var json = __assign({}, workSpaceJSON);
                    json.Rows[index].Height = record.Height;
                    json.Rows[index].Widgets = record.Widgets;
                    json.Rows[index].WorkSpace = undefined;
                    json.Rows[index].Data = undefined;
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                }, RemoveRow: function () {
                    var json = __assign({}, workSpaceJSON);
                    json.Rows.splice(index, 1);
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                }, MoveUp: function () {
                    if (index <= 0)
                        return;
                    var newIndex = index - 1;
                    var json = __assign({}, workSpaceJSON);
                    var a = json.Rows[newIndex];
                    var b = json.Rows[index];
                    json.Rows[newIndex] = b;
                    json.Rows[index] = a;
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                }, MoveDown: function () {
                    var json = __assign({}, workSpaceJSON);
                    if (index >= json.Rows.length)
                        return;
                    var newIndex = index + 1;
                    var a = json.Rows[newIndex];
                    var b = json.Rows[index];
                    json.Rows[newIndex] = b;
                    json.Rows[index] = a;
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                } });
        })));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Row.tsx":
/*!********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Row.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Row)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Widgets_Templatable_Histogram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Widgets/Templatable/Histogram */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Histogram.tsx");
/* harmony import */ var _Widgets_Templatable_Profile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Widgets/Templatable/Profile */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Profile.tsx");
/* harmony import */ var _Widgets_Templatable_Stats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Widgets/Templatable/Stats */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Stats.tsx");
/* harmony import */ var _Widgets_Templatable_Table__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Widgets/Templatable/Table */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Table.tsx");
/* harmony import */ var _Widgets_Templatable_Text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Widgets/Templatable/Text */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Text.tsx");
/* harmony import */ var _Widgets_Templatable_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Widgets/Templatable/Trend/Trend */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Trend.tsx");
/* harmony import */ var _Widgets_Templatable_XvsY__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Widgets/Templatable/XvsY */ "./wwwroot/TypeScript/Features/Widgets/Templatable/XvsY.tsx");
/* harmony import */ var _Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Widgets/Templatable/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
//******************************************************************************************************
//  Row.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};











var NavMargin = 85;
var NavWidth = 200;
function Row(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Height), 2), height = _b[0], setHeight = _b[1];
    function HandleAddObject(type) {
        var row = __assign(__assign({}, props), { Update: undefined, WorkSpace: undefined, RemoveRow: undefined });
        row.Widgets.push((0,_Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_10__.CreateWidget)(type, props.By, props.Device, 100, (window.innerWidth - NavWidth) / 2));
        props.Update(row);
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { height: props.Height, display: 'grid' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0, zIndex: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default.triangle },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["row-controls"] },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Add Object', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-plus" })),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Histogram'); } }, "Histogram"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Stats'); } }, "Stats"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Table'); } }, "Table"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Text'); } }, "Text"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Trend'); } }, "Trend"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('XvsY'); } }, "X vs Y"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Remove Row', onClick: function () { return props.RemoveRow(); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-minus" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Row Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'grid-container', style: { display: 'inline-flex' } }, props.Widgets.map(function (widget, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Widget, __assign({}, __assign(__assign({}, widget), { Height: props.Height, WorkSpace: props.WorkSpace, Data: props.Data, By: props.By, Device: props.Device, Update: function (newRecord) {
                    var row = __assign({}, props);
                    var widget = __assign({}, newRecord);
                    widget.WorkSpace = undefined;
                    widget.Data = undefined;
                    row.Widgets[index] = widget;
                    props.Update(row);
                }, Remove: function () {
                    var row = __assign({}, props);
                    row.Widgets.splice(index, 1);
                    props.Update(row);
                } }), { key: index })); }))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog", role: "document", style: { maxWidth: 525 } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" }, "Row Settings"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return setToggle(false); } },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Height"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: height != null ? height : 0, onChange: function (evt) { return setHeight(parseInt(evt.target.value)); } }),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setHeight(window.innerHeight - NavMargin); } }, "Full Height"))),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null,
                            "Widgets (Max Width : ",
                            window.innerWidth - 200,
                            " px, Width Used: ",
                            (props.Widgets.length == 0 ? 0 : props.Widgets.map(function (w) { return w.Width; }).reduce(function (a, b) { return a + b; })),
                            "px)"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: 'list-group' }, props.Widgets.map(function (widget, i) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { className: 'list-group-item', key: i },
                                widget.Label,
                                " -",
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'pull-right' },
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width:"),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { value: widget.Width, type: 'number', onChange: function (evt) {
                                            var row = __assign({}, props);
                                            row.Widgets[i].Width = parseInt(evt.target.value);
                                            props.Update(row);
                                        } }),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i <= 0, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i <= 0)
                                                return;
                                            var newIndex = i - 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.UpArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i >= props.Widgets.length - 1, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i >= row.Widgets.length - 1)
                                                return;
                                            var newIndex = i + 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.DownArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', onClick: function () {
                                            var row = __assign({}, props);
                                            row.Widgets.splice(i, 1);
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark)));
                        }))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveUp();
                                setToggle(false);
                            } }, "Move Row Up"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveDown();
                                setToggle(false);
                            } }, "Move Row Down"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.Update(__assign(__assign({}, props), { Height: height }));
                                setToggle(false);
                            } }, "Save changes"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return setToggle(false); } }, "Close")))))));
}
var Widget = function (props) {
    if (props.Type == 'Histogram')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Histogram__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else if (props.Type == 'Profile')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Profile__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props));
    else if (props.Type == 'Stats')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Stats__WEBPACK_IMPORTED_MODULE_5__.default, __assign({}, props));
    else if (props.Type == 'Table')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Table__WEBPACK_IMPORTED_MODULE_6__.default, __assign({}, props));
    else if (props.Type == 'Text')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Text__WEBPACK_IMPORTED_MODULE_7__.default, __assign({}, props));
    else if (props.Type == 'Trend')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__.default, __assign({}, props));
    else if (props.Type == 'XvsY')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_XvsY__WEBPACK_IMPORTED_MODULE_9__.default, __assign({}, props));
    else
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null, "Not a widget.");
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpaceEditor.tsx":
/*!********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/WorkSpaceEditor.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/esm/react-router-dom.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WorkSpacesSlice */ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpacesSlice.ts");
/* harmony import */ var _DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DataSets/DataSetsSlice */ "./wwwroot/TypeScript/Features/DataSets/DataSetsSlice.ts");
/* harmony import */ var _DataSets_DataSetData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DataSets/DataSetData */ "./wwwroot/TypeScript/Features/DataSets/DataSetData.tsx");
/* harmony import */ var _Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../Widgets/Regular/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../Widgets/Templatable/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Regular_Editor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Regular/Editor */ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Editor.tsx");
/* harmony import */ var _Templatable_Editor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Templatable/Editor */ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Editor.tsx");
//******************************************************************************************************
//  WorkSpaceEditor.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/10/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};











var NavMargin = 85;
var NavWidth = 200;
var WorkSpaceEditor = function (props) {
    var _a;
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), data = _b[0], setData = _b[1];
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useDispatch)();
    var id = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_10__.useParams)().id;
    var workSpace = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { return (0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.SelectWorkSpaceByID)(state, parseInt(id)); });
    var dataSet = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { var _a; return (0,_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.SelectDataSetByID)(state, (_a = workSpace === null || workSpace === void 0 ? void 0 : workSpace.DataSetID) !== null && _a !== void 0 ? _a : 0); });
    var wsStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.SelectWorkSpacesStatus);
    var dsStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.SelectDataSetsStatus);
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ Rows: [], By: 'Meter' }), 2), workSpaceJSON = _c[0], setWorkSpaceJSON = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _d[0], setToggle = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (workSpace === undefined)
            return;
        var json = JSON.parse(workSpace.JSONString);
        setWorkSpaceJSON(json);
        (0,_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.GetDataSetDataFromIDB)(workSpace.DataSetID).then(function (d) {
            setData(d);
        });
    }, [workSpace]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (wsStatus == 'unitiated' || wsStatus == 'changed')
            dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.FetchWorkSpaces)());
        return function () {
        };
    }, [dispatch, wsStatus]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (dsStatus == 'unitiated' || dsStatus === 'changed')
            dispatch((0,_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.FetchDataSets)());
        return function () {
        };
    }, [dispatch, dsStatus]);
    function HandleAddObject(type) {
        if (type === 'Row') {
            dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(__assign(__assign({}, workSpaceJSON), { Rows: __spreadArray(__spreadArray([], __read(workSpaceJSON.Rows)), [{ Height: 500, Widgets: [] }]) })) })));
        }
        else {
            dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(__assign(__assign({}, workSpaceJSON), { Rows: __spreadArray(__spreadArray([], __read(workSpaceJSON.Rows)), [{
                            Height: window.innerHeight - NavMargin,
                            Widgets: [workSpace.Type === 'Regular' ? (0,_Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_6__.CreateWidget)(type, window.innerHeight - NavMargin, window.innerWidth - NavWidth) : (0,_Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_7__.CreateWidget)(type, workSpaceJSON.By, workSpaceJSON.Type, window.innerHeight - NavMargin, window.innerWidth - NavWidth)]
                        }]) })) })));
        }
    }
    if (workSpace == undefined)
        return null;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { height: 42 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default.navbarbuttons },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { style: { padding: '6px 12px', position: 'relative' } },
                    "Data Set: ",
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_11__.Link, { to: homePath + "EditDataSet/" + (dataSet === null || dataSet === void 0 ? void 0 : dataSet.ID) }, dataSet === null || dataSet === void 0 ? void 0 : dataSet.Name),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_DataSets_DataSetData__WEBPACK_IMPORTED_MODULE_5__.default, __assign({}, dataSet))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Add Object', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-plus" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function (e) { return HandleAddObject('Row'); } }, "Row"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-divider" }),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Histogram'); } }, "Histogram"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Stats'); } }, "Stats"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Table'); } }, "Table"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Text'); } }, "Text"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Trend'); } }, "Trend"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('XvsY'); } }, "X vs Y"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Export Current Data Set', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-download" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "dropdown-item", href: "#" }, "PDF"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "dropdown-item", href: "#" }, "CSV"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Save current workspace...', onClick: function (e) {
                        e.preventDefault();
                        dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(workSpaceJSON) })));
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-save" })),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Workspace Settings', onClick: function () { return setToggle(true); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { padding: '6px 12px' } },
                "Workspace: ", (_a = workSpace === null || workSpace === void 0 ? void 0 : workSpace.Name) !== null && _a !== void 0 ? _a : '')),
        workSpace.Type === 'Regular' ?
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Regular_Editor__WEBPACK_IMPORTED_MODULE_8__.default, { WorkSpace: workSpace, Data: data }) :
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Templatable_Editor__WEBPACK_IMPORTED_MODULE_9__.default, { WorkSpace: workSpace, Data: data }),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog", role: "document", style: { maxWidth: 525 } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" }, "Workspace Settings"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return setToggle(false); } },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" }, workSpace.Type === 'Templatable' ?
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Template Type"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: 'form-control', value: workSpaceJSON.Type, onChange: function (evt) { return setWorkSpaceJSON(__assign(__assign({}, workSpaceJSON), { Type: evt.target.value })); } },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }, " "),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'TrenDAPDB' }, "TrenDAPDB"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Sapphire' }, "Sapphire"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'OpenHistorian' }, "OpenHistorian")),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Template By"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: 'form-control', value: workSpaceJSON.By, onChange: function (evt) { return setWorkSpaceJSON(__assign(__assign({}, workSpaceJSON), { By: evt.target.value })); } },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }, " "),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Meter', hidden: workSpaceJSON.Type !== 'TrenDAPDB' }, "Meter"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Asset', hidden: workSpaceJSON.Type !== 'TrenDAPDB' }, "Asset"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Device', hidden: workSpaceJSON.Type !== 'OpenHistorian' }, "Device"))) : null),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(workSpaceJSON) })));
                                setToggle(false);
                            } }, "Save changes"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return setToggle(false); } }, "Close")))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WorkSpaceEditor);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvUmVndWxhci9IaXN0b2dyYW0udHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL0ltcGxlbWVudGF0aW9ucy50cyIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvUmVndWxhci9Qcm9maWxlLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvUmVndWxhci9TdGF0cy50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1JlZ3VsYXIvVGFibGUudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL1RleHQudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL1RyZW5kL0F4aXMudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL1RyZW5kL1Nlcmllc1BpY2tlci50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1JlZ3VsYXIvVHJlbmQvVHJlbmQudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvUmVndWxhci9XaWRnZXQvT3Blbkhpc3Rvcmlhbi9TZXJpZXNTZWxlY3QudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL1dpZGdldC9TYXBwaGlyZS9BZGRpdGlvbmFsSW5mby50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1JlZ3VsYXIvV2lkZ2V0L1NhcHBoaXJlL1Nlcmllc1NlbGVjdC50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1JlZ3VsYXIvV2lkZ2V0L1dpZGdldC50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1JlZ3VsYXIvV2lkZ2V0L1hEQS9BZGRpdGlvbmFsSW5mby50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1JlZ3VsYXIvV2lkZ2V0L1hEQS9TZXJpZXNTZWxlY3QudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9SZWd1bGFyL1h2c1kudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9IaXN0b2dyYW0udHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9JbXBsZW1lbnRhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1RlbXBsYXRhYmxlL1Byb2ZpbGUudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9TdGF0cy50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1RlbXBsYXRhYmxlL1RhYmxlLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvVGVtcGxhdGFibGUvVGV4dC50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1RlbXBsYXRhYmxlL1RyZW5kL0F4aXMudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9UcmVuZC9TZXJpZXNQaWNrZXIudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9UcmVuZC9UcmVuZC50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1RlbXBsYXRhYmxlL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvVGVtcGxhdGFibGUvV2lkZ2V0L09wZW5IaXN0b3JpYW4vU2VyaWVzU2VsZWN0LnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvVGVtcGxhdGFibGUvV2lkZ2V0L1NhcHBoaXJlL0FkZGl0aW9uYWxJbmZvLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvVGVtcGxhdGFibGUvV2lkZ2V0L1NhcHBoaXJlL1Nlcmllc1NlbGVjdC50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9XaWRnZXRzL1RlbXBsYXRhYmxlL1dpZGdldC9XaWRnZXQudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9XaWRnZXQvWERBL0FkZGl0aW9uYWxJbmZvLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dpZGdldHMvVGVtcGxhdGFibGUvV2lkZ2V0L1hEQS9TZXJpZXNTZWxlY3QudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV2lkZ2V0cy9UZW1wbGF0YWJsZS9YdnNZLnRzeCIsIndlYnBhY2s6Ly90cmVuZGFwLy4vd3d3cm9vdC9UeXBlU2NyaXB0L0ZlYXR1cmVzL1dvcmtTcGFjZXMvUmVndWxhci9FZGl0b3IudHN4Iiwid2VicGFjazovL3RyZW5kYXAvLi93d3dyb290L1R5cGVTY3JpcHQvRmVhdHVyZXMvV29ya1NwYWNlcy9SZWd1bGFyL1Jvdy50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9Xb3JrU3BhY2VzL1RlbXBsYXRhYmxlL0VkaXRvci50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9Xb3JrU3BhY2VzL1RlbXBsYXRhYmxlL1Jvdy50c3giLCJ3ZWJwYWNrOi8vdHJlbmRhcC8uL3d3d3Jvb3QvVHlwZVNjcmlwdC9GZWF0dXJlcy9Xb3JrU3BhY2VzL1dvcmtTcGFjZUVkaXRvci50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx3R0FBd0c7QUFDeEcsd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRixxRUFBcUU7QUFDckUsRUFBRTtBQUNGLHdHQUF3RztBQUN4Ryx3R0FBd0c7QUFDeEcsc0dBQXNH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SSxRQUFDLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUM7Z0JBQ3ZILEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxPQUFSLElBQUksMkJBQVEsRUFBRSxHQUFDLENBQUM7Z0JBQ2xDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxPQUFSLElBQUksMkJBQVEsRUFBRSxHQUFDLENBQUM7Z0JBQ2xDLElBQUksTUFBTSxHQUFHLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDdkQsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUM7Z0JBQzNDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO2FBRzlDO2lCQUNJLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxFQUFFLEdBQUcsaUJBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQUUsSUFBSSxTQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUExRSxDQUEwRSxDQUFDLDBDQUFFLElBQUksbUNBQUksRUFBRSxDQUFDO2dCQUN0SCxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQUMsSUFBSSxRQUFDLENBQUMsRUFB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LElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDL0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUMvQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQy9DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDL0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUNoRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ3BELElBQUksS0FBSyxD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LEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7U0FDbEgsSUFBSSxJQUFJLElBQUksT0FBTztRQUNwQixPQUFPLElBQUksS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDeEgsSUFBSSxJQUFJLElBQUksTUFBTTtRQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUM1SCxDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsS0FBYztJQUM1QixJQUFJLEtBQUssSUFBSSxTQUFTO1FBQUUsT0FBTywyRUFBVyxFQUFFLENBQUM7U0FDeEMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ3RELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDdEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUN0RCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQy9DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDL0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUMvQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQy9DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDaEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUNwRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO1NBQ2xELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsT0FBTyxTQUFTLENBQUM7U0FDL0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLFNBQVMsQ0FBQztTQUMvQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDOztRQUMvQyxPQUFPLDJFQUFXLEVBQUUsQ0FBQztBQUM5QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7OztB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QUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUEvQixDQUErQixDQUFDLEdBQUMsQ0FBQztZQUMzRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsT0FBUixJQUFJLDJCQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQUMsSUFBSSxRQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUEvQixDQUErQixDQUFDLEdBQUMsQ0FBQztTQUM5RTtRQUVELElBQUksUUFBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLElBQUksQ0FBQyxNQUFNLElBQUcsQ0FBQyxFQUFFO1lBQzFCLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxPQUFSLElBQUksMkJBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBQyxJQUFJLFFBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQS9CLENBQStCLENBQUMsR0FBQyxDQUFDO1lBQzNFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxPQUFSLElBQUksMkJBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBQyxJQUFJLFFBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQS9CLENBQStCLENBQUMsR0FBQyxDQUFDO1NBQzlFO1FBRUQsSUFBTSxNQUFNLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDNUQsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMvQixzQ0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxD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S0FBSyxFQUFDLEVBQUUsUUFBVztnQ0FDM0IsNkRBQVEsS0FBSyxFQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLElBQUksS0FBSyxXQUFXLFlBQWlCO2dDQUNqRiw2REFBUSxLQUFLLEVBQUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxhQUFhLENBQUMsSUFBSSxLQUFLLFdBQVcsWUFBZ0I7Z0NBQ2hGLDZEQUFRLEtBQUssRUFBQyxRQUFRLEVBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxJQUFJLEtBQUssZUFBZSxhQUFpQixDQUNqRixDQUNkLEVBQUMsQ0FBQyxJQUFJLENBRVA7b0JBQ04sMERBQUssU0FBUyxFQUFDLGNBQWM7d0JBQ3pCLDZEQUFRLElBQUksRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLGlCQUFpQixFQUFDLE9BQU8sRUFBRTtnQ0FDdkQsUUFBUSxDQUFDLGlFQUFlLHVCQUFNLFNBQVMsS0FBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsSUFBRyxDQUFDLENBQUM7Z0NBQ3ZGLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDckIsQ0FBQyxtQkFBdUI7d0JBQ3hCLDZEQUFRLElBQUksRUFBQyxRQUFRLEVBQUMsU0FBUyxFQUFDLG1CQUFtQixFQUFDLE9BQU8sRUFBRSxjQUFNLGdCQUFTLENBQUMsS0FBSyxDQUFDLEVBQWhCLENBQWdCLFlBQWdCLENBQ2pHLENBQ0osQ0FDSixDQUNKLENBQ1AsQ0FDTixDQUFDO0FBQ04sQ0FBQztBQUdELGlFQUFlLGVBQWUsRUFBQyIsImZpbGUiOiJXb3JrU3BhY2VFZGl0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgSGlzdG9ncmFtLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIwLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAxMS8xNi8yMDIwIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuXHJcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5pbXBvcnQgV2lkZ2V0LCB7IFNlcmllc1NlbGVjdCB9IGZyb20gJy4vV2lkZ2V0L1dpZGdldCc7XHJcbmltcG9ydCBBZGRpdGlvbmFsSW5mb1hEQSBmcm9tICcuL1dpZGdldC9YREEvQWRkaXRpb25hbEluZm8nO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9PcGVuSGlzdG9yaWFuIGZyb20gJy4vV2lkZ2V0L09wZW5IaXN0b3JpYW4vQWRkaXRpb25hbEluZm8nO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9TYXBwaGlyZSBmcm9tICcuL1dpZGdldC9TYXBwaGlyZS9BZGRpdGlvbmFsSW5mbyc7XHJcblxyXG5pbXBvcnQgeyBDcm9zc01hcmsgfSBmcm9tICdAZ3BhLWdlbXN0b25lL2dwYS1zeW1ib2xzJztcclxuaW1wb3J0IHsgSGlzdG9ncmFtIH0gZnJvbSAnLi9JbXBsZW1lbnRhdGlvbnMnO1xyXG5cclxuXHJcbmNvbnN0IFN2Z1N0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0ge1xyXG4gICAgZmlsbDogJ25vbmUnLFxyXG4gICAgc2hhcGVSZW5kZXJpbmc6ICdjcmlzcEVkZ2VzJyxcclxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcclxuICAgIFdlYmtpdFRvdWNoQ2FsbG91dDogJ25vbmUnLFxyXG4gICAgV2Via2l0VXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgS2h0bWxVc2VyU2VsZWN0OiAnbm9uZScsXHJcbiAgICBNb3pVc2VyU2VsZWN0OiAnbm9uZScsXHJcbiAgICBtc1VzZXJTZWxlY3Q6ICdub25lJ1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGlzdG9ncmFtSlNYKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pSGlzdG9ncmFtPikge1xyXG4gICAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3QgW3RvZ2dsZSwgc2V0VG9nZ2xlXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICAgIGNvbnN0IFtyZWNvcmQsIHNldFJlY29yZF0gPSBSZWFjdC51c2VTdGF0ZTxIaXN0b2dyYW0+KG5ldyBIaXN0b2dyYW0ocHJvcHMpKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgfSwgW3RvZ2dsZSwgcHJvcHMuSlNPTl0pO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgSW5pdGlhbGl6ZShyZWNvcmQpO1xyXG4gICAgfSwgW3JlY29yZF0pXHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBzZXRSZWNvcmQobmV3IEhpc3RvZ3JhbSh7IC4uLnJlY29yZCwgRGF0YTogcHJvcHMuRGF0YSB9KSk7XHJcbiAgICB9LCBbcHJvcHMuRGF0YV0pO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgc2V0UmVjb3JkKG5ldyBIaXN0b2dyYW0oeyAuLi5yZWNvcmQsIEhlaWdodDogcHJvcHMuSGVpZ2h0IH0pKVxyXG4gICAgfSwgW3Byb3BzLkhlaWdodF0pXHJcblxyXG4gICAgZnVuY3Rpb24gSW5pdGlhbGl6ZShzZXR0aW5nczogVHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaUhpc3RvZ3JhbT4pIHtcclxuICAgICAgICBjb25zdCBwcm9maWxlID0gc2V0dGluZ3MuSlNPTi5TZXJpZXMubWFwKHNlcmllcyA9PiBzZXJpZXMuUHJvZmlsZSkucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2IHx8IGN1cnIsIGZhbHNlKTtcclxuICAgICAgICBjb25zdCBtYXJnaW4gPSB7IGJvdHRvbTogNTAsIGxlZnQ6IDUwLCB0b3A6IDQwLCByaWdodDogKHByb2ZpbGUgPyA3MCA6IDIwKSB9O1xyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHJlY29yZC5IZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcclxuXHJcbiAgICAgICAgY29uc3QgZXh0ZW50ID0gZDMuZXh0ZW50KFtdLmNvbmNhdCguLi5zZXR0aW5ncy5KU09OLlNlcmllcy5tYXAoc2VyaWVzID0+ICgoc2V0dGluZ3MuRGF0YS5maW5kKGQgPT4gZC5EYXRhU291cmNlLklEID09PSBzZXJpZXMuRGF0YVNvdXJjZUlEKT8uRGF0YSA/P1tdKS5maW5kKGQ9PiBkLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRCk/LkRhdGE/PyBbXSkubWFwKGQgPT4gZFtzZXJpZXMuRmllbGRdIGFzIG51bWJlcikpKSk7XHJcbiAgICAgICAgLy8vLyBzZXQgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBoaXN0b2dyYW1cclxuICAgICAgICBsZXQgaGlzdG9ncmFtcyA9IChzZXR0aW5ncy5KU09OPy5TZXJpZXMgPz8gW10pLm1hcChzZXJpZXMgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZGF0YVNvdXJjZSA9IHNldHRpbmdzLkRhdGEuZmluZChkID0+IGQuRGF0YVNvdXJjZS5JRCA9PT0gc2VyaWVzLkRhdGFTb3VyY2VJRCk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGxldCBkYXR1bSA9IGRhdGFTb3VyY2UuZmluZChkID0+IGQuSUQudG9TdHJpbmcoKSA9PT0gc2VyaWVzLklEKT8uRGF0YS5tYXAoZCA9PiBkW3Nlcmllcy5GaWVsZF0pID8/IFtdO1xyXG4gICAgICAgICAgICBsZXQgaGlzdG9ncmFtID0gZDMuaGlzdG9ncmFtPG51bWJlciwgbnVtYmVyPigpXHJcbiAgICAgICAgICAgICAgICAudmFsdWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQ7IH0pICAgLy8gSSBuZWVkIHRvIGdpdmUgdGhlIHZlY3RvciBvZiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgLmRvbWFpbihleHRlbnQpICAvLyB0aGVuIHRoZSBkb21haW4gb2YgdGhlIGdyYXBoaWNcclxuICAgICAgICAgICAgICAgIC50aHJlc2hvbGRzKHNldHRpbmdzLkpTT04uQmluQ291bnQpOyAvLyB0aGVuIHRoZSBudW1iZXJzIG9mIGJpbnNcclxuXHJcbiAgICAgICAgICAgIC8vIEFuZCBhcHBseSB0aGlzIGZ1bmN0aW9uIHRvIGRhdGEgdG8gZ2V0IHRoZSBiaW5zXHJcbiAgICAgICAgICAgIHJldHVybiBoaXN0b2dyYW0oZGF0dW0pO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IHlNYXggPSBNYXRoLm1heCguLi5bXS5jb25jYXQoLi4uaGlzdG9ncmFtcykubWFwKGIgPT4gYi5sZW5ndGgpKTtcclxuICAgICAgIGQzLnNlbGVjdChyZWYuY3VycmVudCkuc2VsZWN0QWxsKCdzdmcnKS5yZW1vdmUoKVxyXG4gICAgICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHJlZi5jdXJyZW50KVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHNldHRpbmdzLldpZHRoKVxyXG4gICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBzZXR0aW5ncy5IZWlnaHQpXHJcblxyXG4gICAgICAgIGNvbnN0IHggPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oW3NldHRpbmdzLkpTT04uTWluLCBzZXR0aW5ncy5KU09OLk1heF0pICAgICAvLyBjYW4gdXNlIHRoaXMgaW5zdGVhZCBvZiAxMDAwIHRvIGhhdmUgdGhlIG1heCBvZiBkYXRhOiBkMy5tYXgoZGF0YSwgZnVuY3Rpb24oZCkgeyByZXR1cm4gK2QucHJpY2UgfSlcclxuICAgICAgICAgICAgLnJhbmdlKFswLCBzZXR0aW5ncy5XaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0XSk7XHJcblxyXG5cclxuICAgICAgICBjb25zdCB4QXhpcyA9IHN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIChzZXR0aW5ncy5IZWlnaHQgLSBtYXJnaW4uYm90dG9tKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpKVxyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzZXR0aW5ncy5XaWR0aCAvIDIpICsgXCIsXCIgKyAoc2V0dGluZ3MuSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbS8zKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAudGV4dChyZWNvcmQuSlNPTi5Vbml0cylcclxuXHJcbiAgICAgICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgLnJhbmdlKFtzZXR0aW5ncy5IZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSwgMF0pXHJcbiAgICAgICAgICAgIC5kb21haW4oWzAsIHlNYXhdKTsgICAvLyBkMy5oaXN0IGhhcyB0byBiZSBjYWxsZWQgYmVmb3JlIHRoZSBZIGF4aXMgb2J2aW91c2x5XHJcblxyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KSk7XHJcbiAgICAgICAgc3ZnLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKSB0cmFuc2xhdGUoLVwiICsgc2V0dGluZ3MuSGVpZ2h0LzIgKyBcIixcIiArIG1hcmdpbi5sZWZ0LzMgKyBcIilcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLnRleHQoXCJDb3VudHNcIilcclxuXHJcbiAgICAgICAgY29uc3QgYmluV2lkdGggPSBNYXRoLm1heCguLi5oaXN0b2dyYW1zLm1hcChoaXN0b2dyYW0gPT4gTWF0aC5tYXgoLi4uaGlzdG9ncmFtLm1hcChhID0+IHgoYS54MSkgLSB4KGEueDApKSkpKTtcclxuICAgICAgICAvL3N2Zy5zZWxlY3RBbGwoXCJnLmJpbnNcIikucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmJpbnNcIilcclxuICAgICAgICAgICAgLmRhdGEoc2V0dGluZ3MuSlNPTi5TZXJpZXMpXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnYmlucycpLmF0dHIoXCJmaWxsXCIsIChzZXJpZXMpID0+IHNlcmllcy5Db2xvcilcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkLCBpbmRleCkgPT4gYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0ICsgaW5kZXggKiBiaW5XaWR0aCAvIHNldHRpbmdzLkpTT04uU2VyaWVzLmxlbmd0aH0sJHttYXJnaW4udG9wfSlgKVxyXG4gICAgICAgICAgICAgICAgLy8uYXR0cihcIm9wYWNpdHlcIiwgMC4zKVxyXG4gICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAuZGF0YSgoc2VyaWVzLCBpbmRleCkgPT4gaGlzdG9ncmFtc1tpbmRleF0pXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQsaSxnKSA9PiBgdHJhbnNsYXRlKCR7eChkLngwKX0sJHt5KGQubGVuZ3RoKX0pYClcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gKHgoZC54MSkgLSB4KGQueDApID4gMiA/ICh4KGQueDEpIC0geChkLngwKSkgLyBzZXR0aW5ncy5KU09OLlNlcmllcy5sZW5ndGggOiAyKSAtIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IHN2Z0hlaWdodCAtIHkoZC5sZW5ndGgpKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICBpZiAocHJvZmlsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9maWxlcyA9IHJlY29yZC5KU09OLlNlcmllcy5maWx0ZXIoc2VyaWVzID0+IHNlcmllcy5Qcm9maWxlKS5tYXAoKHNlcmllcywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhU291cmNlID0gc2V0dGluZ3MuRGF0YS5maW5kKGQgPT4gZC5EYXRhU291cmNlLklEID09PSBzZXJpZXMuRGF0YVNvdXJjZUlEKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IGRhdGFTb3VyY2UuZmluZChkID0+IGQuSUQudG9TdHJpbmcoKSA9PT0gc2VyaWVzLklEKT8uRGF0YS5tYXAoZCA9PiBkW3Nlcmllcy5GaWVsZF0pID8/IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhpc3RvZ3JhbSA9IGQzLmhpc3RvZ3JhbTxudW1iZXIsIG51bWJlcj4oKVxyXG4gICAgICAgICAgICAgICAgICAgIC52YWx1ZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZDsgfSkgICAvLyBJIG5lZWQgdG8gZ2l2ZSB0aGUgdmVjdG9yIG9mIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihkMy5leHRlbnQoZGF0dW0pIGFzIFtudW1iZXIsIG51bWJlcl0pICAvLyB0aGVuIHRoZSBkb21haW4gb2YgdGhlIGdyYXBoaWNcclxuICAgICAgICAgICAgICAgICAgICAudGhyZXNob2xkcyhzZXR0aW5ncy5KU09OLkJpbkNvdW50KShkYXR1bSk7IC8vIHRoZW4gdGhlIG51bWJlcnMgb2YgYmluc1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB7IENvbG9yOiBzZXJpZXMuUHJvZmlsZUNvbG9yLCBQcm9maWxlOiBoaXN0b2dyYW0ubWFwKChzdW0gPT4gdmFsdWUgPT4gc3VtICs9IHZhbHVlLmxlbmd0aCkoMCkpLm1hcCgocHJvZiwgaSkgPT4gKHsgQmluOiBoaXN0b2dyYW1baV0ueDAsIFZhbHVlOiBwcm9mIH0pKX07XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy9jb25zdCBwcm9maWxlcyA9IGhpc3RvZ3JhbXMubWFwKGhpc3QgPT4gaGlzdC5tYXAoKHN1bSA9PiB2YWx1ZSA9PiBzdW0gKz0gdmFsdWUubGVuZ3RoKSgwKSkubWFwKChwcm9mLCBpKSA9PiAoeyBCaW46IGhpc3RbaV0ueDAsIFZhbHVlOiBwcm9mIH0pKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHB5TWF4ID0gTWF0aC5tYXgoLi4ucHJvZmlsZXMubWFwKHByID0+IHByLlByb2ZpbGUpLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldi5jb25jYXQoY3VyciksIFtdKS5tYXAocCA9PiBwLlZhbHVlKSlcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IHB5ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgICAgICAgLnJhbmdlKFtzZXR0aW5ncy5IZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSwgMF0pXHJcbiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCBweU1heF0pOyAgIC8vIGQzLmhpc3QgaGFzIHRvIGJlIGNhbGxlZCBiZWZvcmUgdGhlIFkgYXhpcyBvYnZpb3VzbHlcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHB5QXhpcyA9IHN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzZXR0aW5ncy5XaWR0aCAtIG1hcmdpbi5yaWdodCkgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcclxuICAgICAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNSaWdodChweSkpO1xyXG4gICAgICAgICAgICBzdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKSB0cmFuc2xhdGUoLVwiICsgc2V0dGluZ3MuSGVpZ2h0IC8gMiArIFwiLFwiICsgKHNldHRpbmdzLldpZHRoIC0gbWFyZ2luLnJpZ2h0LzMpICsgXCIpXCIpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoXCJQcm9maWxlXCIpXHJcblxyXG4gICAgICAgICAgICAvL2NvbnN0IGZpbHRlcmVkRGF0YSA9IHByb2ZpbGUuZmluZChkcyA9PiBkcy5JRCA9PT0gc2VyaWVzLklEKT8uRGF0YSA/PyBbXSkuZmlsdGVyKGRzID0+IG1vbWVudChkcy5UaW1lc3RhbXApLnRvRGF0ZSgpLmdldFRpbWUoKSA+PSBzZXR0aW5ncy5KU09OLk1pbiAmJiBtb21lbnQoZHMuVGltZXN0YW1wKS50b0RhdGUoKS5nZXRUaW1lKCkgPD0gc2V0dGluZ3MuSlNPTi5NYXggJiYgZHNbZmllbGRdID49IGF4aXMuTWluICYmIGRzW2ZpZWxkXSA8PSBheGlzLk1heClcclxuICAgICAgICAgICAgY29uc3QgbGluZUZ1bmMgPSBkMy5saW5lPHtCaW46IG51bWJlciwgVmFsdWU6IG51bWJlcn0+KCkueChkZCA9PiB4KGRkLkJpbikpLnkoZGQgPT4gcHkoZGQuVmFsdWUpKTtcclxuXHJcbiAgICAgICAgICAgIHN2Zy5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShwcm9maWxlcylcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIGQgPT4gZC5Db2xvcilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCAoZCkgPT4gbGluZUZ1bmMoZC5Qcm9maWxlKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgKVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCIgc3R5bGU9e3sgd2lkdGg6IHByb3BzLldpZHRoLCBoZWlnaHQ6IHByb3BzLkhlaWdodCB9fT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIiBzdHlsZT17eyBwYWRkaW5nOiAwIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcIndpZGdpdC1sYWJlbFwiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3Byb3BzLkxhYmVsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJidG4gXCIgKyBzdHlsZXNbXCJ3aWRnaXQtY29udHJvbHNcIl19IHRpdGxlPSdXaWRnZXQgU2V0dGluZ3MnIG9uQ2xpY2s9eygpID0+IHNldFRvZ2dsZSh0cnVlKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtY29nXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiByZWY9e3JlZn0+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPFdpZGdldCB7Li4ucHJvcHN9IFJlY29yZD17cmVjb3JkfSBUb2dnbGU9e3RvZ2dsZX0gU2V0VG9nZ2xlPXsoYm9vbCkgPT4gc2V0VG9nZ2xlKGJvb2wpIH0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC00XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaVdpZGdldD4gRmllbGQ9J0xhYmVsJyBSZWNvcmQ9e3JlY29yZH0gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBIaXN0b2dyYW0ocikpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+V2lkdGg8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17cmVjb3JkPy5XaWR0aCA/PyAwfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBIaXN0b2dyYW0oeyAuLi5yZWNvcmQsIFdpZHRoOiBwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSB9KSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eyhldnQpID0+IHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHsgLi4ucmVjb3JkLCBXaWR0aDogd2luZG93LmlubmVyV2lkdGggLSAyMDAgfSkpfT5GdWxsIFdpZHRoPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlIaXN0b2dyYW0+IEZpZWxkPSdVbml0cycgUmVjb3JkPXtyZWNvcmQuSlNPTn0gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBIaXN0b2dyYW0oeyAuLi5yZWNvcmQsIEpTT046IHIgfSkpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pSGlzdG9ncmFtPiBGaWVsZD0nQmluQ291bnQnIExhYmVsPSdCaW5zJyBSZWNvcmQ9e3JlY29yZC5KU09OfSBUeXBlPSdudW1iZXInIFNldHRlcj17KHIpID0+IHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHsgLi4ucmVjb3JkLCBKU09OOiByIH0pKX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pSGlzdG9ncmFtPiBGaWVsZD0nTWluJyBMYWJlbD0nTWluJyBSZWNvcmQ9e3JlY29yZC5KU09OIGFzIFRyZW5EQVAuaUhpc3RvZ3JhbX0gVHlwZT0nbnVtYmVyJyBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQoeyAuLi5yZWNvcmQsIEpTT046IHIgfSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaUhpc3RvZ3JhbT4gRmllbGQ9J01heCcgUmVjb3JkPXtyZWNvcmQuSlNPTiBhcyBUcmVuREFQLmlIaXN0b2dyYW19IFR5cGU9J251bWJlcicgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKHsgLi4ucmVjb3JkLCBKU09OOiByIH0pfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMlwiIHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZSd9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2IH19IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLkNhbGN1bGF0ZUF4aXNSYW5nZSgpKX0+VXNlIERhdGE8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDY+U2VyaWVzPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYWNjb3JkaW9uXCIgc3R5bGU9e3tvdmVyZmxvd1k6ICdhdXRvJywgbWF4SGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAzMDAsIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LzJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3JlY29yZC5EYXRhLm1hcCgoZCwgaSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2FyZC1saW5rXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGhyZWY9e1wiI2NvbGxhcHNlXCIgKyBpfT57ZC5EYXRhU291cmNlLk5hbWV9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPXtcImNvbGxhcHNlXCIgKyBpfSBjbGFzc05hbWU9XCJjb2xsYXBzZSBzaG93XCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzU2VsZWN0IFdpZGdldD17cmVjb3JkfSBEYXRhU291cmNlSUQ9e2QuRGF0YVNvdXJjZS5JRH0gQ2FsbGJhY2s9eygpID0+IHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHJlY29yZCkpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicgPyAocmVjb3JkLkpTT04/LlNlcmllcyA/PyBbXSkubWFwKChzZXJpZXMsaW5kKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IChkLkRhdGEgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YVtdKS5maW5kKGRkID0+IGRkLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXR1bSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e3Nlcmllcy5JRH0gY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57ZGF0dW0uTmFtZX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvWERBIERhdGE9e2RhdHVtfSBJbmRleD17aX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJpZXNQaWNrZXIgSW5kZXg9e2luZH0gU2VyaWVzPXtzZXJpZXN9IFdpZGdldD17cmVjb3JkfSBDYWxsYmFjaz17KHdpZGdldCkgPT4gc2V0UmVjb3JkKHdpZGdldCl9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogbnVsbCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJyA/IChyZWNvcmQuSlNPTj8uU2VyaWVzID8/IFtdKS5tYXAoKHNlcmllcywgaW5kKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IChkLkRhdGEgYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhW10pLmZpbmQoZGQgPT4gZGQuSUQudG9TdHJpbmcoKSA9PT0gc2VyaWVzLklEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdHVtID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17c2VyaWVzLklEfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPntkYXR1bS5OYW1lfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9TYXBwaGlyZSBEYXRhPXtkYXR1bX0gSW5kZXg9e2l9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIEluZGV4PXtpbmR9IFNlcmllcz17c2VyaWVzfSBXaWRnZXQ9e3JlY29yZH0gQ2FsbGJhY2s9eyh3aWRnZXQpID0+IHNldFJlY29yZCh3aWRnZXQpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IG51bGwpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoZC5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJyA/IChyZWNvcmQuSlNPTj8uU2VyaWVzID8/IFtdKS5tYXAoKHNlcmllcywgaW5kKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IChkLkRhdGEgYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybltdKS5maW5kKGRkID0+IGRkLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXR1bSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e3Nlcmllcy5JRH0gY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57ZGF0dW0uRGV2aWNlICsgJyAtICcgKyBkYXR1bS5EZXNjcmlwdGlvbiB9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gRGF0YT17ZGF0dW19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIEluZGV4PXtpbmR9IFNlcmllcz17c2VyaWVzfSBXaWRnZXQ9e3JlY29yZH0gQ2FsbGJhY2s9eyh3aWRnZXQpID0+IHNldFJlY29yZCh3aWRnZXQpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IG51bGwpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L1dpZGdldD5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICApO1xyXG5cclxufVxyXG5cclxuY29uc3QgU2VyaWVzUGlja2VyID0gKHByb3BzOiB7IEluZGV4OiBudW1iZXIsIFNlcmllczogVHJlbkRBUC5pSGlzdG9ncmFtU2VyaWVzLCBXaWRnZXQ6IEhpc3RvZ3JhbSwgQ2FsbGJhY2s6ICh3aWRnZXQ6IEhpc3RvZ3JhbSkgPT4gdm9pZCB9KSA9PiB7XHJcbiAgICBjb25zdCBbY29sb3IsIHNldENvbG9yXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4ocHJvcHMuU2VyaWVzLkNvbG9yKTtcclxuICAgIGNvbnN0IFt0eXBlLCBzZXRUeXBlXSA9IFJlYWN0LnVzZVN0YXRlPFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQ+KHByb3BzLlNlcmllcy5GaWVsZCk7XHJcbiAgICBjb25zdCBbcHJvZmlsZSwgc2V0UHJvZmlsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihwcm9wcy5TZXJpZXMuUHJvZmlsZSk7XHJcbiAgICBjb25zdCBbcENvbG9yLCBzZXRQQ29sb3JdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihwcm9wcy5TZXJpZXMuUHJvZmlsZUNvbG9yKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBwcm9wcy5DYWxsYmFjayhwcm9wcy5XaWRnZXQuVXBkYXRlU2VyaWVzKHByb3BzLkluZGV4LCBcIkNvbG9yXCIsIGNvbG9yKSksIFtjb2xvcl0pO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHByb3BzLkNhbGxiYWNrKHByb3BzLldpZGdldC5VcGRhdGVTZXJpZXMocHJvcHMuSW5kZXgsIFwiRmllbGRcIiwgdHlwZSkpLCBbdHlwZV0pO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHByb3BzLkNhbGxiYWNrKHByb3BzLldpZGdldC5VcGRhdGVTZXJpZXMocHJvcHMuSW5kZXgsIFwiUHJvZmlsZVwiLCBwcm9maWxlKSksIFtwcm9maWxlXSk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gcHJvcHMuQ2FsbGJhY2socHJvcHMuV2lkZ2V0LlVwZGF0ZVNlcmllcyhwcm9wcy5JbmRleCwgXCJQcm9maWxlQ29sb3JcIiwgcENvbG9yKSksIFtwQ29sb3JdKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0yXCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWw+RmllbGQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17dHlwZX0gb25DaGFuZ2U9eyhldnQpID0+IHNldFR5cGUoZXZ0LnRhcmdldC52YWx1ZSBhcyBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkF2ZXJhZ2VcIj5Bdmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWluaW11bVwiPk1pbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNYXhpbXVtXCI+TWF4PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWw+Q29sb3I8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjb2xvclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtjb2xvcn0gb25DaGFuZ2U9eyhldnQpID0+IHNldENvbG9yKGV2dC50YXJnZXQudmFsdWUpfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMVwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsPlByb2ZpbGU8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHN0eWxlPXt7d2lkdGg6IDIwfX0gIHZhbHVlPXtwcm9maWxlPy50b1N0cmluZygpfSBjaGVja2VkPXtwcm9maWxlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UHJvZmlsZShldnQudGFyZ2V0LmNoZWNrZWQpfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbD5Qcm9maWxlIENvbG9yPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY29sb3JcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17cENvbG9yfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UENvbG9yKGV2dC50YXJnZXQudmFsdWUpfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTFcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1saW5rXCIgb25DbGljaz17KCkgPT4gcHJvcHMuQ2FsbGJhY2socHJvcHMuV2lkZ2V0LlJlbW92ZVNlcmllcyhwcm9wcy5JbmRleCkpIH0+e0Nyb3NzTWFya308L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC8+XHJcblxyXG4pO1xyXG59IiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEltcGxlbWVudGF0aW9ucy50cyAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMS8yNy8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuXHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgeyBSYW5kb21Db2xvciB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvaGVscGVyLWZ1bmN0aW9ucyc7XHJcbmltcG9ydCBzdGF0cyBmcm9tICdzdGF0cy1saXRlJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdpZGdldDxUIGV4dGVuZHMgVHJlbkRBUC5XaWRnZXRDbGFzcywgVSBleHRlbmRzIFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlID0gVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGU+IGltcGxlbWVudHMgVHJlbkRBUC5pV2lkZ2V0PFQsVT57XHJcbiAgICBKU09OOiBUO1xyXG4gICAgSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBXaWR0aDogbnVtYmVyO1xyXG4gICAgVHlwZTogVHJlbkRBUC5XaWRnZXRUeXBlO1xyXG4gICAgTGFiZWw6IHN0cmluZztcclxuICAgIERhdGE6IFRyZW5EQVAuaURhdGFTZXRSZXR1cm48VT5bXTtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VCxVPikge1xyXG4gICAgICAgIHRoaXMuSGVpZ2h0ID0gcHJvcHMuSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuV2lkdGggPSBwcm9wcy5XaWR0aDtcclxuICAgICAgICB0aGlzLlR5cGUgPSBwcm9wcy5UeXBlO1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBwcm9wcy5MYWJlbDtcclxuICAgICAgICB0aGlzLkpTT04gPSBwcm9wcy5KU09OO1xyXG4gICAgICAgIGlmIChwcm9wcy5EYXRhID09IHVuZGVmaW5lZCkgdGhpcy5EYXRhID0gW107XHJcbiAgICAgICAgZWxzZSB0aGlzLkRhdGEgPSBwcm9wcy5EYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRMYWJlbCA9IChsYWJlbDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5MYWJlbCA9IGxhYmVsO1xyXG4gICAgfSBcclxuICAgIHB1YmxpYyBTZXRIZWlnaHQgPSAoaGVpZ2h0OiBudW1iZXIpID0+IHRoaXMuSGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgcHVibGljIFNldFdpZHRoID0gKHdpZHRoOiBudW1iZXIpID0+IHRoaXMuV2lkdGggPSB3aWR0aDtcclxuICAgIHB1YmxpYyBTZXRKU09OID0gKGpzb246IFQpID0+IHRoaXMuSlNPTiA9IGpzb247XHJcbiAgICBwdWJsaWMgQXZhaWxhYmxlU2VyaWVzID0gKCkgPT4gdGhpcy5EYXRhLm1hcChkZCA9PiAoeyAuLi5kZCwgRGF0YVNvdXJjZUlEOiBkZC5EYXRhU291cmNlLklELCBEYXRhU291cmNlOiBkZC5EYXRhU291cmNlIH0pLkRhdGEubWFwKGRkZCA9PiAoeyAuLi5kZGQsIERhdGE6IFtdLCBEYXRhU291cmNlOiBkZC5EYXRhU291cmNlLk5hbWUsIERhdGFTb3VyY2VJRDogZGQuRGF0YVNvdXJjZS5JRCB9IGFzIFRyZW5EQVAuaVhEQVJldHVybldpdGhEYXRhU291cmNlKSkpLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pO1xyXG5cclxuICAgIHB1YmxpYyBVcGRhdGVKU09OID0gPEsgZXh0ZW5kcyBrZXlvZiBUPihmaWVsZDogSywgdmFsdWU6IFRbS10pID0+IHtcclxuICAgICAgICB0aGlzLkpTT05bZmllbGRdID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhpc3RvZ3JhbTxVIGV4dGVuZHMgVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGUgPSBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT4gZXh0ZW5kcyBXaWRnZXQ8VHJlbkRBUC5pSGlzdG9ncmFtLCBVPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaUhpc3RvZ3JhbSwgVT4gKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuVHlwZSA9IFwiSGlzdG9ncmFtXCI7XHJcbiAgICAgICAgaWYgKHRoaXMuSlNPTiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLkpTT04gPSB7IE1pbjogMCwgTWF4OiAxMCwgVW5pdHM6ICcnLCBTZXJpZXM6IFtdLCBCaW5Db3VudDogMTAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkU2VyaWVzID0gKGlkOiBudW1iZXIgfCBzdHJpbmcsIGRhdGFTb3VyY2VJRDogbnVtYmVyLCBsYWJlbD86IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHRoaXMuSlNPTi5TZXJpZXMucHVzaCh7IElEOiBpZC50b1N0cmluZygpLCBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCwgRmllbGQ6IFwiQXZlcmFnZVwiLCBDb2xvcjogR2V0Q29sb3IoKSwgUHJvZmlsZTogZmFsc2UsIFByb2ZpbGVDb2xvcjogR2V0Q29sb3IobGFiZWwpIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9ncmFtKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBSZW1vdmVTZXJpZXMgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHRoaXMuSlNPTi5TZXJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlU2VyaWVzID0gKGluZGV4OiBrZXlvZiBUcmVuREFQLmlIaXN0b2dyYW1TZXJpZXNbXSwgZmllbGQ6IGtleW9mIFRyZW5EQVAuaUhpc3RvZ3JhbVNlcmllcywgdmFsdWU6IFRyZW5EQVAuaUhpc3RvZ3JhbVNlcmllc1trZXlvZiBUcmVuREFQLmlIaXN0b2dyYW1TZXJpZXNdKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllc1tpbmRleF1bZmllbGRdID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIaXN0b2dyYW0odGhpcyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDYWxjdWxhdGVBeGlzUmFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGRkOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZVtdID0gW10uY29uY2F0KC4uLnRoaXMuRGF0YS5tYXAoZCA9PiBkLkRhdGEpKTtcclxuICAgICAgICBsZXQgc3MgPSB0aGlzLkpTT04uU2VyaWVzLm1hcChzZXJpZXMgPT4gKGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRCk/LkRhdGEgPz8gW10pLm1hcChkID0+IGRbc2VyaWVzLkZpZWxkXSkpO1xyXG4gICAgICAgIGxldCBtbSA9IHNzLm1hcChzID0+IFtNYXRoLm1pbiguLi5zKSwgTWF0aC5tYXgoLi4ucyldKTtcclxuICAgICAgICB0aGlzLkpTT04uTWF4ID0gTWF0aC5tYXgoLi4uW10uY29uY2F0KC4uLm1tKSk7XHJcbiAgICAgICAgdGhpcy5KU09OLk1pbiA9IE1hdGgubWluKC4uLltdLmNvbmNhdCguLi5tbSkpO1xyXG4gICAgICAgIGxldCBidWZmZXIgPSAodGhpcy5KU09OLk1heCAtIHRoaXMuSlNPTi5NaW4pICogLjEwO1xyXG4gICAgICAgIHRoaXMuSlNPTi5NYXggPSB0aGlzLkpTT04uTWF4ICsgYnVmZmVyO1xyXG4gICAgICAgIHRoaXMuSlNPTi5NaW4gPSB0aGlzLkpTT04uTWluIC0gYnVmZmVyO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRyZW5kPFUgZXh0ZW5kcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSA9IFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlPiBleHRlbmRzIFdpZGdldDxUcmVuREFQLmlUcmVuZCxVPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaVRyZW5kLCBVPikge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLlR5cGUgPSBcIlRyZW5kXCI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLkpTT04gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OID0geyBNaW46IDAsIE1heDogMTAsIExlZ2VuZDogZmFsc2UsIFNwbGl0OiBmYWxzZSwgU3BsaXRUeXBlOiAnQXhpcycsIFlBeGlzOiBbeyBNYXg6IDEwLCBNaW46IDAsIFBvc2l0aW9uOiAnbGVmdCcsIFVuaXRzOiAnJyB9XSwgU2VyaWVzOiBbXSAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkQXhpcyA9ICgpID0+IHRoaXMuSlNPTi5ZQXhpcy5wdXNoKHsgTWF4OiAxMCwgTWluOiAwLCBQb3NpdGlvbjogJ2xlZnQnLCBVbml0czogJycgfSk7XHJcbiAgICBwdWJsaWMgUmVtb3ZlQXhpcyA9IChpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuSlNPTi5ZQXhpcy5sZW5ndGggPT0gMSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLkpTT04uWUF4aXMuc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgICAgIHRoaXMuSlNPTi5TZXJpZXMuZm9yRWFjaChzZXJpZXMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2VyaWVzLkF4aXMgPj0gaW5kZXgpXHJcbiAgICAgICAgICAgICAgICBzZXJpZXMuQXhpcyA9IChpbmRleCA+IDAgPyBzZXJpZXMuQXhpcyAtIDEgOiAwKTsgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcHVibGljIFVwZGF0ZUF4aXMgPSAoaW5kZXg6IGtleW9mIFRyZW5EQVAuaVlBeGlzW10sIGZpZWxkOiBrZXlvZiBUcmVuREFQLmlZQXhpcywgdmFsdWU6IFRyZW5EQVAuaVlBeGlzW2tleW9mIFRyZW5EQVAuaVlBeGlzXSkgPT4geyB0aGlzLkpTT04uWUF4aXNbaW5kZXhdW2ZpZWxkXSA9IHZhbHVlOyB9O1xyXG5cclxuICAgIHB1YmxpYyBDYWxjdWxhdGVBeGlzUmFuZ2UgPSAodHlwZTogJ3gnIHwgJ3knLCBpbmRleD86IGtleW9mIFRyZW5EQVAuaVlBeGlzW10pID0+IHtcclxuICAgICAgICBsZXQgZGQ6IFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlW10gPSBbXS5jb25jYXQoLi4udGhpcy5EYXRhLm1hcChkID0+IGQuRGF0YSkpO1xyXG4gICAgICAgIGlmICh0eXBlID09PSAneCcpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgc3MgPSB0aGlzLkpTT04uU2VyaWVzLm1hcChzZXJpZXMgPT4gKGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT0gc2VyaWVzLklEKT8uRGF0YSA/PyBbXSkubWFwKGQgPT4gbW9tZW50KGQuVGltZXN0YW1wKS50b0RhdGUoKS5nZXRUaW1lKCkpKTtcclxuICAgICAgICAgICAgbGV0IG1tID0gc3MubWFwKHMgPT4gW01hdGgubWluKC4uLnMpLCBNYXRoLm1heCguLi5zKV0pO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWF4ID0gTWF0aC5tYXgoLi4uW10uY29uY2F0KC4uLm1tKSk7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5NaW4gPSBNYXRoLm1pbiguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLkpTT04uWUF4aXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNzID0gdGhpcy5KU09OLlNlcmllcy5maWx0ZXIoc2VyaWVzID0+IHNlcmllcy5BeGlzID09PSBpbmRleCkubWFwKHNlcmllcyA9PiAoZGQuZmluZChkID0+IGQuSUQudG9TdHJpbmcoKSA9PSBzZXJpZXMuSUQpPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBkW3Nlcmllcy5GaWVsZF0pKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbW0gPSBzcy5tYXAocyA9PiBbTWF0aC5taW4oLi4ucyksIE1hdGgubWF4KC4uLnMpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5KU09OLllBeGlzW2luZGV4XVsnTWF4J10gPSBNYXRoLm1heCguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNaW4nXSA9IE1hdGgubWluKC4uLltdLmNvbmNhdCguLi5tbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWZmZXIgPSAodGhpcy5KU09OLllBeGlzW2luZGV4XVsnTWF4J10gLSB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNaW4nXSkgKiAuMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5KU09OLllBeGlzW2luZGV4XVsnTWF4J10gPSB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNYXgnXSArIGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNaW4nXSA9IHRoaXMuSlNPTi5ZQXhpc1tpbmRleF1bJ01pbiddIC0gYnVmZmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBzcyA9IHRoaXMuSlNPTi5TZXJpZXMuZmlsdGVyKHNlcmllcyA9PiBzZXJpZXMuQXhpcyA9PT0gaW5kZXgpLm1hcChzZXJpZXMgPT4gKGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT0gc2VyaWVzLklEKT8uRGF0YSA/PyBbXSkubWFwKGQgPT4gZFtzZXJpZXMuRmllbGRdKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbW0gPSBzcy5tYXAocyA9PiBbTWF0aC5taW4oLi4ucyksIE1hdGgubWF4KC4uLnMpXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNYXgnXSA9IE1hdGgubWF4KC4uLltdLmNvbmNhdCguLi5tbSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5KU09OLllBeGlzW2luZGV4XVsnTWluJ10gPSBNYXRoLm1pbiguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuICAgICAgICAgICAgICAgIGxldCBidWZmZXIgPSAodGhpcy5KU09OLllBeGlzW2luZGV4XVsnTWF4J10gLSB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNaW4nXSkgKiAuMTA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNYXgnXSA9IHRoaXMuSlNPTi5ZQXhpc1tpbmRleF1bJ01heCddICsgYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5KU09OLllBeGlzW2luZGV4XVsnTWluJ10gPSB0aGlzLkpTT04uWUF4aXNbaW5kZXhdWydNaW4nXSAtIGJ1ZmZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVuZCh0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIEFkZFNlcmllcyA9IChpZDogbnVtYmVyIHwgc3RyaW5nLCBkYXRhU291cmNlSUQ6IG51bWJlciwgbGFiZWw6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLkpTT04uU2VyaWVzLmZpbmQoc2VyaWVzID0+IHNlcmllcy5JRCA9PT0gaWQudG9TdHJpbmcoKSAmJiBzZXJpZXMuRGF0YVNvdXJjZUlEID09PSBkYXRhU291cmNlSUQpICE9PSB1bmRlZmluZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGRkOlVbXSA9IFtdLmNvbmNhdCguLi50aGlzLkRhdGEubWFwKGQgPT4gZC5EYXRhKSk7XHJcbiAgICAgICAgbGV0IHNlcmllcyA9IGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT09IGlkLnRvU3RyaW5nKCkpXHJcblxyXG4gICAgICAgIGxldCBheGlzSW5kZXggPSAwO1xyXG5cclxuICAgICAgICBpZiAoc2VyaWVzWydVbml0J10gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGF4aXNJbmRleCA9IHRoaXMuSlNPTi5ZQXhpcy5maW5kSW5kZXgoYSA9PiBhLlVuaXRzID09PSBzZXJpZXNbJ1VuaXQnXSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYXhpc0luZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgYXhpc0luZGV4ID0gdGhpcy5KU09OLllBeGlzLnB1c2goeyBVbml0czogc2VyaWVzWydVbml0J10sIE1pbjogMCwgTWF4OiAxMDAsIFBvc2l0aW9uOiAnbGVmdCcgfSkgLSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzLnB1c2goeyBJRDogaWQudG9TdHJpbmcoKSwgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsIEF4aXM6IGF4aXNJbmRleCwgRmllbGQ6IFwiQXZlcmFnZVwiLCBDb2xvcjogR2V0Q29sb3IobGFiZWwpLCBMYWJlbDogbGFiZWwsIFNob3dFdmVudHM6IGZhbHNlIH0pO1xyXG4gICAgICAgIHRoaXMuQ2FsY3VsYXRlQXhpc1JhbmdlKCd4Jyk7XHJcbiAgICAgICAgdGhpcy5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3knKTtcclxuICAgICAgICByZXR1cm4gbmV3IFRyZW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBRdWlja0FkZFZvbHRhZ2VSTVMgPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIpID0+IHtcclxuICAgICAgICBsZXQgYXhpcyA9IHRoaXMuSlNPTi5ZQXhpcy5maW5kSW5kZXgoYXhpcyA9PiBheGlzLlVuaXRzID09PSAnVicpXHJcbiAgICAgICAgaWYgKGF4aXMgPCAwKSB7XHJcbiAgICAgICAgICAgIGF4aXMgPSB0aGlzLkpTT04uWUF4aXMucHVzaCh7VW5pdHM6ICdWJywgUG9zaXRpb246ICdsZWZ0JywgTWluOiAwLCBNYXg6IDEwMH0pIC0gMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllcy5wdXNoKC4uLnRoaXMuRGF0YS5maW5kKGRhdHVtID0+IGRhdHVtLkRhdGFTb3VyY2UuSUQgPT09IGRhdGFTb3VyY2VJRCkuRGF0YS5maWx0ZXIoZGF0dW0gPT4gZGF0dW1bJ1R5cGUnXSA9PT0gJ1ZvbHRhZ2UnICYmIGRhdHVtWydDaGFyYWN0ZXJpc3RpYyddID09PSAnUk1TJykubWFwKGRhdHVtID0+ICh7IElEOiBkYXR1bS5JRC50b1N0cmluZygpLCBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCwgQXhpczogYXhpcywgRmllbGQ6ICdBdmVyYWdlJyBhcyBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkLCBDb2xvcjogR2V0Q29sb3IoYFYke2RhdHVtLlBoYXNlfSAtICR7ZGF0dW1bJ01ldGVyJ119YCksIExhYmVsOiBkYXR1bVsnTmFtZSddLCBTaG93RXZlbnRzOiBmYWxzZX0pKSlcclxuICAgICAgICB0aGlzLkNhbGN1bGF0ZUF4aXNSYW5nZSgneCcpO1xyXG4gICAgICAgIHRoaXMuQ2FsY3VsYXRlQXhpc1JhbmdlKCd5Jyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVuZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUXVpY2tBZGRDdXJyZW50Uk1TID0gKGRhdGFTb3VyY2VJRDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgbGV0IGF4aXMgPSB0aGlzLkpTT04uWUF4aXMuZmluZEluZGV4KGF4aXMgPT4gYXhpcy5Vbml0cyA9PT0gJ0EnKVxyXG4gICAgICAgIGlmIChheGlzIDwgMCkge1xyXG4gICAgICAgICAgICBheGlzID0gdGhpcy5KU09OLllBeGlzLnB1c2goeyBVbml0czogJ0EnLCBQb3NpdGlvbjogJ2xlZnQnLCBNaW46IDAsIE1heDogMTAwIH0pIC0gMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllcy5wdXNoKC4uLnRoaXMuRGF0YS5maW5kKGRhdHVtID0+IGRhdHVtLkRhdGFTb3VyY2UuSUQgPT09IGRhdGFTb3VyY2VJRCkuRGF0YS5maWx0ZXIoZGF0dW0gPT4gZGF0dW1bJ1R5cGUnXSA9PT0gJ0N1cnJlbnQnICYmIGRhdHVtWydDaGFyYWN0ZXJpc3RpYyddID09PSAnUk1TJykubWFwKGRhdHVtID0+ICh7IElEOiBkYXR1bS5JRC50b1N0cmluZygpLCBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCwgQXhpczogYXhpcywgRmllbGQ6ICdBdmVyYWdlJyBhcyBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkLCBDb2xvcjogR2V0Q29sb3IoYFYke2RhdHVtLlBoYXNlfSAtICR7ZGF0dW1bJ01ldGVyJ119YCksIExhYmVsOiBkYXR1bVsnTmFtZSddLCBTaG93RXZlbnRzOiBmYWxzZSB9KSkpXHJcbiAgICAgICAgdGhpcy5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3gnKTtcclxuICAgICAgICB0aGlzLkNhbGN1bGF0ZUF4aXNSYW5nZSgneScpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJlbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlbW92ZVNlcmllcyA9IChpbmRleDogbnVtYmVyKSA9PiB0aGlzLkpTT04uU2VyaWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICBwdWJsaWMgUmVtb3ZlQWxsID0gKGRhdGFTb3VyY2VJRDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllcyA9IHRoaXMuSlNPTi5TZXJpZXMuZmlsdGVyKHNlcmllcyA9PiBzZXJpZXMuRGF0YVNvdXJjZUlEICE9IGRhdGFTb3VyY2VJRCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVuZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlU2VyaWVzID0gKGluZGV4OiBrZXlvZiBUcmVuREFQLmlUcmVuZFNlcmllc1tdLCBmaWVsZDoga2V5b2YgVHJlbkRBUC5pVHJlbmRTZXJpZXMsIHZhbHVlOiBUcmVuREFQLmlUcmVuZFNlcmllc1trZXlvZiBUcmVuREFQLmlUcmVuZFNlcmllc10pID0+IHsgdGhpcy5KU09OLlNlcmllc1tpbmRleF1bZmllbGRdID0gdmFsdWU7IH07XHJcblxyXG4gICAgcHVibGljIFBhbiA9ICh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLk1heCA9IHRoaXMuSlNPTi5NYXggKyB2YWx1ZTtcclxuICAgICAgICB0aGlzLkpTT04uTWluID0gdGhpcy5KU09OLk1pbiArIHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJlbmQodGhpcyk7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuLy9leHBvcnQgY2xhc3MgUHJvZmlsZSBleHRlbmRzIFdpZGdldDxUcmVuREFQLmlQcm9maWxlPiB7XHJcbi8vICAgIGNvbnN0cnVjdG9yKGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBqc29uPzogVHJlbkRBUC5pVHJlbmQpIHtcclxuLy8gICAgICAgIHN1cGVyKFwiUHJvZmlsZVwiLCBoZWlnaHQsIHdpZHRoLCBqc29uKTtcclxuLy8gICAgICAgIGlmIChqc29uID09PSB1bmRlZmluZWQpXHJcbi8vICAgICAgICAgICAgdGhpcy5KU09OID0geyAgfTtcclxuLy8gICAgfVxyXG5cclxuLy99XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdHM8VSBleHRlbmRzIFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlID0gVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGU+IGV4dGVuZHMgV2lkZ2V0PFRyZW5EQVAuaVN0YXRzLFU+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pU3RhdHMsVT4pIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5UeXBlID0gXCJTdGF0c1wiO1xyXG4gICAgICAgIGlmICh0aGlzLkpTT04gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OID0ge1NlcmllczogbnVsbCwgUHJlY2lzaW9uOiAzfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBTZXRTZXJpZXMgPSAoaWQ6IG51bWJlciB8IHN0cmluZywgZHNJRDogbnVtYmVyKSA9PiB0aGlzLkpTT04uU2VyaWVzID0geyBJRDogaWQudG9TdHJpbmcoKSwgRGF0YVNvdXJjZUlEOiBkc0lELCBGaWVsZDogJ0F2ZXJhZ2UnIH07XHJcbiAgICBwdWJsaWMgU2V0U2VyaWVzRmllbGQgPSAoZmllbGQ6IFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpID0+IHtcclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzLkZpZWxkID0gZmllbGQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0cyh0aGlzKTtcclxuICAgIH07XHJcbiAgICBwdWJsaWMgU2V0UHJlY3Npc2lvbiA9ICh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLlByZWNpc2lvbiA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RhdHModGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBTdGF0cyA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLkpTT04uU2VyaWVzO1xyXG5cclxuICAgICAgICBpZiAoc2VyaWVzID09IG51bGwpIHJldHVybiB7XHJcbiAgICAgICAgICAgIE1lYW46ICcnLFxyXG4gICAgICAgICAgICBNZWRpYW46JycsXHJcbiAgICAgICAgICAgIC8vTW9kZTogJycsXHJcbiAgICAgICAgICAgIFZhcmlhbmNlOiAnJyxcclxuICAgICAgICAgICAgU3RkRGV2OicnLFxyXG4gICAgICAgICAgICBQZXJjZW50aWxlOiB7XHJcbiAgICAgICAgICAgICAgICAxMDogJycsXHJcbiAgICAgICAgICAgICAgICAyNTonJyxcclxuICAgICAgICAgICAgICAgIDUwOiAnJyxcclxuICAgICAgICAgICAgICAgIDc1OiAnJyxcclxuICAgICAgICAgICAgICAgIDkwOicnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZURhdGEgPSB0aGlzLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgY29uc3QgZGF0YVNlcmllcyA9IGRhdGFTb3VyY2VEYXRhLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRC50b1N0cmluZygpKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICBjb25zdCBkYXRhID0gZGF0YVNlcmllcy5tYXAoZCA9PmRbc2VyaWVzLkZpZWxkXSk7XHJcblxyXG5cclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT0gMCkgcmV0dXJuIHtcclxuICAgICAgICAgICAgTWVhbjogJycsXHJcbiAgICAgICAgICAgIE1lZGlhbjogJycsXHJcbiAgICAgICAgICAgIC8vTW9kZTogJycsXHJcbiAgICAgICAgICAgIFZhcmlhbmNlOiAnJyxcclxuICAgICAgICAgICAgU3RkRGV2OiAnJyxcclxuICAgICAgICAgICAgUGVyY2VudGlsZToge1xyXG4gICAgICAgICAgICAgICAgMTA6ICcnLFxyXG4gICAgICAgICAgICAgICAgMjU6ICcnLFxyXG4gICAgICAgICAgICAgICAgNTA6ICcnLFxyXG4gICAgICAgICAgICAgICAgNzU6ICcnLFxyXG4gICAgICAgICAgICAgICAgOTA6ICcnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBNZWFuOiBzdGF0cy5tZWFuKGRhdGEpLnRvRml4ZWQodGhpcy5KU09OLlByZWNpc2lvbiksXHJcbiAgICAgICAgICAgIE1lZGlhbjogc3RhdHMubWVkaWFuKGRhdGEpLnRvRml4ZWQodGhpcy5KU09OLlByZWNpc2lvbiksXHJcbiAgICAgICAgICAgIC8vTW9kZTogc3RhdHMubW9kZShkYXRhKS8qLnRvUHJlY2lzaW9uKHRoaXMuSlNPTi5QcmVjaXNpb24pKi8sXHJcbiAgICAgICAgICAgIFZhcmlhbmNlOiBzdGF0cy52YXJpYW5jZShkYXRhKS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICBTdGREZXY6IHN0YXRzLnN0ZGV2KGRhdGEpLnRvRml4ZWQodGhpcy5KU09OLlByZWNpc2lvbiksXHJcbiAgICAgICAgICAgIFBlcmNlbnRpbGU6IHtcclxuICAgICAgICAgICAgICAgIDEwOiBzdGF0cy5wZXJjZW50aWxlKGRhdGEsIDAuMTApLnRvRml4ZWQodGhpcy5KU09OLlByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICAyNTogc3RhdHMucGVyY2VudGlsZShkYXRhLCAwLjI1KS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgNTA6IHN0YXRzLnBlcmNlbnRpbGUoZGF0YSwgMC41MCkudG9GaXhlZCh0aGlzLkpTT04uUHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIDc1OiBzdGF0cy5wZXJjZW50aWxlKGRhdGEsIDAuNzUpLnRvRml4ZWQodGhpcy5KU09OLlByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICA5MDogc3RhdHMucGVyY2VudGlsZShkYXRhLCAwLjkwKS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlPFUgZXh0ZW5kcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSA9IFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlPiBleHRlbmRzIFdpZGdldDxUcmVuREFQLmlUYWJsZSxVPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaVN0YXRzLFU+KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIGlmICh0aGlzLkpTT04gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OID0geyBTZXJpZXM6IG51bGwsIFByZWNpc2lvbjogMyB9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIFNldFNlcmllcyA9IChpZDogbnVtYmVyIHwgc3RyaW5nLCBkc0lEOiBudW1iZXIpID0+IHRoaXMuSlNPTi5TZXJpZXMgPSB7IElEOiBpZC50b1N0cmluZygpLCBEYXRhU291cmNlSUQ6IGRzSUQsIEZpZWxkOiAnQXZlcmFnZScgfTtcclxuICAgIHB1YmxpYyBTZXRTZXJpZXNGaWVsZCA9IChmaWVsZDogVHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZCkgPT4ge1xyXG4gICAgICAgIHRoaXMuSlNPTi5TZXJpZXMuRmllbGQgPSBmaWVsZDtcclxuICAgICAgICByZXR1cm4gbmV3IFN0YXRzKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIHB1YmxpYyBTZXRQcmVjc2lzaW9uID0gKHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0aGlzLkpTT04uUHJlY2lzaW9uID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0cyh0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRleHQ8VSBleHRlbmRzIFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlID0gVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGU+IGV4dGVuZHMgV2lkZ2V0PFRyZW5EQVAuaVRleHQsVT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFRyZW5EQVAuaVdpZGdldDxUcmVuREFQLmlUZXh0LFU+KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIGlmICh0aGlzLkpTT04gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OID0ge1RleHQ6ICcnfTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBYdnNZPFUgZXh0ZW5kcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSA9IFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlPiBleHRlbmRzIFdpZGdldDxUcmVuREFQLmlYdnNZLFU+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pWHZzWSxVPikge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICBpZiAodGhpcy5KU09OID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTiA9IHtcclxuICAgICAgICAgICAgICAgIFk6IHsgTWluOiAwLCBNYXg6IDEwMCwgVW5pdHM6ICcnLCBTZXJpZXM6IG51bGwgfSxcclxuICAgICAgICAgICAgICAgIFg6IHsgTWluOiAwLCBNYXg6IDEwMCwgVW5pdHM6ICcnLCBTZXJpZXM6IG51bGwgfSxcclxuICAgICAgICAgICAgICAgIFRpbWVNaW46IG51bGwsIFRpbWVNYXg6IG51bGwsIFJlZ3Jlc3Npb25MaW5lOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5KU09OLlggPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLkpTT04uWCA9IHsgTWluOiAwLCBNYXg6IDEwMCwgVW5pdHM6ICcnLCBTZXJpZXM6IG51bGwgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuSlNPTi5ZID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OLlkgPSB7IE1pbjogMCwgTWF4OiAxMDAsIFVuaXRzOiAnJywgU2VyaWVzOiBudWxsIH07XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgQ2FsY3VsYXRlUmFuZ2UgPSAodHlwZTogJ3gnIHwgJ3knIHwgJ3RpbWUnKSA9PiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICd4Jykge1xyXG4gICAgICAgICAgICBsZXQgZGQgPSB0aGlzLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IHRoaXMuSlNPTi5YLlNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGxldCBzcyA9IGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT09IHRoaXMuSlNPTi5YLlNlcmllcy5JRC50b1N0cmluZygpKS5EYXRhLm1hcChkID0+IGRbdGhpcy5KU09OLlguU2VyaWVzLkZpZWxkXSk7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5YLk1heCA9IE1hdGgubWF4KC4uLnNzKTtcclxuICAgICAgICAgICAgdGhpcy5KU09OLlguTWluID0gTWF0aC5taW4oLi4uc3MpO1xyXG4gICAgICAgICAgICBsZXQgYnVmZmVyID0gKHRoaXMuSlNPTi5YLk1heCAtIHRoaXMuSlNPTi5YLk1pbikgKiAuMTA7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5YLk1heCA9IHRoaXMuSlNPTi5YLk1heCArIGJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy5KU09OLlguTWluID0gdGhpcy5KU09OLlguTWluIC0gYnVmZmVyO1xyXG5cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICd5Jykge1xyXG4gICAgICAgICAgICBsZXQgZGQgPSB0aGlzLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IHRoaXMuSlNPTi5ZLlNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGxldCBzcyA9IGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT09IHRoaXMuSlNPTi5ZLlNlcmllcy5JRC50b1N0cmluZygpKS5EYXRhLm1hcChkID0+IGRbdGhpcy5KU09OLlkuU2VyaWVzLkZpZWxkXSk7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5ZLk1heCA9IE1hdGgubWF4KC4uLnNzKTtcclxuICAgICAgICAgICAgdGhpcy5KU09OLlkuTWluID0gTWF0aC5taW4oLi4uc3MpO1xyXG4gICAgICAgICAgICBsZXQgYnVmZmVyID0gKHRoaXMuSlNPTi5ZLk1heCAtIHRoaXMuSlNPTi5ZLk1pbikgKiAuMTA7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5ZLk1heCA9IHRoaXMuSlNPTi5ZLk1heCArIGJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy5KU09OLlkuTWluID0gdGhpcy5KU09OLlkuTWluIC0gYnVmZmVyO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkZCA9IHRoaXMuRGF0YS5maW5kKGRzID0+IGRzLkRhdGFTb3VyY2UuSUQudG9TdHJpbmcoKSA9PT0gdGhpcy5KU09OLlguU2VyaWVzLkRhdGFTb3VyY2VJRC50b1N0cmluZygpKT8uRGF0YSA/PyBbXTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzcyA9IGRkLmZpbmQoZCA9PiBkLklELnRvU3RyaW5nKCkgPT09IHRoaXMuSlNPTi5YLlNlcmllcy5JRC50b1N0cmluZygpKS5EYXRhLm1hcChkID0+IG5ldyBEYXRlKGQuVGltZXN0YW1wKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uVGltZU1heCA9IE1hdGgubWF4KC4uLnNzKTtcclxuICAgICAgICAgICAgdGhpcy5KU09OLlRpbWVNaW4gPSBNYXRoLm1pbiguLi5zcyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBYdnNZKHRoaXMpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgcHVibGljIFNldEF4aXMgPSAoYXhpczogJ3gnIHwgJ3knLCBmaWVsZDoga2V5b2YgVHJlbkRBUC5pQXhpcywgdmFsdWU6IFRyZW5EQVAuaUF4aXNba2V5b2YgVHJlbkRBUC5pQXhpc10pID0+IHtcclxuICAgICAgICBpZiAoYXhpcyA9PT0gJ3gnKVxyXG4gICAgICAgICAgICAodGhpcy5KU09OLlhbZmllbGRdIGFzIGFueSkgPSB2YWx1ZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICh0aGlzLkpTT04uWVtmaWVsZF0gYXMgYW55KSA9IHZhbHVlO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFh2c1kodGhpcyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBTZXRTZXJpZXMgPSAoYXhpczogJ3gnIHwgJ3knLCBpZDogbnVtYmVyIHwgc3RyaW5nLCBkc0lEOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZihheGlzID09PSAneCcpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5YLlNlcmllcyA9IHsgSUQ6IGlkLnRvU3RyaW5nKCksIERhdGFTb3VyY2VJRDogZHNJRCwgRmllbGQ6ICdBdmVyYWdlJyB9O1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5KU09OLlkuU2VyaWVzID0geyBJRDogaWQudG9TdHJpbmcoKSwgRGF0YVNvdXJjZUlEOiBkc0lELCBGaWVsZDogJ0F2ZXJhZ2UnIH07XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgWHZzWSh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlU2VyaWVzID0gKGF4aXM6ICd4JyB8ICd5JywgZmllbGQ6IGtleW9mIFRyZW5EQVAuaVNlcmllcywgdmFsdWU6IFRyZW5EQVAuaVNlcmllc1trZXlvZiBUcmVuREFQLmlTZXJpZXNdKSA9PiB7XHJcbiAgICAgICAgaWYgKGF4aXMgPT09ICd4JylcclxuICAgICAgICAgICAgKHRoaXMuSlNPTi5YLlNlcmllc1tmaWVsZF0gYXMgYW55KSA9IHZhbHVlO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgKHRoaXMuSlNPTi5ZLlNlcmllc1tmaWVsZF0gYXMgYW55KSA9IHZhbHVlO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFh2c1kodGhpcyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBSZW1vdmVTZXJpZXMgPSAoYXhpczogJ3gnIHwgJ3knKSA9PiB7XHJcbiAgICAgICAgaWYgKGF4aXMgPT09ICd4JylcclxuICAgICAgICAgICAgdGhpcy5KU09OLlguU2VyaWVzID0gbnVsbDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5ZLlNlcmllcyA9IG51bGw7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgWHZzWSh0aGlzKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVdpZGdldCh0eXBlOiBUcmVuREFQLldpZGdldFR5cGUsIGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyKSB7XHJcbiAgICBpZiAodHlwZSA9PSAnSGlzdG9ncmFtJylcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh7SGVpZ2h0OiBoZWlnaHQsIFdpZHRoOiB3aWR0aCwgTGFiZWw6IHR5cGUsIFR5cGU6IHR5cGUsIEpTT046IHVuZGVmaW5lZCB9KTtcclxuICAgIC8vZWxzZSBpZiAodHlwZSA9PSAnUHJvZmlsZScpXHJcbiAgICAvLyAgICByZXR1cm4gbmV3IFByb2ZpbGUoaGVpZ2h0LCB3aWR0aCk7XHJcbiAgICBlbHNlIGlmICh0eXBlID09ICdTdGF0cycpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0cyh7IEhlaWdodDogaGVpZ2h0LCBXaWR0aDogd2lkdGgsIExhYmVsOiB0eXBlLCBUeXBlOiB0eXBlLCBKU09OOiB1bmRlZmluZWQgfSk7XHJcbiAgICBlbHNlIGlmICh0eXBlID09ICdUYWJsZScpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYWJsZSh7IEhlaWdodDogaGVpZ2h0LCBXaWR0aDogd2lkdGgsIExhYmVsOiB0eXBlLCBUeXBlOiB0eXBlLCBKU09OOiB1bmRlZmluZWQgfSk7XHJcbiAgICBlbHNlIGlmICh0eXBlID09ICdUZXh0JylcclxuICAgICAgICByZXR1cm4gbmV3IFRleHQoeyBIZWlnaHQ6IGhlaWdodCwgV2lkdGg6IHdpZHRoLCBMYWJlbDogdHlwZSwgVHlwZTogdHlwZSwgSlNPTjogdW5kZWZpbmVkIH0pO1xyXG4gICAgZWxzZSBpZiAodHlwZSA9PSAnVHJlbmQnKVxyXG4gICAgICAgIHJldHVybiBuZXcgVHJlbmQoeyBIZWlnaHQ6IGhlaWdodCwgV2lkdGg6IHdpZHRoLCBMYWJlbDogdHlwZSwgVHlwZTogdHlwZSwgSlNPTjogdW5kZWZpbmVkIH0pO1xyXG4gICAgaWYgKHR5cGUgPT0gJ1h2c1knKVxyXG4gICAgICAgIHJldHVybiBuZXcgWHZzWSh7IEhlaWdodDogaGVpZ2h0LCBXaWR0aDogd2lkdGgsIExhYmVsOiB0eXBlLCBUeXBlOiB0eXBlLCBKU09OOiB1bmRlZmluZWQgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldENvbG9yKGxhYmVsPzogc3RyaW5nKSB7XHJcbiAgICBpZiAobGFiZWwgPT0gdW5kZWZpbmVkKSByZXR1cm4gUmFuZG9tQ29sb3IoKTtcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1ZvbHRhZ2UgQScpID49IDApIHJldHVybiAnI0EzMDAwMCc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdWb2x0YWdlIEInKSA+PSAwKSByZXR1cm4gJyMwMDI5QTMnO1xyXG4gICAgZWxzZSBpZiAobGFiZWwuaW5kZXhPZignVm9sdGFnZSBDJykgPj0gMCkgcmV0dXJuICcjMDA3QTI5JztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1ZvbHRhZ2UgTicpID49IDApIHJldHVybiAnI2MzYzNjMyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdDdXJyZW50IEEnKSA+PSAwKSByZXR1cm4gJyNGRjAwMDAnO1xyXG4gICAgZWxzZSBpZiAobGFiZWwuaW5kZXhPZignQ3VycmVudCBCJykgPj0gMCkgcmV0dXJuICcjMDA2NkNDJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ0N1cnJlbnQgQycpID49IDApIHJldHVybiAnIzMzQ0MzMyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdBTicpID49IDApIHJldHVybiAnI0ZGMDAwMCc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdCTicpID49IDApIHJldHVybiAnIzAwNjZDQyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdDTicpID49IDApIHJldHVybiAnIzMzQ0MzMyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdORycpID49IDApIHJldHVybiAnI2MzYzNjMyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdSRVMnKSA+PSAwKSByZXR1cm4gJyNmZmMxMDcnO1xyXG4gICAgZWxzZSBpZiAobGFiZWwuaW5kZXhPZignQXZlcmFnZScpID49IDApIHJldHVybiAnIzlBNTJBNCc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdUb3RhbCcpID49IDApIHJldHVybiAnIzlBNTJBNCc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdTMCcpID49IDApIHJldHVybiAnI0EzMDAwMCc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdTMicpID49IDApIHJldHVybiAnIzAwN0EyOSc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdTMScpID49IDApIHJldHVybiAnIzAwMjlBMyc7XHJcbiAgICBlbHNlIHJldHVybiBSYW5kb21Db2xvcigpO1xyXG59XHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBXaWRnaXQudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzE2LzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvZmlsZShwcm9wczogVHJlbkRBUC5pV2lkZ2V0KSB7XHJcbiAgICByZXR1cm4gPGRpdj5Qcm9maWxlPC9kaXY+O1xyXG59XHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBTdGF0cy50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMTEvMTYvMjAyMCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IHsgU3RhdHMgfSBmcm9tICcuL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBXaWRnZXQsIHsgU2VyaWVzU2VsZWN0IH0gZnJvbSAnLi9XaWRnZXQvV2lkZ2V0JztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvWERBIGZyb20gJy4vV2lkZ2V0L1hEQS9BZGRpdGlvbmFsSW5mbyc7XHJcbmltcG9ydCBBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gZnJvbSAnLi9XaWRnZXQvT3Blbkhpc3Rvcmlhbi9BZGRpdGlvbmFsSW5mbyc7XHJcbmltcG9ydCBBZGRpdGlvbmFsSW5mb1NhcHBoaXJlIGZyb20gJy4vV2lkZ2V0L1NhcHBoaXJlL0FkZGl0aW9uYWxJbmZvJztcclxuXHJcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9yZWFjdC1mb3Jtcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTdGF0c0pTWChwcm9wczogVHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaVN0YXRzPikge1xyXG4gICAgY29uc3QgW3RvZ2dsZSwgc2V0VG9nZ2xlXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICAgIGNvbnN0IFtyZWNvcmQsIHNldFJlY29yZF0gPSBSZWFjdC51c2VTdGF0ZTxTdGF0cz4obmV3IFN0YXRzKHByb3BzKSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBzZXRSZWNvcmQobmV3IFN0YXRzKHsgLi4ucmVjb3JkLCBEYXRhOiBwcm9wcy5EYXRhIH0pKTtcclxuICAgIH0sIFtwcm9wcy5EYXRhXSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHN0YXRzID0gcmVjb3JkLlN0YXRzKCk7XHJcbiAgICBjb25zdCBkYXRhU291cmNlID0gcmVjb3JkLkRhdGEuZmluZChkZCA9PiBkZC5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IHJlY29yZC5KU09OLlNlcmllcz8uRGF0YVNvdXJjZUlELnRvU3RyaW5nKCkgPz8gMCk/LkRhdGEgPz8gW107XHJcbiAgICBjb25zdCBkYXR1bSA9IGRhdGFTb3VyY2UuZmluZChkZCA9PiBkZC5JRC50b1N0cmluZygpID09PSByZWNvcmQuSlNPTi5TZXJpZXM/LklELnRvU3RyaW5nKCkgPz8gMCk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIHN0eWxlPXt7IHdpZHRoOiBwcm9wcy5XaWR0aCwgaGVpZ2h0OiBwcm9wcy5IZWlnaHQsIG1heEhlaWdodDogcHJvcHMuSGVpZ2h0LCBvdmVyZmxvd1k6ICdhdXRvJyB9fT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIiBzdHlsZT17eyBwYWRkaW5nOiAwIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcIndpZGdpdC1sYWJlbFwiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3Byb3BzLkxhYmVsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJidG4gXCIgKyBzdHlsZXNbXCJ3aWRnaXQtY29udHJvbHNcIl19IHRpdGxlPSdXaWRnZXQgU2V0dGluZ3MnIG9uQ2xpY2s9eygpID0+IHNldFRvZ2dsZSh0cnVlKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtY29nXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT0ndGFibGUnPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0aD5DYXRlZ29yeTwvdGg+PHRoPlN0YXRpc3RpYzwvdGg+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge09iamVjdC5rZXlzKHN0YXRzKS5tYXAoKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ1BlcmNlbnRpbGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8dHIga2V5PXtrZXl9Pjx0ZD57a2V5fTwvdGQ+PHRkPntzdGF0c1trZXldfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RhdHMuUGVyY2VudGlsZSkubWFwKHBrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHRyIGtleT17a2V5K3BrZXl9Pjx0ZD57cGtleX10aCBQZXJjZW50aWxlPC90ZD48dGQ+e3N0YXRzLlBlcmNlbnRpbGVbcGtleV19PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8V2lkZ2V0IHsuLi5wcm9wc30gUmVjb3JkPXtyZWNvcmR9IFRvZ2dsZT17dG9nZ2xlfSBTZXRUb2dnbGU9eyhib29sKSA9PiBzZXRUb2dnbGUoYm9vbCl9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaVN0YXRzPj4gRmllbGQ9J0xhYmVsJyBSZWNvcmQ9e3JlY29yZH0gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBTdGF0cyhyKSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5XaWR0aDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtyZWNvcmQ/LldpZHRofSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBTdGF0cyh7IC4uLnJlY29yZCwgV2lkdGg6IHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpIH0pKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBTdGF0cyh7IC4uLnJlY29yZCwgV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoIC0gMjAwIH0pKX0+RnVsbCBXaWR0aDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbCc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlNlcmllczwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImFjY29yZGlvblwiIHN0eWxlPXt7IG92ZXJmbG93WTogJ2F1dG8nLCBtYXhIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDMwMCwgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVjb3JkLkRhdGEubWFwKChkLCBpKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjYXJkLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgaHJlZj17XCIjY29sbGFwc2VcIiArIGl9PntkLkRhdGFTb3VyY2UuTmFtZX08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD17XCJjb2xsYXBzZVwiICsgaX0gY2xhc3NOYW1lPVwiY29sbGFwc2Ugc2hvd1wiIGRhdGEtcGFyZW50PVwiI2FjY29yZGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcmllc1NlbGVjdCBXaWRnZXQ9e3JlY29yZH0gRGF0YVNvdXJjZUlEPXtkLkRhdGFTb3VyY2UuSUR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFN0YXRzKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZC5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgPyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e3JlY29yZC5KU09OLlNlcmllcy5JRH0gY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPnsoZGF0dW0gYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSk/Lk5hbWV9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvWERBIEluZGV4PXtpfSBEYXRhPXtkYXR1bSBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+RmllbGQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17cmVjb3JkLkpTT04uU2VyaWVzLkZpZWxkfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKHJlY29yZC5TZXRTZXJpZXNGaWVsZChldnQudGFyZ2V0LnZhbHVlIGFzIFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkF2ZXJhZ2VcIj5Bdmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWluaW11bVwiPk1pbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNYXhpbXVtXCI+TWF4PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlByZWNpc2lvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPXtyZWNvcmQuSlNPTi5QcmVjaXNpb259IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldFByZWNzaXNpb24ocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJyAmJiByZWNvcmQuSlNPTi5TZXJpZXMgIT0gdW5kZWZpbmVkID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17cmVjb3JkLkpTT04uU2VyaWVzLklEfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+eyhkYXR1bSBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpPy5OYW1lfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb1NhcHBoaXJlIEluZGV4PXtpfSBEYXRhPXtkYXR1bSBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZC5KU09OLlNlcmllcy5GaWVsZH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0U2VyaWVzRmllbGQoZXZ0LnRhcmdldC52YWx1ZSBhcyBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkKSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkF2ZXJhZ2VcIj5Bdmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWF4aW11bVwiPk1heDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlByZWNpc2lvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3JlY29yZC5KU09OLlByZWNpc2lvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0UHJlY3Npc2lvbihwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtyZWNvcmQuSlNPTi5TZXJpZXMuSUR9IGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57KGRhdHVtIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4pPy5EZXNjcmlwdGlvbn08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9PcGVuSGlzdG9yaWFuIERhdGE9e2RhdHVtIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm59IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZC5KU09OLlNlcmllcy5GaWVsZH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0U2VyaWVzRmllbGQoZXZ0LnRhcmdldC52YWx1ZSBhcyBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkKSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkF2ZXJhZ2VcIj5Bdmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWF4aW11bVwiPk1heDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlByZWNpc2lvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3JlY29yZC5KU09OLlByZWNpc2lvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0UHJlY3Npc2lvbihwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L1dpZGdldD5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICApO1xyXG59IiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFRhYmxlLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIwLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAxMS8xNi8yMDIwIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgVGFibGVGb3JtIGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtdGFibGUnO1xyXG5pbXBvcnQgeyBUYWJsZSB9IGZyb20gJy4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IFdpZGdldCwgeyBTZXJpZXNTZWxlY3QgfSBmcm9tICcuL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9YREEgZnJvbSAnLi9XaWRnZXQvWERBL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBmcm9tICcuL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvU2FwcGhpcmUgZnJvbSAnLi9XaWRnZXQvU2FwcGhpcmUvQWRkaXRpb25hbEluZm8nO1xyXG5cclxuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAZ3BhLWdlbXN0b25lL3JlYWN0LWZvcm1zJztcclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IHsgU29ydCB9IGZyb20gJy4uLy4uL1dvcmtTcGFjZXMvV29ya1NwYWNlc1NsaWNlJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRhYmxlSlNYKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pVGFibGU+KSB7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IFJlYWN0LnVzZVN0YXRlPFRhYmxlPihuZXcgVGFibGUocHJvcHMpKTtcclxuICAgIGNvbnN0IFtzb3J0RmllbGQsIHNldFNvcnRGaWVsZF0gPSBSZWFjdC51c2VTdGF0ZTxrZXlvZiBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludD4oJ1RpbWVzdGFtcCcpO1xyXG4gICAgY29uc3QgW2FzY2VuZGluZywgc2V0QXNjZW5kaW5nXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KHRydWUpO1xyXG4gICAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRbXT4oW10pO1xyXG4gICAgY29uc3QgW2luZm8sIHNldEluZm9dID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGU+KHt9IGFzIFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldFJlY29yZChuZXcgVGFibGUoeyAuLi5yZWNvcmQsIERhdGE6IHByb3BzLkRhdGEgfSkpO1xyXG4gICAgfSwgW3Byb3BzLkRhdGFdKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSByZWNvcmQuRGF0YS5maW5kKGRkID0+IGRkLkRhdGFTb3VyY2UuSUQudG9TdHJpbmcoKSA9PT0gcmVjb3JkLkpTT04uU2VyaWVzPy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSA/PyAwKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICBjb25zdCBkYXR1bSA9IGRhdGFTb3VyY2UuZmluZChkZCA9PiBkZC5JRC50b1N0cmluZygpID09PSByZWNvcmQuSlNPTi5TZXJpZXM/LklELnRvU3RyaW5nKCkgPz8gMCk7XHJcbiAgICAgICAgaWYgKGRhdHVtID09IHVuZGVmaW5lZCkgc2V0SW5mbyh7fSBhcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSApO1xyXG4gICAgICAgIGVsc2Ugc2V0SW5mbyhkYXR1bSBhcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSk7XHJcbiAgICB9LCBbcmVjb3JkXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JkZXJlZCA9IF8ub3JkZXJCeShpbmZvPy5EYXRhID8/IFtdLCBbc29ydEZpZWxkXSwgW2FzY2VuZGluZyA/ICdhc2MnIDogJ2Rlc2MnXSlcclxuICAgICAgICBzZXREYXRhKG9yZGVyZWQpO1xyXG4gICAgfSwgW2FzY2VuZGluZyxzb3J0RmllbGQsaW5mb10pXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCIgc3R5bGU9e3sgd2lkdGg6IHByb3BzLldpZHRoLCBoZWlnaHQ6IHByb3BzLkhlaWdodCwgbWF4SGVpZ2h0OiBwcm9wcy5IZWlnaHQsIG92ZXJmbG93WTogJ2F1dG8nIH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wid2lkZ2l0LWxhYmVsXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMuTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImJ0biBcIiArIHN0eWxlc1tcIndpZGdpdC1jb250cm9sc1wiXX0gdGl0bGU9J1dpZGdldCBTZXR0aW5ncycgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKHRydWUpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8VGFibGVGb3JtPFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50PiB0YWJsZUNsYXNzPSd0YWJsZScgY29scz17W1xyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnVGltZXN0YW1wJywgZmllbGQ6ICdUaW1lc3RhbXAnLGxhYmVsOiAnVGltZXN0YW1wJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnTWluaW11bScsIGZpZWxkOiAnTWluaW11bScsIGxhYmVsOiAnTWluJywgY29udGVudDogKGl0ZW0sa2V5LCBzdHlsZSkgPT4gaXRlbT8uTWluaW11bS50b0ZpeGVkKHJlY29yZC5KU09OLlByZWNpc2lvbikgPz8gJyd9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnQXZlcmFnZScsIGZpZWxkOiAnQXZlcmFnZScsIGxhYmVsOiAnQXZnJywgY29udGVudDogKGl0ZW0sIGtleSwgc3R5bGUpID0+IGl0ZW0/LkF2ZXJhZ2UudG9GaXhlZChyZWNvcmQuSlNPTi5QcmVjaXNpb24pID8/ICcnfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ01heGltdW0nLCBmaWVsZDogJ01heGltdW0nLCBsYWJlbDogJ01heCcsIGNvbnRlbnQ6IChpdGVtLCBrZXksIHN0eWxlKSA9PiBpdGVtPy5NYXhpbXVtLnRvRml4ZWQocmVjb3JkLkpTT04uUHJlY2lzaW9uKSA/PyAnJ30sXHJcbiAgICAgICAgICAgICAgICBdfSBkYXRhPXtkYXRhfSBzb3J0S2V5PXtzb3J0RmllbGR9IG9uQ2xpY2s9eyhkYXRhKSA9PiB7IH19IGFzY2VuZGluZz17YXNjZW5kaW5nfSBvblNvcnQ9eyhkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY29sRmllbGQgPT09IHNvcnRGaWVsZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0QXNjZW5kaW5nKCFhc2NlbmRpbmcpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFNvcnRGaWVsZChkYXRhLmNvbEZpZWxkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRBc2NlbmRpbmcodHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9fSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxXaWRnZXQgey4uLnByb3BzfSBSZWNvcmQ9e3JlY29yZH0gVG9nZ2xlPXt0b2dnbGV9IFNldFRvZ2dsZT17KGJvb2wpID0+IHNldFRvZ2dsZShib29sKX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pU3RhdHM+PiBGaWVsZD0nTGFiZWwnIFJlY29yZD17cmVjb3JkfSBUeXBlPSd0ZXh0JyBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQobmV3IFRhYmxlKHIpKX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPldpZHRoPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZD8uV2lkdGh9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IFRhYmxlKHsgLi4ucmVjb3JkLCBXaWR0aDogcGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkgfSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IFRhYmxlKHsgLi4ucmVjb3JkLCBXaWR0aDogd2luZG93LmlubmVyV2lkdGggLSAyMDAgfSkpfT5GdWxsIFdpZHRoPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sJz5cclxuICAgICAgICAgICAgICAgICAgICA8aDY+U2VyaWVzPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYWNjb3JkaW9uXCIgc3R5bGU9e3sgb3ZlcmZsb3dZOiAnYXV0bycsIG1heEhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gMzAwLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAvIDIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNvcmQuRGF0YS5tYXAoKGQsIGkpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNhcmQtbGlua1wiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiBocmVmPXtcIiNjb2xsYXBzZVwiICsgaX0+e2QuRGF0YVNvdXJjZS5OYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPXtcImNvbGxhcHNlXCIgKyBpfSBjbGFzc05hbWU9XCJjb2xsYXBzZSBzaG93XCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzU2VsZWN0IFdpZGdldD17cmVjb3JkfSBEYXRhU291cmNlSUQ9e2QuRGF0YVNvdXJjZS5JRH0gQ2FsbGJhY2s9eygpID0+IHNldFJlY29yZChuZXcgVGFibGUocmVjb3JkKSl9ICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZC5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtyZWNvcmQuSlNPTi5TZXJpZXMuSUR9IGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57KGluZm8gYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSk/Lk5hbWUgPz8gJyd9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvWERBIEluZGV4PXtpfSBEYXRhPXsoaW5mbyBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlByZWNpc2lvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3JlY29yZC5KU09OLlByZWNpc2lvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0UHJlY3Npc2lvbihwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2QuRGF0YVNvdXJjZS5UeXBlID09PSAnU2FwcGhpcmUnICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtyZWNvcmQuSlNPTi5TZXJpZXMuSUR9IGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57KGluZm8gYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKT8uTmFtZSA/PyAnJ308L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9TYXBwaGlyZSBJbmRleD17aX0gRGF0YT17KGluZm8gYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlByZWNpc2lvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3JlY29yZC5KU09OLlByZWNpc2lvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0UHJlY3Npc2lvbihwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtyZWNvcmQuSlNPTi5TZXJpZXMuSUR9IGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57KGluZm8gYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybik/LkRlc2NyaXB0aW9uID8/ICcnfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gRGF0YT17KGluZm8gYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybil9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5QcmVjaXNpb248L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPXtyZWNvcmQuSlNPTi5QcmVjaXNpb259IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldFByZWNzaXNpb24ocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9XaWRnZXQ+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufSIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBUZXh0LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIwLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAxMS8xNi8yMDIwIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgeyBUZXh0IH0gZnJvbSAnLi9JbXBsZW1lbnRhdGlvbnMnO1xyXG5pbXBvcnQgV2lkZ2V0IGZyb20gJy4vV2lkZ2V0L1dpZGdldCc7XHJcbmltcG9ydCB7IElucHV0LCBUZXh0QXJlYSB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGV4dEpTWChwcm9wczogVHJlbkRBUC5pV2lkZ2V0PFRyZW5EQVAuaVRleHQ+KSB7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IFJlYWN0LnVzZVN0YXRlPFRleHQ+KG5ldyBUZXh0KHByb3BzKSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBzdHlsZT17eyB3aWR0aDogcHJvcHMuV2lkdGgsIGhlaWdodDogcHJvcHMuSGVpZ2h0IH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wid2lkZ2l0LWxhYmVsXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMuTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImJ0biBcIiArIHN0eWxlc1tcIndpZGdpdC1jb250cm9sc1wiXX0gdGl0bGU9J1dpZGdldCBTZXR0aW5ncycgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKHRydWUpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8cCBzdHlsZT17e3Bvc2l0aW9uOiAncmVsYXRpdmUnLCB0b3A6IDMwfX0+e3Byb3BzLkpTT04uVGV4dCB9PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxXaWRnZXQgey4uLnByb3BzfSBSZWNvcmQ9e3JlY29yZH0gVG9nZ2xlPXt0b2dnbGV9IFNldFRvZ2dsZT17KGJvb2wpID0+IHNldFRvZ2dsZShib29sKX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pVGV4dD4+IEZpZWxkPSdMYWJlbCcgUmVjb3JkPXtyZWNvcmR9IFR5cGU9J3RleHQnIFNldHRlcj17KHIpID0+IHNldFJlY29yZChuZXcgVGV4dChyKSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5XaWR0aDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtyZWNvcmQ/LldpZHRofSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBUZXh0KHsgLi4ucmVjb3JkLCBXaWR0aDogcGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkgfSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IFRleHQoeyAuLi5yZWNvcmQsIFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCAtIDIwMCB9KSl9PkZ1bGwgV2lkdGg8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0QXJlYTxUcmVuREFQLmlUZXh0PiBSZWNvcmQ9e3JlY29yZC5KU09OfSBGaWVsZD1cIlRleHRcIiBSb3dzPXsxMH0gU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBUZXh0KHsgLi4ucmVjb3JkLCBKU09OOiB7IC4uLnIgfSB9KSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9XaWRnZXQ+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufSIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBBeGlzLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMi8xNy8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQLCBSZWR1eCB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCB7IFRyZW5kIH0gZnJvbSAnLi4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAZ3BhLWdlbXN0b25lL3JlYWN0LWZvcm1zJztcclxuaW1wb3J0IHsgQ3Jvc3NNYXJrIH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9ncGEtc3ltYm9scyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBeGlzIChwcm9wczogeyBJbmRleDogbnVtYmVyLCBBeGlzOiBUcmVuREFQLmlZQXhpcywgV2lkZ2V0OiBUcmVuZCwgQ2FsbGJhY2s6ICgpID0+IHZvaWQgfSl7XHJcbiAgICBjb25zdCBmaXJzdFJlbmRlciA9IFJlYWN0LnVzZVJlZih0cnVlKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcnN0UmVuZGVyLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICAvL2NvbnN0IFtiaW5zLCBzZXRCaW5zXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4ocHJvcHMuU2VyaWVzPy5CaW5Db3VudCA/PyAxMCk7XHJcbiAgICBjb25zdCBbdW5pdHMsIHNldFVuaXRzXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4ocHJvcHMuQXhpcy5Vbml0cyk7XHJcbiAgICBjb25zdCBbcG9zaXRpb24sIHNldFBvc2l0aW9uXSA9IFJlYWN0LnVzZVN0YXRlPCdsZWZ0JyB8ICdyaWdodCc+KHByb3BzLkF4aXMuUG9zaXRpb24pO1xyXG4gICAgY29uc3QgW21pbiwgc2V0TWluXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4ocHJvcHMuQXhpcy5NaW4pO1xyXG4gICAgY29uc3QgW21heCwgc2V0TWF4XSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4ocHJvcHMuQXhpcy5NYXgpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFJlbmRlci5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVBeGlzKHByb3BzLkluZGV4LCBcIlVuaXRzXCIsIHVuaXRzKTtcclxuICAgICAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdW5pdHNdKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFJlbmRlci5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVBeGlzKHByb3BzLkluZGV4LCBcIlBvc2l0aW9uXCIsIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbcG9zaXRpb25dKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFJlbmRlci5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVBeGlzKHByb3BzLkluZGV4LCBcIk1heFwiLCBtYXgpO1xyXG4gICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9LCBbbWF4XSk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICghZmlyc3RSZW5kZXIuY3VycmVudCkge1xyXG4gICAgICAgICAgICBwcm9wcy5XaWRnZXQuVXBkYXRlQXhpcyhwcm9wcy5JbmRleCwgXCJNaW5cIiwgbWluKTtcclxuICAgICAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbbWluXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMlwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsPlBvc2l0aW9uPC9sYWJlbD5cclxuXHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtwb3NpdGlvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFBvc2l0aW9uKGV2dC50YXJnZXQudmFsdWUgYXMgKCdsZWZ0JyB8ICdyaWdodCcpKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImxlZnRcIj5MZWZ0PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJpZ2h0XCI+UmlnaHQ8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlZQXhpcz4gRmllbGQ9J1VuaXRzJyBSZWNvcmQ9e3Byb3BzLkF4aXN9IFR5cGU9J3RleHQnIFNldHRlcj17KHIpID0+IHNldFVuaXRzKHIuVW5pdHMpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMlwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaVlBeGlzPiBGaWVsZD0nTWluJyBMYWJlbD0nTWluJyBSZWNvcmQ9e3Byb3BzLkF4aXN9IFR5cGU9J251bWJlcicgU2V0dGVyPXsocikgPT4gc2V0TWluKHIuTWluKX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIj5cclxuICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlZQXhpcz4gRmllbGQ9J01heCcgUmVjb3JkPXtwcm9wcy5BeGlzfSBUeXBlPSdudW1iZXInIFNldHRlcj17KHIpID0+IHNldE1heChyLk1heCl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0yXCIgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgYm90dG9tOiAxNiB9fSB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLldpZGdldC5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3knLCBwcm9wcy5JbmRleClcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfX0+VXNlIERhdGE8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGlua1wiIHN0eWxlPXt7IHRvcDogMzAgfX0gb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLldpZGdldC5SZW1vdmVBeGlzKHByb3BzLkluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9fT57Q3Jvc3NNYXJrfTwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59XHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBTZXJpZXNQaWNrZXIudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjEsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDAyLzE3LzIwMjEgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgeyBDaGVja0JveCB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5cclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvWERBIGZyb20gJy4uL1dpZGdldC9YREEvQWRkaXRpb25hbEluZm8nO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9PcGVuSGlzdG9yaWFuIGZyb20gJy4uL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvU2FwcGhpcmUgZnJvbSAnLi4vV2lkZ2V0L1NhcHBoaXJlL0FkZGl0aW9uYWxJbmZvJztcclxuXHJcbmltcG9ydCB7IENyb3NzTWFyayB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvZ3BhLXN5bWJvbHMnO1xyXG5pbXBvcnQgeyBUcmVuZCB9IGZyb20gJy4uL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBcInJlYWN0LWRhdGV0aW1lL2Nzcy9yZWFjdC1kYXRldGltZS5jc3NcIjtcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvIGZyb20gJy4uL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNlcmllc1BpY2tlcihwcm9wczogeyBJbmRleDogbnVtYmVyLCBUeXBlOiBUcmVuREFQLkRhdGFTb3VyY2VUeXBlLCBTZXJpZXM6IFRyZW5EQVAuaVRyZW5kU2VyaWVzLCBEYXRhOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSwgV2lkZ2V0OiBUcmVuZCwgQ2FsbGJhY2s6ICgpID0+IHZvaWQgfSl7XHJcbiAgICBjb25zdCBbYXhpcywgc2V0QXhpc10gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KHByb3BzLlNlcmllcy5BeGlzKTtcclxuICAgIGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihwcm9wcy5TZXJpZXMuQ29sb3IpO1xyXG4gICAgY29uc3QgW3R5cGUsIHNldFR5cGVdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZD4ocHJvcHMuU2VyaWVzLkZpZWxkKTtcclxuICAgIGNvbnN0IFtzaG93RXZlbnRzLCBzZXRTaG93RXZlbnRzXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KHByb3BzLlNlcmllcy5TaG93RXZlbnRzKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgcHJvcHMuV2lkZ2V0LlVwZGF0ZVNlcmllcyhwcm9wcy5JbmRleCwgXCJDb2xvclwiLCBjb2xvcik7XHJcbiAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgIH0sIFtjb2xvcl0pO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBwcm9wcy5XaWRnZXQuVXBkYXRlU2VyaWVzKHByb3BzLkluZGV4LCBcIkZpZWxkXCIsIHR5cGUpO1xyXG4gICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICB9LCBbdHlwZV0pO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBwcm9wcy5XaWRnZXQuVXBkYXRlU2VyaWVzKHByb3BzLkluZGV4LCBcIlNob3dFdmVudHNcIiwgc2hvd0V2ZW50cyk7XHJcbiAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgIH0sIFtzaG93RXZlbnRzXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBwcm9wcy5XaWRnZXQuVXBkYXRlU2VyaWVzKHByb3BzLkluZGV4LCBcIkF4aXNcIiwgYXhpcyk7XHJcbiAgICAgICAgcHJvcHMuV2lkZ2V0LkNhbGN1bGF0ZUF4aXNSYW5nZSgneScpO1xyXG4gICAgICAgIHByb3BzLldpZGdldC5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3gnKTtcclxuICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgfSwgW2F4aXNdKTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gU2hvd0FkZGl0aW9uSW5mbygpIHtcclxuICAgICAgICBpZiAocHJvcHMuVHlwZSA9PT0gJ1RyZW5EQVBEQicpXHJcbiAgICAgICAgICAgIHJldHVybiA8QWRkaXRpb25hbEluZm9YREEgSW5kZXg9e3Byb3BzLkluZGV4fSBEYXRhPXtwcm9wcy5EYXRhIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGF9IC8+O1xyXG4gICAgICAgIGVsc2UgaWYgKHByb3BzLlR5cGUgPT09ICdTYXBwaGlyZScpXHJcbiAgICAgICAgICAgIHJldHVybiA8QWRkaXRpb25hbEluZm9TYXBwaGlyZSBJbmRleD17cHJvcHMuSW5kZXh9IERhdGE9e3Byb3BzLkRhdGEgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YX0gLz47XHJcbiAgICAgICAgZWxzZSBpZiAocHJvcHMuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKVxyXG4gICAgICAgICAgICByZXR1cm4gPEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBEYXRhPXtwcm9wcy5EYXRhIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm59IC8+O1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTNcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+e3Byb3BzLlNlcmllcy5MYWJlbH08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIHtTaG93QWRkaXRpb25JbmZvKCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+RmllbGQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3R5cGV9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRUeXBlKGV2dC50YXJnZXQudmFsdWUgYXMgVHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZCl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQXZlcmFnZVwiPkF2Zzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWluaW11bVwiPk1pbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWF4aW11bVwiPk1heDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+WUF4aXM8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e2F4aXN9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRBeGlzKHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5XaWRnZXQuSlNPTi5ZQXhpcy5tYXAoKGF4aXMsIGluZGV4KSA9PiA8b3B0aW9uIHZhbHVlPXtpbmRleH0ga2V5PXtpbmRleH0+e2F4aXMuVW5pdHN9PC9vcHRpb24+KX1cclxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPkNvbG9yPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNvbG9yXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e2NvbG9yfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0Q29sb3IoZXZ0LnRhcmdldC52YWx1ZSl9IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTFcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGlua1wiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlJlbW92ZVNlcmllcyhwcm9wcy5JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfX0+e0Nyb3NzTWFya308L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgeyhwcm9wcy5UeXBlID09PSAnVHJlbkRBUERCJyAmJiAocHJvcHMuRGF0YSBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5FdmVudHMubGVuZ3RoID4gMCA/XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrQm94PFRyZW5EQVAuaVRyZW5kU2VyaWVzPiBSZWNvcmQ9e3Byb3BzLlNlcmllc30gRmllbGQ9J1Nob3dFdmVudHMnIExhYmVsPSdTaG93IEV2ZW50cycgU2V0dGVyPXsocikgPT4gc2V0U2hvd0V2ZW50cyghc2hvd0V2ZW50cyl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDogbnVsbClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIDwvPlxyXG5cclxuICAgICk7XHJcbn1cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFRyZW5kLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIwLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAxMS8xMy8yMDIwIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uLy4uLy4uLy4uL1N0eWxlcy9hcHAuc2Nzcyc7XHJcbmltcG9ydCB7IElucHV0LCBTZWxlY3QgfSBmcm9tICdAZ3BhLWdlbXN0b25lL3JlYWN0LWZvcm1zJztcclxuXHJcbmltcG9ydCBXaWRnZXQsIHsgU2VyaWVzU2VsZWN0IH0gZnJvbSAnLi4vV2lkZ2V0L1dpZGdldCc7XHJcbmltcG9ydCB7IENyb3NzTWFyaywgUGx1cyB9IGZyb20gJy4uLy4uLy4uLy4uL0NvbnN0YW50cyc7XHJcbmltcG9ydCB7IFRyZW5kIH0gZnJvbSAnLi4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgRGF0ZXRpbWUgZnJvbSAncmVhY3QtZGF0ZXRpbWUnO1xyXG5pbXBvcnQgXCJyZWFjdC1kYXRldGltZS9jc3MvcmVhY3QtZGF0ZXRpbWUuY3NzXCI7XHJcbmltcG9ydCBTd2l0Y2hCdXR0b24gZnJvbSAnYm9vdHN0cmFwLXN3aXRjaC1idXR0b24tcmVhY3QnO1xyXG5pbXBvcnQgeyBTd2l0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgQXhpcyBmcm9tICcuL0F4aXMnO1xyXG5pbXBvcnQgU2VyaWVzUGlja2VyIGZyb20gJy4vU2VyaWVzUGlja2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRyZW5kSlNYKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pVHJlbmQ+KSB7XHJcbiAgICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IFJlYWN0LnVzZVN0YXRlPFRyZW5kPihuZXcgVHJlbmQocHJvcHMpKTtcclxuICAgIGNvbnN0IGhvdmVyID0gUmVhY3QudXNlUmVmPG51bWJlcj4oLTEwKTtcclxuICAgIGNvbnN0IHN2Z3MgPSBSZWFjdC51c2VSZWY8ZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD5bXT4oW10pO1xyXG4gICAgY29uc3QgbWFyZ2luID0gUmVhY3QudXNlUmVmPHsgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgdG9wOiBudW1iZXIsIHJpZ2h0OiBudW1iZXIgfT4oeyBib3R0b206IDUwLCBsZWZ0OiA1MCwgdG9wOiA0MCwgcmlnaHQ6IDUwIH0pO1xyXG4gICAgY29uc3QgW2NoYXJ0QWN0aW9uLCBzZXRDaGFydEFjdGlvbl0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLkNoYXJ0QWN0aW9uPignUGFuJyk7XHJcbiAgICBjb25zdCBjaGFydEFjdGlvblJlZiA9IFJlYWN0LnVzZVJlZjxUcmVuREFQLkNoYXJ0QWN0aW9uPignUGFuJyk7XHJcbiAgICBjb25zdCBzZXRIb3ZlciA9IFJlYWN0LnVzZUNhbGxiYWNrKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIEhhbmRsZUhvdmVyVXBkYXRlKHZhbHVlKTtcclxuICAgIH0sIFtdKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFJlY29yZChuZXcgVHJlbmQocHJvcHMpKTtcclxuICAgICAgICB9LCBbcHJvcHNdKTtcclxuXHJcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgY2hhcnRBY3Rpb25SZWYuY3VycmVudCA9IGNoYXJ0QWN0aW9uO1xyXG4gICAgICAgIH0sIFtjaGFydEFjdGlvbl0pO1xyXG5cclxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBJbml0aWFsaXplKHJlY29yZClcclxuICAgICAgICB9LCBbcmVjb3JkXSlcclxuXHJcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgc2V0UmVjb3JkKG5ldyBUcmVuZCh7IC4uLnJlY29yZCwgSGVpZ2h0OiBwcm9wcy5IZWlnaHQgfSkpXHJcbiAgICAgICAgfSwgW3Byb3BzLkhlaWdodF0pXHJcblxyXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFJlY29yZChuZXcgVHJlbmQoeyAuLi5yZWNvcmQsIERhdGE6IHByb3BzLkRhdGEgfSkpO1xyXG4gICAgICAgIH0sIFtwcm9wcy5EYXRhXSk7XHJcblxyXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7IGQzLnNlbGVjdChyZWYuY3VycmVudCkuc2VsZWN0QWxsKCdzdmcnKS5yZW1vdmUoKTsgfVxyXG4gICAgICAgIH0sIFtdKTtcclxuXHJcblxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEluaXRpYWxpemUoc2V0dGluZ3M6IFRyZW5kKSB7XHJcbiAgICAgICAgbGV0IHN2Z0NvdW50ID0gMTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5TcGxpdCAmJiBzZXR0aW5ncy5KU09OLlNwbGl0VHlwZSA9PT0gJ0F4aXMnKSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi5jdXJyZW50ID0geyBib3R0b206IDUwLCBsZWZ0OiA1MCwgdG9wOiA0MCwgcmlnaHQ6IDUwIH07XHJcbiAgICAgICAgICAgIHN2Z0NvdW50ID0gc2V0dGluZ3MuSlNPTi5ZQXhpcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNldHRpbmdzLkpTT04uU3BsaXQgJiYgc2V0dGluZ3MuSlNPTi5TcGxpdFR5cGUgPT09ICdTZXJpZXMnKSB7XHJcbiAgICAgICAgICAgIG1hcmdpbi5jdXJyZW50ID0geyBib3R0b206IDUwLCBsZWZ0OiA1MCwgdG9wOiA0MCwgcmlnaHQ6IDUwIH1cclxuICAgICAgICAgICAgc3ZnQ291bnQgPSBzZXR0aW5ncy5KU09OLlNlcmllcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgbWFyZ2luLmN1cnJlbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBib3R0b206IDUwLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogKHNldHRpbmdzLkpTT04uWUF4aXMuZmlsdGVyKGF4aXMgPT4gYXhpcy5Qb3NpdGlvbiA9PT0gJ2xlZnQnKS5sZW5ndGggPT0gMCA/IDUwIDogc2V0dGluZ3MuSlNPTi5ZQXhpcy5maWx0ZXIoYXhpcyA9PiBheGlzLlBvc2l0aW9uID09PSAnbGVmdCcpLmxlbmd0aCAqIDUwKSxcclxuICAgICAgICAgICAgICAgIHRvcDogNDAsXHJcbiAgICAgICAgICAgICAgICByaWdodDogKHNldHRpbmdzLkpTT04uWUF4aXMuZmlsdGVyKGF4aXMgPT4gYXhpcy5Qb3NpdGlvbiA9PT0gJ3JpZ2h0JykubGVuZ3RoID09IDAgPyA1MCA6IHNldHRpbmdzLkpTT04uWUF4aXMuZmlsdGVyKGF4aXMgPT4gYXhpcy5Qb3NpdGlvbiA9PT0gJ3JpZ2h0JykubGVuZ3RoICogNTApXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChzZXR0aW5ncy5KU09OLkxlZ2VuZCkgbWFyZ2luLmN1cnJlbnQucmlnaHQgPSBtYXJnaW4uY3VycmVudC5yaWdodCArIDIwMDtcclxuXHJcbiAgICAgICAgY29uc3Qgc3ZnSGVpZ2h0ID0gcHJvcHMuSGVpZ2h0IC8gc3ZnQ291bnQ7XHJcblxyXG4gICAgICAgIGlmIChzdmdzLmN1cnJlbnQubGVuZ3RoICE9PSBzdmdDb3VudCkge1xyXG4gICAgICAgICAgICBzdmdzLmN1cnJlbnQgPSBbXTtcclxuICAgICAgICAgICAgZDMuc2VsZWN0KHJlZi5jdXJyZW50KS5zZWxlY3RBbGwoJ3N2ZycpLnJlbW92ZSgpXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ZnQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHJlZi5jdXJyZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgc2V0dGluZ3MuV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHN2Z0hlaWdodClcclxuICAgICAgICAgICAgICAgIHN2Z3MuY3VycmVudC5wdXNoKHN2Zyk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSBHZXRYU2NhbGUoc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICBcclxuICAgICAgICBzdmdzLmN1cnJlbnQuZm9yRWFjaCgoc3ZnLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5KU09OLlNwbGl0ICYmIHNldHRpbmdzLkpTT04uU3BsaXRUeXBlID09PSAnQXhpcycpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5pdGlhbGl6ZVNwbGl0T25BeGlzKHNldHRpbmdzLCBzdmcsIHgsIGkpO1xyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5TcGxpdCAmJiBzZXR0aW5ncy5KU09OLlNwbGl0VHlwZSA9PT0gJ1NlcmllcycpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5pdGlhbGl6ZVNwbGl0T25TZXJpZXMoc2V0dGluZ3MsIHN2ZywgeCwgaSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBJbml0aWFsaXplTm90U3BsaXQoc2V0dGluZ3MsIHN2ZywgeCk7XHJcbiAgICAgICAgfSk7ICAgICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBJbml0aWFsaXplU3BsaXRPblNlcmllcyhzZXR0aW5nczogVHJlbmQsIHN2ZywgeDogZDMuU2NhbGVUaW1lPG51bWJlciwgbnVtYmVyPiwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3Qgc3ZnSGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gc2V0dGluZ3MuSlNPTi5TZXJpZXNbaV07XHJcbiAgICAgICAgY29uc3QgYXhpcyA9IHNldHRpbmdzLkpTT04uWUF4aXNbc2VyaWVzLkF4aXNdO1xyXG4gICAgICAgIGNvbnN0IGZpZWxkID0gc2VyaWVzLkZpZWxkO1xyXG5cclxuICAgICAgICBBZGRYQXhpcyhzdmcsIHgpO1xyXG5cclxuICAgICAgICBjb25zdCB5ID0gR2V0WVNjYWxlKHN2Z0hlaWdodCwgYXhpcyk7XHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy55YXhpcycpLnJlbW92ZSgpO1xyXG4gICAgICAgIEFkZFlBeGlzTGVmdChheGlzLCBzdmcsIHkpO1xyXG5cclxuICAgICAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSAoKHJlY29yZC5EYXRhLmZpbmQoZHMgPT4gZHMuRGF0YVNvdXJjZS5JRC50b1N0cmluZygpID09PSBzZXJpZXMuRGF0YVNvdXJjZUlELnRvU3RyaW5nKCkpPy5EYXRhID8/IFtdKS5maW5kKGRzID0+IGRzLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRC50b1N0cmluZygpKT8uRGF0YSA/PyBbXSkuZmlsdGVyKGRzID0+IG1vbWVudChkcy5UaW1lc3RhbXApLnRvRGF0ZSgpLmdldFRpbWUoKSA+PSBzZXR0aW5ncy5KU09OLk1pbiAmJiBtb21lbnQoZHMuVGltZXN0YW1wKS50b0RhdGUoKS5nZXRUaW1lKCkgPD0gc2V0dGluZ3MuSlNPTi5NYXggJiYgZHNbZmllbGRdID49IGF4aXMuTWluICYmIGRzW2ZpZWxkXSA8PSBheGlzLk1heClcclxuICAgICAgICBjb25zdCBsaW5lRnVuYyA9IGQzLmxpbmU8VHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnQ+KCkueChkZCA9PiB4KG1vbWVudChkZC5UaW1lc3RhbXAsICdZWVlZLU1NLUREVEhIOm1tOnNzLmZmZlonKSkpLnkoZGQgPT4geShkZFtzZXJpZXMuRmllbGRdKSk7XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxpbmVcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy5saW5lJylcclxuICAgICAgICAgICAgLmRhdGEoW2ZpbHRlcmVkRGF0YV0gYXMgVHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRbXVtdKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmNsYXNzZWQoJ2xpbmUnLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgc2VyaWVzLkNvbG9yKVxyXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgKGQpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsaW5lRnVuYyhkKVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoc2VyaWVzLlNob3dFdmVudHMpIHtcclxuICAgICAgICAgICAgQWRkRXZlbnRMaW5lKHNlcmllcywgc3ZnLCB4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxlZ2VuZFwiKS5yZW1vdmUoKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5MZWdlbmQpIHtcclxuICAgICAgICAgICAgQWRkTGVnZW5kKHN2ZywgW3Nlcmllc10pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3ZnLm9uKCdtb3VzZW1vdmUnLCAoZDogTW91c2VFdmVudCkgPT4gc2V0SG92ZXIoZC5vZmZzZXRYKSk7XHJcbiAgICAgICAgc3ZnLm9uKCdtb3VzZWRvd24nLCAoZDogTW91c2VFdmVudCkgPT4gSGFuZGxlQ2hhcnRBY3Rpb24oZCwgc3ZnLCB4KSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEluaXRpYWxpemVTcGxpdE9uQXhpcyhzZXR0aW5nczogVHJlbmQsIHN2ZywgeDogZDMuU2NhbGVUaW1lPG51bWJlciwgbnVtYmVyPiwgaTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBzZXR0aW5ncy5KU09OLllBeGlzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBzZXR0aW5ncy5KU09OLlNlcmllcy5maWx0ZXIoKHMpID0+IHMuQXhpcyA9PT0gaSkubWFwKHMgPT4gKHtcclxuICAgICAgICAgICAgICAgIC4uLnMsXHJcbiAgICAgICAgICAgICAgICBEYXRhOiAoKHJlY29yZC5EYXRhLmZpbmQoZHMgPT4gZHMuRGF0YVNvdXJjZS5JRC50b1N0cmluZygpID09PSBzLkRhdGFTb3VyY2VJRC50b1N0cmluZygpKT8uRGF0YSA/PyBbXSkuZmluZChkcyA9PiBkcy5JRC50b1N0cmluZygpID09PSBzLklELnRvU3RyaW5nKCkpPy5EYXRhID8/IFtdKS5maWx0ZXIoZHMgPT4gbW9tZW50KGRzLlRpbWVzdGFtcCkudG9EYXRlKCkuZ2V0VGltZSgpID49IHNldHRpbmdzLkpTT04uTWluICYmIG1vbWVudChkcy5UaW1lc3RhbXApLnRvRGF0ZSgpLmdldFRpbWUoKSA8PSBzZXR0aW5ncy5KU09OLk1heCAmJiBkc1tzLkZpZWxkXSA+PSBheGlzLk1pbiAmJiBkc1tzLkZpZWxkXSA8PSBheGlzLk1heCkubWFwKHBvaW50ID0+IFtwb2ludC5UaW1lc3RhbXAsIHBvaW50W3MuRmllbGRdXSlcclxuICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgQWRkWEF4aXMoc3ZnLCB4KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBHZXRZU2NhbGUoc3ZnSGVpZ2h0LCBheGlzKTtcclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy55YXhpcycpLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBBZGRZQXhpc0xlZnQoYXhpcywgc3ZnLCB5KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmVGdW5jID0gZDMubGluZTxbc3RyaW5nLCBudW1iZXJdPigpLngoZGQgPT4geChtb21lbnQoZGRbMF0sICdZWVlZLU1NLUREVEhIOm1tOnNzLmZmZlonKSkpLnkoZGQgPT4geShkZFsxXSkpO1xyXG5cclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChcImcubGluZVwiKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbChcImcubGluZVwiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoc2VyaWVzKVxyXG4gICAgICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2xpbmUnLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIChzKSA9PiBzLkNvbG9yKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIChzKSA9PiBsaW5lRnVuYyhzLkRhdGEgYXMgW3N0cmluZywgbnVtYmVyXVtdKSlcclxuXHJcbiAgICAgICAgICAgIHNlcmllcy5mb3JFYWNoKHMgPT4gQWRkRXZlbnRMaW5lKHMsc3ZnLCB4KSlcclxuXHJcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxlZ2VuZFwiKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLkpTT04uTGVnZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBBZGRMZWdlbmQoc3ZnLCBzZXJpZXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgc3ZnLm9uKCdtb3VzZW1vdmUnLCAoZDogTW91c2VFdmVudCkgPT4gc2V0SG92ZXIoZC5vZmZzZXRYKSk7XHJcbiAgICAgICAgICAgIHN2Zy5vbignbW91c2Vkb3duJywgKGQ6IE1vdXNlRXZlbnQpID0+IEhhbmRsZUNoYXJ0QWN0aW9uKGQsIHN2ZywgeCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEluaXRpYWxpemVOb3RTcGxpdChzZXR0aW5nczogVHJlbmQsIHN2ZzogZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD4sIHg6IGQzLlNjYWxlVGltZTxudW1iZXIsIG51bWJlcj4pIHtcclxuICAgICAgICBBZGRYQXhpcyhzdmcsIHgpO1xyXG4gICAgICAgIGNvbnN0IHkgPSBzZXR0aW5ncy5KU09OLllBeGlzLm1hcChheGlzID0+IEdldFlTY2FsZShzZXR0aW5ncy5IZWlnaHQsIGF4aXMpKTtcclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy55YXhpcycpLnJlbW92ZSgpO1xyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc2V0dGluZ3MuSlNPTi5ZQXhpcy5tYXAoKGF4aXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBhO1xyXG4gICAgICAgICAgICBpZiAoYXhpcy5Qb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kID0gc2V0dGluZ3MuSlNPTi5ZQXhpcy5maWx0ZXIoYXhpcyA9PiBheGlzLlBvc2l0aW9uID09PSAnbGVmdCcpLmZpbmRJbmRleChheGlzID0+IGF4aXMgPT09IHNldHRpbmdzLkpTT04uWUF4aXNbaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIEFkZFlBeGlzTGVmdChheGlzLCBzdmcsIHlbaW5kZXhdLCBmYWxzZSwgaW5kKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbmQgPSBzZXR0aW5ncy5KU09OLllBeGlzLmZpbHRlcihheGlzID0+IGF4aXMuUG9zaXRpb24gPT09ICdyaWdodCcpLmZpbmRJbmRleChheGlzID0+IGF4aXMgPT09IHNldHRpbmdzLkpTT04uWUF4aXNbaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIEFkZFlBeGlzUmlnaHQoYXhpcywgc3ZnLCB5W2luZGV4XSwgaW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwiZy5sZWdlbmRcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLkpTT04uTGVnZW5kKSB7XHJcbiAgICAgICAgICAgIEFkZExlZ2VuZChzdmcsIHNldHRpbmdzLkpTT04uU2VyaWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxpbmVcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbChcImcubGluZVwiKVxyXG4gICAgICAgICAgICAuZGF0YShzZXR0aW5ncy5KU09OLlNlcmllcylcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmNsYXNzZWQoXCJsaW5lXCIsIHRydWUpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxyXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCAoZDogVHJlbkRBUC5pVHJlbmRTZXJpZXMpID0+IGQuQ29sb3IpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCAoZDogVHJlbkRBUC5pVHJlbmRTZXJpZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCB5U2NhbGUgPSB5W2QuQXhpc107XHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZUZ1bmMgPSBkMy5saW5lPFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50PigpLngoZGQgPT4geChtb21lbnQoZGQuVGltZXN0YW1wLCAnWVlZWS1NTS1ERFRISDptbTpzcy5mZmZaJykpKS55KGRkID0+IHlTY2FsZShkZFtkLkZpZWxkXSkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkRGF0YSA9ICgocmVjb3JkLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IGQuRGF0YVNvdXJjZUlELnRvU3RyaW5nKCkpPy5EYXRhID8/IFtdKS5maW5kKGRzID0+IGRzLklELnRvU3RyaW5nKCkgPT09IGQuSUQudG9TdHJpbmcoKSk/LkRhdGEgPz8gW10pLmZpbHRlcihkcyA9PiBtb21lbnQoZHMuVGltZXN0YW1wKS50b0RhdGUoKS5nZXRUaW1lKCkgPj0gc2V0dGluZ3MuSlNPTi5NaW4gJiYgbW9tZW50KGRzLlRpbWVzdGFtcCkudG9EYXRlKCkuZ2V0VGltZSgpIDw9IHNldHRpbmdzLkpTT04uTWF4ICYmIGRzW2QuRmllbGRdID49IHNldHRpbmdzLkpTT04uWUF4aXNbZC5BeGlzXT8uTWluICYmIGRzW2QuRmllbGRdIDw9IHNldHRpbmdzLkpTT04uWUF4aXNbZC5BeGlzXT8uTWF4KVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmVGdW5jKGZpbHRlcmVkRGF0YSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgc3ZnLm9uKCdtb3VzZW1vdmUnLCAoZDogTW91c2VFdmVudCkgPT4gc2V0SG92ZXIoZC5vZmZzZXRYKSlcclxuICAgICAgICBzdmcub24oJ21vdXNlZG93bicsIChkOiBNb3VzZUV2ZW50KSA9PiBIYW5kbGVDaGFydEFjdGlvbihkLCBzdmcsIHgpKVxyXG5cclxuICAgICAgICBzZXR0aW5ncy5KU09OLlNlcmllcy5maWx0ZXIoc2VyaWVzID0+IHNlcmllcy5TaG93RXZlbnRzKS5mb3JFYWNoKHNlcmllcyA9PiBBZGRFdmVudExpbmUoc2VyaWVzLCBzdmcsIHgpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBBZGRMZWdlbmQoc3ZnLCBzZXJpZXM6IFRyZW5EQVAuaVRyZW5kU2VyaWVzW10pIHtcclxuICAgICAgICBjb25zdCBzdmdIZWlnaHQgPSBwYXJzZUludChzdmcuYXR0cignaGVpZ2h0JykpO1xyXG4gICAgICAgIGNvbnN0IHN2Z1dpZHRoID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xyXG5cclxuICAgICAgICBjb25zdCBsZWdlbmQgPSBzdmcuc2VsZWN0QWxsKCdnLmxlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5kYXRhKFtzZXJpZXNdKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7c3ZnV2lkdGggLSAyMDB9LCR7bWFyZ2luLmN1cnJlbnQudG9wfSlgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGVnZW5kUm93cyA9IGxlZ2VuZC5zZWxlY3RBbGwoJ2cubGVnZW5kUm93JylcclxuICAgICAgICAgICAgLmRhdGEoZCA9PiBkKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZHJvdycpXHJcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCwgaSkgPT4gYHRyYW5zbGF0ZSgxMCwke2kgKiAzMH0pYCk7XHJcblxyXG4gICAgICAgIGxlZ2VuZFJvd3MuYXBwZW5kKCdyZWN0JykuYXR0cignaGVpZ2h0JywgMjApLmF0dHIoJ3dpZHRoJywgMjApLmF0dHIoJ2ZpbGwnLCBkID0+IGQuQ29sb3IpXHJcbiAgICAgICAgbGVnZW5kUm93cy5hcHBlbmQoJ3RleHQnKS5hdHRyKCd4JywgMzApLmF0dHIoJ3knLCAxNSlcclxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xyXG4gICAgICAgICAgICAgIGlmICgoZD8uTGFiZWwgPz8gJycpLmxlbmd0aCA+IDE1KVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZC5MYWJlbC5zbGljZSgwLCAxNSkgKyAnLi4uJztcclxuICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBkPy5MYWJlbCA/PyAnJztcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIGxlZ2VuZFJvd3MuYXBwZW5kKCd0aXRsZScpLnRleHQoZCA9PiBkLkxhYmVsKVxyXG4gICAgfVxyXG4gICAgICAgIFxyXG4gICAgZnVuY3Rpb24gQWRkRXZlbnRMaW5lKHNlcmllczogVHJlbkRBUC5pVHJlbmRTZXJpZXMsIHN2ZywgeCkge1xyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSlcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9ICgocmVjb3JkLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSk/LkRhdGEgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YVtdID8/IFtdKS5maW5kKGRzID0+IGRzLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5JRC50b1N0cmluZygpKT8uRXZlbnRzID8/IFtdKVxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cuZXZlbnQtbGluZScpLnJlbW92ZSgpO1xyXG4gICAgICAgIGNvbnN0IGcgPSBzdmcuc2VsZWN0QWxsKCdnLmV2ZW50LWxpbmUnKVxyXG4gICAgICAgICAgICAuZGF0YShkYXRhKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmNsYXNzZWQoJ2V2ZW50LWxpbmUnLCB0cnVlKVxyXG4gICAgICAgIGcuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsICcycHgnKVxyXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgZCA9PiBgTTAsJHtzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLSBtYXJnaW4uY3VycmVudC50b3B9TC0xMCwke3N2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSAtIG1hcmdpbi5jdXJyZW50LnRvcCArIDEwfSxMMTAsJHtzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLSBtYXJnaW4uY3VycmVudC50b3AgKyAxMH1MMCwke3N2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSAtIG1hcmdpbi5jdXJyZW50LnRvcH1aYClcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZCA9PiBgdHJhbnNsYXRlKCR7eChtb21lbnQoZC5TdGFydFRpbWUsICdZWVlZLU1NLUREVEhIOm1tOnNzLmZmZicpKX0sJHttYXJnaW4uY3VycmVudC50b3B9KWApXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAncmVkJylcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAncmVkJylcclxuICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoZSwgZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4ocmVjb3JkLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklELnRvU3RyaW5nKCkgPT09IHNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSkuRGF0YVNvdXJjZS5PcGVuU0VFICsgJz9ldmVudElEPScgKyBkLklEKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEFkZFhBeGlzKHN2ZywgeCkge1xyXG4gICAgICAgIGNvbnN0IHN2Z1dpZHRoID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cueGF4aXMnKS5yZW1vdmUoKTtcclxuICAgICAgICBjb25zdCB4QXhpcyA9IHN2Zy5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoJ3hheGlzJywgdHJ1ZSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIChzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20pICsgXCIpXCIpXHJcbiAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeCkpXHJcblxyXG4gICAgICAgIHN2Zy5hcHBlbmQoXCJnXCIpLmNsYXNzZWQoJ3hheGlzJywgdHJ1ZSkuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzdmdXaWR0aCAvIDIpICsgXCIsXCIgKyAoc3ZnSGVpZ2h0IC0gbWFyZ2luLmN1cnJlbnQuYm90dG9tIC8gMykgKyBcIilcIilcclxuICAgICAgICAgICAgLnRleHQoXCJUaW1lXCIpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEFkZFlBeGlzTGVmdChheGlzOiBUcmVuREFQLmlZQXhpcywgc3ZnLCB5LCByb3RhdGU6IGJvb2xlYW4gPSB0cnVlLCBpbmRleDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIGNvbnN0IHN2Z1dpZHRoID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc3ZnLmFwcGVuZChcImdcIikuY2xhc3NlZCgneWF4aXMnLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChtYXJnaW4uY3VycmVudC5sZWZ0IC0gaW5kZXggKiA1MCkgKyBcIiwwKVwiKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KS50aWNrcyhNYXRoLmZsb29yKHN2Z0hlaWdodCAvIDUwKSArIDEpLnRpY2tGb3JtYXQoKHZhbHVlOiBudW1iZXIpID0+IGQzLmZvcm1hdChcIn5zXCIpKHZhbHVlKSkpO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0ID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmNsYXNzZWQoJ3lheGlzJywgdHJ1ZSlcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIikgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAudGV4dChheGlzLlVuaXRzKTtcclxuICAgICAgICBpZiAocm90YXRlKVxyXG4gICAgICAgICAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKSB0cmFuc2xhdGUoLVwiICsgc3ZnSGVpZ2h0IC8gMiArIFwiLFwiICsgKChtYXJnaW4uY3VycmVudC5sZWZ0IC0gaW5kZXggKiA1MCkgLyAzKSArIFwiKVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGV4dC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKG1hcmdpbi5jdXJyZW50LmxlZnQgLSBpbmRleCAqIDUwKSArIFwiLFwiICsgKHN2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSAvIDIpICsgXCIpXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gQWRkWUF4aXNSaWdodChheGlzOiBUcmVuREFQLmlZQXhpcywgc3ZnLCB5LCBpbmRleDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIGNvbnN0IHN2Z1dpZHRoID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc3ZnLmFwcGVuZChcImdcIikuY2xhc3NlZCgneWF4aXMnLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzdmdXaWR0aCAtIG1hcmdpbi5jdXJyZW50LnJpZ2h0ICsgaW5kZXggKiA1MCkgKyBcIiwwKVwiKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzUmlnaHQoeSkudGlja3MoTWF0aC5mbG9vcihzdmdIZWlnaHQgLyA1MCkgKyAxKS50aWNrRm9ybWF0KCh2YWx1ZTogbnVtYmVyKSA9PiBkMy5mb3JtYXQoXCJ+c1wiKSh2YWx1ZSkpKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dCA9IHN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5jbGFzc2VkKCd5YXhpcycsIHRydWUpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgIC50ZXh0KGF4aXMuVW5pdHMpO1xyXG4gICAgICAgICAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAoc3ZnV2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodCArIGluZGV4ICogNTApICsgXCIsXCIgKyAoc3ZnSGVpZ2h0IC0gbWFyZ2luLmN1cnJlbnQuYm90dG9tIC8gMikgKyBcIilcIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEdldFhTY2FsZShzZXR0aW5nczogVHJlbmQpIHtcclxuICAgICAgICByZXR1cm4gZDMuc2NhbGVVdGMoKVxyXG4gICAgICAgICAgICAuZG9tYWluKFtzZXR0aW5ncy5KU09OLk1pbiwgc2V0dGluZ3MuSlNPTi5NYXhdKSAgICAgLy8gY2FuIHVzZSB0aGlzIGluc3RlYWQgb2YgMTAwMCB0byBoYXZlIHRoZSBtYXggb2YgZGF0YTogZDMubWF4KGRhdGEsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuICtkLnByaWNlIH0pXHJcbiAgICAgICAgICAgIC5yYW5nZShbbWFyZ2luLmN1cnJlbnQubGVmdCwgc2V0dGluZ3MuV2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodF0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEdldFlTY2FsZShzdmdIZWlnaHQ6IG51bWJlciwgYXhpczogVHJlbkRBUC5pWUF4aXMpIHtcclxuICAgICAgICByZXR1cm4gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgICAucmFuZ2UoW3N2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSwgbWFyZ2luLmN1cnJlbnQudG9wXSlcclxuICAgICAgICAgICAgLmRvbWFpbihbYXhpcy5NaW4sIGF4aXMuTWF4XSlcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBIYW5kbGVIb3ZlclVwZGF0ZShob3ZlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKGNoYXJ0QWN0aW9uUmVmLmN1cnJlbnQgIT09ICdDbGljaycpIHJldHVybjtcclxuICAgICAgICBzdmdzLmN1cnJlbnQuZm9yRWFjaCgoc3ZnLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUludChzdmcuYXR0cignaGVpZ2h0JykpIC0gbWFyZ2luLmN1cnJlbnQudG9wIC0gbWFyZ2luLmN1cnJlbnQuYm90dG9tO1xyXG5cclxuICAgICAgICAgICAgaWYgKGhvdmVyID49IG1hcmdpbi5jdXJyZW50LmxlZnQgJiYgaG92ZXIgPD0gKHByb3BzLldpZHRoIC0gbWFyZ2luLmN1cnJlbnQucmlnaHQpKSB7XHJcbiAgICAgICAgICAgICAgICBzdmcuc2VsZWN0QWxsKCdnLm1vdXNlLW92ZXInKS5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgc3ZnLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ21vdXNlLW92ZXInLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBkID0+IGBNIDAgMCBWICR7aGVpZ2h0fWApXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2hvdmVyfSwke21hcmdpbi5jdXJyZW50LnRvcH0pYClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2dyYXknKVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBIYW5kbGVSZXNldCgpIHtcclxuICAgICAgICBzZXRSZWNvcmQocmVjb3JkLkNhbGN1bGF0ZUF4aXNSYW5nZSgneCcpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBIYW5kbGVDaGFydEFjdGlvbihldnQ6IE1vdXNlRXZlbnQsIHN2ZzogZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD4sIHNjYWxlOiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KHN2Zy5hdHRyKCd3aWR0aCcpKTtcclxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZiAoZXZ0Lm9mZnNldFggPCBtYXJnaW4uY3VycmVudC5sZWZ0IHx8IGV2dC5vZmZzZXRYID4gd2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodCkgcmV0dXJuO1xyXG4gICAgICAgIGVsc2UgaWYgKGV2dC5vZmZzZXRZIDwgbWFyZ2luLmN1cnJlbnQudG9wIHx8IGV2dC5vZmZzZXRZID5oZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20pIHJldHVybjtcclxuICAgICAgICBlbHNlIGlmIChjaGFydEFjdGlvblJlZi5jdXJyZW50ID09ICdDbGljaycpXHJcbiAgICAgICAgICAgIE9uQ2xpY2soZXZ0LCBzdmcsIHNjYWxlKTtcclxuICAgICAgICBlbHNlIGlmIChjaGFydEFjdGlvblJlZi5jdXJyZW50ID09ICdQYW4nKVxyXG4gICAgICAgICAgICBPblBhbihldnQsIHN2Zywgc2NhbGUpXHJcbiAgICAgICAgZWxzZSBpZiAoY2hhcnRBY3Rpb25SZWYuY3VycmVudCA9PSAnWm9vbVgnKVxyXG4gICAgICAgICAgICBPblhab29tKGV2dCwgc3ZnLCBzY2FsZSlcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIE9uQ2xpY2soZXZ0OiBNb3VzZUV2ZW50LCBzdmc6IGQzLlNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+LCBzY2FsZTogZDMuU2NhbGVUaW1lPG51bWJlciwgbnVtYmVyPikge1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSk7XHJcbiAgICAgICAgY29uc3QgdG9vbHRpcEhlaWdodCA9IHJlY29yZC5KU09OLlNlcmllcy5sZW5ndGggKiAxNTtcclxuICAgICAgICBpZiAoZXZ0Lm9mZnNldFggPCBtYXJnaW4uY3VycmVudC5sZWZ0ICYmIGV2dC5vZmZzZXRYID4gKHByb3BzLldpZHRoIC0gbWFyZ2luLmN1cnJlbnQucmlnaHQpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cubW91c2Utb3ZlcjInKS5yZW1vdmUoKVxyXG4gICAgICAgIHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuY2xhc3NlZCgnbW91c2Utb3ZlcjInLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQgPT4gYE0gMCAwIFYgJHtoZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLSBtYXJnaW4uY3VycmVudC50b3B9YClcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2V2dC5vZmZzZXRYfSwke21hcmdpbi5jdXJyZW50LnRvcH0pYClcclxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdncmV5JylcclxuXHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cuY2hhcnR0b29sdGlwJykucmVtb3ZlKCk7XHJcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2hhcnR0b29sdGlwJylcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2V2dC5vZmZzZXRYICsgMTV9LCR7ZXZ0Lm9mZnNldFkgLSB0b29sdGlwSGVpZ2h0LzJ9KWApO1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSB0b29sdGlwLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ2dhaW5zYm9ybycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCByZWNvcmQuSlNPTi5TZXJpZXMubGVuZ3RoICsgJ2VtJylcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgMjAwKVxyXG4gICAgICAgICAgICAuYXR0cigneCcsIDApXHJcbiAgICAgICAgICAgIC5hdHRyKCd5JywwKVxyXG4gICAgICAgIGNvbnN0IHRleHQgPSB0b29sdGlwLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgMClcclxuICAgICAgICAgICAgLmF0dHIoJ3knLCAwKVxyXG5cclxuICAgICAgICBsZXQgd2lkdGggPSAyMDA7XHJcbiAgICAgICAgcmVjb3JkLkpTT04uU2VyaWVzLmZvckVhY2goKHNlcmllcywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgdG9vbHRpcC5hcHBlbmQoJ3JlY3QnKS5hdHRyKCd4JywgNSkuYXR0cigneScsIGAke2luZGV4fWVtYCkuYXR0cignaGVpZ2h0JywgJzFlbScpLmF0dHIoJ3dpZHRoJywgJzFlbScpLmF0dHIoJ2ZpbGwnLCBzZXJpZXMuQ29sb3IpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcmVjb3JkLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklEID09IHNlcmllcy5EYXRhU291cmNlSUQpPy5EYXRhID8/IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZS5maW5kKGRzID0+IGRzLklEID09IHNlcmllcy5JRCk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcihkYXRhLmxlbmd0aCAqIGV2dC5vZmZzZXRYIC8gcHJvcHMuV2lkdGggKiAuOTUpO1xyXG4gICAgICAgICAgICBjb25zdCBjZWlsID0gTWF0aC5jZWlsKGRhdGEubGVuZ3RoICogZXZ0Lm9mZnNldFggLyBwcm9wcy5XaWR0aCAqIDEuMDUpO1xyXG4gICAgICAgICAgICBjb25zdCBzaG9ydGVuZWREYXRhID0gZGF0YS5zbGljZShmbG9vciwgY2VpbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBzaG9ydGVuZWREYXRhLm1hcChkYXR1bSA9PiAoeyBWYWx1ZTogZGF0dW1bc2VyaWVzLkZpZWxkXSwgRGlzdGFuY2U6IE1hdGguYWJzKGV2dC5vZmZzZXRYIC0gc2NhbGUobW9tZW50KGRhdHVtLlRpbWVzdGFtcCwgJ1lZWVktTU0tRERUSEg6bW06c3MuZmZmWicpLnRvRGF0ZSgpLmdldFRpbWUoKSkpIH0pKTtcclxuICAgICAgICAgICAgZGlzdC5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYS5EaXN0YW5jZSA+IGIuRGlzdGFuY2UpIHJldHVybiAxO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYS5EaXN0YW5jZSA9PSBiLkRpc3RhbmNlKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBjb25zdCBkYXR1bSA9IGQzLmZvcm1hdCgnLjJmJykoZGlzdFswXS5WYWx1ZSk7XHJcbiAgICAgICAgICAgIHRleHQuYXBwZW5kKCd0c3BhbicpLnRleHQoc2VyaWVzLkxhYmVsICsgJyAtICcgKyBkYXR1bSkuYXR0cigneCcsICcxLjVlbScpLmF0dHIoJ3knLCBgJHtpbmRleCsxfWVtYCk7XHJcbiAgICAgICAgICAgIHdpZHRoID0gdGV4dC5ub2RlKCkuZ2V0QkJveCgpLndpZHRoICsgMjUgPiB3aWR0aCA/IHRleHQubm9kZSgpLmdldEJCb3goKS53aWR0aCArIDI1ICA6IHdpZHRoO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlY3QuYXR0cignd2lkdGgnLCB3aWR0aCk7XHJcbiAgICAgICAgaWYgKHdpZHRoID4gcHJvcHMuV2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodCAtIGV2dC5vZmZzZXRYKVxyXG4gICAgICAgICAgICB0b29sdGlwLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke2V2dC5vZmZzZXRYIC0gMTUgLSB3aWR0aH0sJHtldnQub2Zmc2V0WSAtIHRvb2x0aXBIZWlnaHQgLyAyfSlgKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBPblBhbihldnQ6IE1vdXNlRXZlbnQsIHN2ZzogZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD4sIHNjYWxlOiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBldnQuY2xpZW50WDtcclxuICAgICAgICBzdmcub24oJ21vdXNlbW92ZS5wYW4nLCAoZTogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICByZWNvcmQuVXBkYXRlSlNPTignTWluJywgc2NhbGUuaW52ZXJ0KHNjYWxlLnJhbmdlKClbMF0gKyBzdGFydCAtIGUuY2xpZW50WCkuZ2V0VGltZSgpKVxyXG4gICAgICAgICAgICBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZC5VcGRhdGVKU09OKCdNYXgnLCBzY2FsZS5pbnZlcnQoc2NhbGUucmFuZ2UoKVsxXSArIHN0YXJ0IC0gZS5jbGllbnRYKS5nZXRUaW1lKCkpKSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBzdmcub24oJ21vdXNldXAucGFuJywgKCkgPT4gc3ZnLm9uKCdtb3VzZW1vdmUucGFuJywgbnVsbCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIE9uWFpvb20oZXZ0OiBNb3VzZUV2ZW50LCBzdmc6IGQzLlNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+LCBzY2FsZTogZDMuU2NhbGVUaW1lPG51bWJlciwgbnVtYmVyPikge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gZXZ0Lm9mZnNldFg7XHJcbiAgICAgICAgY29uc3QgYnJ1c2ggPSBkMy5icnVzaFgoKVxyXG4gICAgICAgICAgICAuZXh0ZW50KFtbbWFyZ2luLmN1cnJlbnQubGVmdCwgbWFyZ2luLmN1cnJlbnQudG9wICsgMC41XSwgW3Byb3BzLldpZHRoIC0gbWFyZ2luLmN1cnJlbnQucmlnaHQsIHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSkgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gKyAwLjVdXSlcclxuICAgICAgICBjb25zdCBiciA9IHN2Zy5hcHBlbmQoJ2cnKS5jYWxsKGJydXNoKVxyXG4gICAgICAgIGJyLmNhbGwoYnJ1c2gubW92ZSwgW3N0YXJ0LCBzdGFydCArIDFdKTtcclxuICAgICAgICBzdmcub24oJ21vdXNlbW92ZS5icnVzaCcsIChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGJyLmNhbGwoYnJ1c2gubW92ZSwgW3N0YXJ0LCBlLm9mZnNldFhdKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHN2Zy5vbignbW91c2V1cC5icnVzaCcsIChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0LCBlLm9mZnNldFgpO1xyXG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydCwgZS5vZmZzZXRYKTtcclxuICAgICAgICAgICAgcmVjb3JkLlVwZGF0ZUpTT04oJ01pbicsIHNjYWxlLmludmVydChtaW4pLmdldFRpbWUoKSlcclxuICAgICAgICAgICAgc2V0UmVjb3JkKG5ldyBUcmVuZChyZWNvcmQuVXBkYXRlSlNPTignTWF4Jywgc2NhbGUuaW52ZXJ0KG1heCkuZ2V0VGltZSgpKSkpXHJcblxyXG4gICAgICAgICAgICBici5yZW1vdmUoKTtcclxuICAgICAgICAgICAgc3ZnLm9uKCdtb3VzZW1vdmUuYnJ1c2gnLCBudWxsKTtcclxuICAgICAgICAgICAgc3ZnLm9uKCdtb3VzZXVwLmJydXNoJywgbnVsbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBzdHlsZT17eyB3aWR0aDogcHJvcHMuV2lkdGgsIGhlaWdodDogcHJvcHMuSGVpZ2h0IH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wid2lkZ2l0LWxhYmVsXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMuTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImJ0biBcIiArIHN0eWxlc1tcIndpZGdpdC1jb250cm9sc1wiXX0gdGl0bGU9J1dpZGdldCBTZXR0aW5ncycgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKHRydWUpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHJlZj17cmVmfSBzdHlsZT17eyB1c2VyU2VsZWN0OiAnbm9uZScgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgbGVmdDogMTAsIHpJbmRleDogMTAxMCB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tbGlnaHQnIG9uQ2xpY2s9e0hhbmRsZVJlc2V0fT5SZXNldDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlucHV0XCIgY2hlY2tlZD17Y2hhcnRBY3Rpb24gPT0gJ1Bhbid9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDaGFydEFjdGlvbignUGFuJyl9IC8+UGFuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5wdXRcIiBjaGVja2VkPXtjaGFydEFjdGlvbiA9PSAnWm9vbVgnfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0Q2hhcnRBY3Rpb24oJ1pvb21YJyl9IC8+Wm9vbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlucHV0XCIgY2hlY2tlZD17Y2hhcnRBY3Rpb24gPT0gJ0NsaWNrJ30gb25DaGFuZ2U9eyhldnQpID0+IHNldENoYXJ0QWN0aW9uKCdDbGljaycpfSAvPkNsaWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7LypcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5saW5lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbnB1dFwiIGNoZWNrZWQ9e2NoYXJ0QWN0aW9uID09ICdab29tWSd9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDaGFydEFjdGlvbignWm9vbVknKX0gLz5ab29tIFlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tY2hlY2stbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlucHV0XCIgY2hlY2tlZD17Y2hhcnRBY3Rpb24gPT0gJ1pvb21YWSd9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDaGFydEFjdGlvbignWm9vbVhZJyl9IC8+Wm9vbSBYICYgWVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8V2lkZ2V0IHsuLi5wcm9wc30gUmVjb3JkPXtyZWNvcmR9IFRvZ2dsZT17dG9nZ2xlfSBTZXRUb2dnbGU9eyhib29sKSA9PiBzZXRUb2dnbGUoYm9vbCl9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pV2lkZ2V0PiBGaWVsZD0nTGFiZWwnIFJlY29yZD17cmVjb3JkfSBUeXBlPSd0ZXh0JyBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHIpKX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPldpZHRoPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZD8uV2lkdGh9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHsgLi4ucmVjb3JkLFdpZHRoOiBwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKX0pKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBUcmVuZCh7IC4uLnJlY29yZCwgV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoIC0gMjAwfSkpIH0+RnVsbCBXaWR0aDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC0xJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5TcGxpdDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaEJ1dHRvbiBjaGVja2VkPXtyZWNvcmQ/LkpTT04/LlNwbGl0ID8/IGZhbHNlfSBvbkNoYW5nZT17KGNoZWNrZWQ6IGJvb2xlYW4pID0+IHNldFJlY29yZChyZWNvcmQuVXBkYXRlSlNPTignU3BsaXQnLCBjaGVja2VkKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLTInPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdDxUcmVuREFQLmlUcmVuZD4gTGFiZWw9J1NwbGl0IE9uJyBGaWVsZD0nU3BsaXRUeXBlJyBSZWNvcmQ9e3JlY29yZD8uSlNPTn0gU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBUcmVuZCh7IC4uLnJlY29yZCwgSlNPTjogciB9KSl9IE9wdGlvbnM9e1t7IFZhbHVlOiAnQXhpcycsIExhYmVsOiAnQXhpcycgfSwgeyBWYWx1ZTogJ1NlcmllcycsIExhYmVsOiAnU2VyaWVzJyB9XX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtMic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TGVnZW5kPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaEJ1dHRvbiBjaGVja2VkPXtyZWNvcmQuSlNPTj8uTGVnZW5kID8/IGZhbHNlfSBvbkNoYW5nZT17KGNoZWNrZWQ6IGJvb2xlYW4pID0+IHNldFJlY29yZChyZWNvcmQuVXBkYXRlSlNPTignTGVnZW5kJywgY2hlY2tlZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlggQXhpczwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1pbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgdmFsdWU9e21vbWVudChyZWNvcmQuSlNPTi5NaW4pfSBvbkNoYW5nZT17KHZhbHVlKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHsgLi4ucmVjb3JkLCBKU09OOiB7IC4uLnJlY29yZC5KU09OLE1pbjogbW9tZW50KHZhbHVlKS50b0RhdGUoKS5nZXRUaW1lKCl9fSkpfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1pbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgdmFsdWU9e21vbWVudChyZWNvcmQuSlNPTi5NYXgpfSBvbkNoYW5nZT17KHZhbHVlKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHsgLi4ucmVjb3JkLCBKU09OOiB7IC4uLnJlY29yZC5KU09OLCBNYXg6IG1vbWVudCh2YWx1ZSkudG9EYXRlKCkuZ2V0VGltZSgpIH19KSl9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2IH19IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLkNhbGN1bGF0ZUF4aXNSYW5nZSgneCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlY29yZChuZXcgVHJlbmQocmVjb3JkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5Vc2UgRGF0YTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlkgQXhpczwvaDY+IDxidXR0b24gc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgZmxvYXQ6ICdyaWdodCcsIHRvcDogLTMwfX0gY2xhc3NOYW1lPSdidG4gYnRuLWxpbmsnIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLkFkZEF4aXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19PntQbHVzfTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWdyb3VwIGxpc3QtZ3JvdXAtZmx1c2hcIiBzdHlsZT17e21heEhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gNjI1LCBvdmVyZmxvd1k6ICdhdXRvJywgb3ZlcmZsb3dYOiAnaGlkZGVuJywgd2lkdGg6ICcxMDAlJyB9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNvcmQuSlNPTi5ZQXhpcy5tYXAoKGF4aXMsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPSdsaXN0LWdyb3VwLWl0ZW0nPjxBeGlzIEF4aXM9e2F4aXN9IEluZGV4PXtpbmRleH0gV2lkZ2V0PXtyZWNvcmR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpIH0vPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlNlcmllczwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImFjY29yZGlvblwiIHN0eWxlPXt7IG92ZXJmbG93WTogJ2F1dG8nLCBtYXhIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDI1MH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVjb3JkLkRhdGEubWFwKChkLCBpKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjYXJkLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgaHJlZj17XCIjY29sbGFwc2VcIiArIGl9PntkLkRhdGFTb3VyY2UuTmFtZX08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD17XCJjb2xsYXBzZVwiICsgaX0gY2xhc3NOYW1lPVwiY29sbGFwc2Ugc2hvd1wiIGRhdGEtcGFyZW50PVwiI2FjY29yZGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLlF1aWNrQWRkVm9sdGFnZVJNUyhkLkRhdGFTb3VyY2UuSUQpKX0+UXVpY2sgQWRkIFZSTVM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLlF1aWNrQWRkQ3VycmVudFJNUyhkLkRhdGFTb3VyY2UuSUQpKX0+UXVpY2sgQWRkIElSTVM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLlJlbW92ZUFsbChkLkRhdGFTb3VyY2UuSUQpKX0+UmVtb3ZlIEFsbDwvYnV0dG9uPiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPjogbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcmllc1NlbGVjdCBXaWRnZXQ9e3JlY29yZH0gRGF0YVNvdXJjZUlEPXtkLkRhdGFTb3VyY2UuSUR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVjb3JkLkpTT04uU2VyaWVzLm1hcCgoc2VyaWVzLCBpbmQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdHVtID0gZC5EYXRhLmZpbmQoZGQgPT4gZGQuSUQudG9TdHJpbmcoKSA9PT0gc2VyaWVzLklEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdHVtID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17c2VyaWVzLklEfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIFR5cGU9e2QuRGF0YVNvdXJjZS5UeXBlfSBJbmRleD17aW5kfSBTZXJpZXM9e3Nlcmllc30gRGF0YT17ZGF0dW0gYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YX0gV2lkZ2V0PXtyZWNvcmR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvV2lkZ2V0PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICk7XHJcblxyXG59IiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEFkZGl0aW9uYWxJbmZvLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9nbG9iYWxcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBZGRpdGlvbmFsSW5mbyhwcm9wczogeyBEYXRhOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuIH0pIHtcclxuICAgIGNvbnN0IGlkID0gXy51bmlxdWVJZCgnZHJvcGRvd24tJyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2wgZHJvcGRvd24tdG9nZ2xlXCIgdHlwZT1cImJ1dHRvblwiIGlkPXtpZH0gZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+SW5mbzwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIiBhcmlhLWxhYmVsbGVkYnk9e2lkfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPkRldmljZToge3Byb3BzLkRhdGE/LkRldmljZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlNpZ25hbCBSZWZlcmVuY2U6IHtwcm9wcy5EYXRhPy5TaWduYWxSZWZlcmVuY2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5TaWduYWwgVHlwZToge3Byb3BzLkRhdGE/LlNpZ25hbFR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5FbmdpbmVlcmluZyBVbml0czoge3Byb3BzLkRhdGE/LkVuZ2luZWVyaW5nVW5pdHN9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5QaGFzZToge3Byb3BzLkRhdGE/LlBoYXNlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+UGhhc29yIFR5cGU6IHtwcm9wcy5EYXRhPy5QaGFzb3JUeXBlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+RGVzY3JpcHRpb246IHtwcm9wcy5EYXRhPy5EZXNjcmlwdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgU2VyaWVzU2VsZWN0LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZ2xvYmFsJztcclxuXHJcbmltcG9ydCB7IEhpc3RvZ3JhbSwgU3RhdHMsIFRhYmxlLCBUcmVuZCwgV2lkZ2V0LCBYdnNZIH0gZnJvbSAnLi4vLi4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvIGZyb20gJy4vQWRkaXRpb25hbEluZm8nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VyaWVzU2VsZWN0KHByb3BzOiB7IFdpZGdldDogV2lkZ2V0PFRyZW5EQVAuV2lkZ2V0Q2xhc3M+LCBEYXRhU291cmNlSUQ6IG51bWJlciwgQ2FsbGJhY2s6ICgpID0+IHZvaWQsIEF4aXM/OiAneCcgfCAneScgfSkge1xyXG4gICAgY29uc3QgW2RhdGFTb3VyY2UsIHNldERhdGFTb3VyY2VdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pRGF0YVNldFJldHVybj4odW5kZWZpbmVkKVxyXG4gICAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuPih7IElEOiAnMCcgfSBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKTtcclxuICAgIGNvbnN0IFtkZWxpbWV0ZXIsIHNldERlbGltZXRlcl0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KCcnKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBwcm9wcy5XaWRnZXQuRGF0YS5maW5kKGQgPT4gZC5EYXRhU291cmNlLklEID09PSBwcm9wcy5EYXRhU291cmNlSUQpO1xyXG4gICAgICAgIGlmIChkYXRhU291cmNlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzZXREYXRhU291cmNlKGRhdGFTb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtwcm9wcy5XaWRnZXQuRGF0YV0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17ZGVsaW1ldGVyfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0RGVsaW1ldGVyKGV2dC50YXJnZXQudmFsdWUpfT5cclxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICB7KGRhdGFTb3VyY2U/LkRhdGEgPz8gW10pLm1hcCgoZDogVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikgPT4gZC5EZXZpY2UpLmZpbHRlcigoeCwgaSwgYSkgPT4gYS5pbmRleE9mKHgpID09PSBpKS5tYXAoKGQsIGkpID0+IDxvcHRpb24ga2V5PXtpfSB2YWx1ZT17ZH0+e2R9PC9vcHRpb24+KX1cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcblxyXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtzZWxlY3RlZD8uSUQgPz8gJzAnfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0U2VsZWN0ZWQoZGF0YVNvdXJjZS5EYXRhLmZpbmQoKGRhdHVtOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKSA9PiBkYXR1bS5JRCA9PT0gZXZ0LnRhcmdldC52YWx1ZSkgYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybil9PlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nMCc+PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICB7KGRhdGFTb3VyY2U/LkRhdGEgPz8gW10pLmZpbHRlcigoZDogVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikgPT4gZC5EZXZpY2UuaW5kZXhPZihkZWxpbWV0ZXIpID49IDApLm1hcCgoZGF0dW06IFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4sIGluZGV4KSA9PiA8b3B0aW9uIGtleT17aW5kZXh9IHZhbHVlPXtkYXR1bS5JRH0+e2RhdHVtLkRlc2NyaXB0aW9ufTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvIERhdGE9e3NlbGVjdGVkfS8+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gc2VsZWN0ZWQuRGVzY3JpcHRpb247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ0hpc3RvZ3JhbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgSGlzdG9ncmFtKS5BZGRTZXJpZXMoKHNlbGVjdGVkKS5JRCwgcHJvcHMuRGF0YVNvdXJjZUlELCBsYWJlbClcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1RyZW5kJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBUcmVuZCkuQWRkU2VyaWVzKChzZWxlY3RlZCkuSUQsIHByb3BzLkRhdGFTb3VyY2VJRCwgbGFiZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdTdGF0cycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgU3RhdHMpLlNldFNlcmllcygoc2VsZWN0ZWQpLklELCBwcm9wcy5EYXRhU291cmNlSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLldpZGdldC5UeXBlID09PSAnVGFibGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFRhYmxlKS5TZXRTZXJpZXMoKHNlbGVjdGVkKS5JRCwgcHJvcHMuRGF0YVNvdXJjZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1h2c1knKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFh2c1kpLlNldFNlcmllcyhwcm9wcy5BeGlzLCAoc2VsZWN0ZWQpLklELCBwcm9wcy5EYXRhU291cmNlSUQpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9fT5TZWxlY3Q8L2J1dHRvbiA+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBBZGRpdGlvbmFsSW5mby50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDMvMTAvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZ2xvYmFsXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFkZGl0aW9uYWxJbmZvKHByb3BzOiB7IEluZGV4OiBudW1iZXIsIERhdGE6IFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YSB9KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2wgZHJvcGRvd24tdG9nZ2xlXCIgdHlwZT1cImJ1dHRvblwiIGlkPXtcImRyb3Bkb3duTWVudUJ1dHRvblwiICsgcHJvcHMuSW5kZXh9IGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxyXG4gICAgICAgICAgICAgICAgQWRkaXRpb24gSW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCIgYXJpYS1sYWJlbGxlZGJ5PXtcImRyb3Bkb3duTWVudUJ1dHRvblwiICsgcHJvcHMuSW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+TWV0ZXI6IHtwcm9wcy5EYXRhPy5NZXRlcn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPkFzc2V0OiB7cHJvcHMuRGF0YT8uQXNzZXR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5DaGFyYWN0ZXJpc3RpYzoge3Byb3BzLkRhdGE/LkNoYXJhY3RlcmlzdGljfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+VHlwZToge3Byb3BzLkRhdGE/LlR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5TdGF0aW9uOiB7cHJvcHMuRGF0YT8uU3RhdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlBoYXNlOiB7cHJvcHMuRGF0YT8uUGhhc2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5IYXJtb25pYzoge3Byb3BzLkRhdGE/Lkhhcm1vbmljfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgU2VyaWVzU2VsZWN0LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHsgSGlzdG9ncmFtLCBTdGF0cywgVGFibGUsIFRyZW5kLCBXaWRnZXQsIFh2c1kgfSBmcm9tICcuLi8uLi9JbXBsZW1lbnRhdGlvbnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VyaWVzU2VsZWN0KHByb3BzOiB7IFdpZGdldDogV2lkZ2V0PFRyZW5EQVAuV2lkZ2V0Q2xhc3MsIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YT4sIERhdGFTb3VyY2VJRDogbnVtYmVyLCBDYWxsYmFjazogKCkgPT4gdm9pZCwgQXhpcz86ICd4JyB8ICd5JyB9KSB7XHJcbiAgICBjb25zdCBbZGF0YVNvdXJjZSwgc2V0RGF0YVNvdXJjZV0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlEYXRhU2V0UmV0dXJuPFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YT4+KHVuZGVmaW5lZClcclxuICAgIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWRdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhPih7IElEOiAtMX0gYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKTtcclxuICAgIGNvbnN0IFtkZWxpbWV0ZXIsIHNldERlbGltZXRlcl0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KCcnKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBwcm9wcy5XaWRnZXQuRGF0YS5maW5kKGQgPT4gZC5EYXRhU291cmNlLklEID09PSBwcm9wcy5EYXRhU291cmNlSUQpO1xyXG4gICAgICAgIGlmIChkYXRhU291cmNlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzZXREYXRhU291cmNlKGRhdGFTb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtwcm9wcy5XaWRnZXQuRGF0YV0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17ZGVsaW1ldGVyfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0RGVsaW1ldGVyKGV2dC50YXJnZXQudmFsdWUpfT5cclxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICB7KGRhdGFTb3VyY2U/LkRhdGEgPz8gW10pLm1hcChkID0+IGQuTWV0ZXIpLmZpbHRlcigoeCwgaSwgYSkgPT4gYS5pbmRleE9mKHgpID09PSBpKS5tYXAoKGQsIGkpID0+IDxvcHRpb24ga2V5PXtpfSB2YWx1ZT17ZH0+e2R9PC9vcHRpb24+KX1cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcblxyXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtzZWxlY3RlZD8uSUQgPz8gJzAnfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0U2VsZWN0ZWQoZGF0YVNvdXJjZS5EYXRhLmZpbmQoKGRhdHVtKSA9PiBkYXR1bS5JRCA9PT0gcGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpKX0+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSctMSc+PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICB7KGRhdGFTb3VyY2U/LkRhdGEgPz8gW10pLmZpbHRlcihkYXR1bSA9PiBkYXR1bS5NZXRlci5pbmRleE9mKGRlbGltZXRlcikgPj0gMCkubWFwKChkYXR1bSwgaW5kZXgpID0+IDxvcHRpb24ga2V5PXtpbmRleH0gdmFsdWU9e2RhdHVtLklEfT57ZGF0dW0uTmFtZSArIChkYXR1bS5DaGFyYWN0ZXJpc3RpYy5pbmRleE9mKCdIUk1TJykgPj0gMCA/ICcgSEc6ICcgKyBkYXR1bS5IYXJtb25pYyA6ICcnKX08L29wdGlvbj4pfVxyXG4gICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1hcHBlbmRcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeSBkcm9wZG93bi10b2dnbGVcIiB0eXBlPVwiYnV0dG9uXCIgaWQ9e1wiZHJvcGRvd25NZW51QnV0dG9uXCJ9IGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPkluZm88L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0XCIgYXJpYS1sYWJlbGxlZGJ5PXtcImRyb3Bkb3duTWVudUJ1dHRvblwifT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5NZXRlcjoge3NlbGVjdGVkPy5NZXRlcn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5Bc3NldDoge3NlbGVjdGVkPy5Bc3NldH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5DaGFyYWN0ZXJpc3RpYzoge3NlbGVjdGVkPy5DaGFyYWN0ZXJpc3RpY308L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5UeXBlOiB7c2VsZWN0ZWQ/LlR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+U3RhdGlvbjoge3NlbGVjdGVkPy5TdGF0aW9ufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlBoYXNlOiB7c2VsZWN0ZWQ/LlBoYXNlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPkhhcm1vbmljOiB7c2VsZWN0ZWQ/Lkhhcm1vbmljfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdIaXN0b2dyYW0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIEhpc3RvZ3JhbSkuQWRkU2VyaWVzKHNlbGVjdGVkLklELCBwcm9wcy5EYXRhU291cmNlSUQsIHNlbGVjdGVkIC5UeXBlICsgJyAnICsgc2VsZWN0ZWQuUGhhc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdUcmVuZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZC5DaGFyYWN0ZXJpc3RpYyA9PT0gJ0ZyZXF1ZW5jeScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9ICdGcmVxIC0gJyArIHNlbGVjdGVkLk1ldGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxlY3RlZC5DaGFyYWN0ZXJpc3RpYy5pbmRleE9mKCdIUk1TJykgPj0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gYCR7c2VsZWN0ZWQuQ2hhcmFjdGVyaXN0aWN9LSR7c2VsZWN0ZWQuUGhhc2V9IEhHOiAke3NlbGVjdGVkLkhhcm1vbmljfSAtICR7c2VsZWN0ZWQuTWV0ZXJ9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0ZWQuQ2hhcmFjdGVyaXN0aWMgPT09ICdSTVMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBgJHtzZWxlY3RlZC5DaGFyYWN0ZXJpc3RpY30tJHtzZWxlY3RlZC5QaGFzZX0gLSAke3NlbGVjdGVkLk1ldGVyfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgbGFiZWwgPSBgJHtzZWxlY3RlZC5QaGFzZX0gJHtzZWxlY3RlZC5DaGFyYWN0ZXJpc3RpY30gLSAke3NlbGVjdGVkLk1ldGVyfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgVHJlbmQpLkFkZFNlcmllcyhzZWxlY3RlZC5JRCwgcHJvcHMuRGF0YVNvdXJjZUlELCBsYWJlbClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdTdGF0cycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgU3RhdHMpLlNldFNlcmllcyhzZWxlY3RlZC5JRCwgcHJvcHMuRGF0YVNvdXJjZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1RhYmxlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBUYWJsZSkuU2V0U2VyaWVzKHNlbGVjdGVkLklELCBwcm9wcy5EYXRhU291cmNlSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLldpZGdldC5UeXBlID09PSAnWHZzWScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgWHZzWSkuU2V0U2VyaWVzKHByb3BzLkF4aXMsIHNlbGVjdGVkLklELCBwcm9wcy5EYXRhU291cmNlSUQpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9fT5TZWxlY3Q8L2J1dHRvbiA+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBXaWRnZXQudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzE2LzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IFdpZGdldCB9IGZyb20gJy4uL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBTZXJpZXNTZWxlY3RYREEgZnJvbSAnLi9YREEvU2VyaWVzU2VsZWN0JztcclxuaW1wb3J0IFNlcmllc1NlbGVjdE9wZW5IaXN0b3JpYW4gZnJvbSAnLi9PcGVuSGlzdG9yaWFuL1Nlcmllc1NlbGVjdCc7XHJcbmltcG9ydCBTZXJpZXNTZWxlY3RTYXBwaGlyZSBmcm9tICcuL1NhcHBoaXJlL1Nlcmllc1NlbGVjdCc7XHJcblxyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgVHJlbkRBUC5pV2lkZ2V0IHtcclxuICAgIGNoaWxkcmVuOiBKU1guRWxlbWVudCB8IEpTWC5FbGVtZW50W10sXHJcbiAgICBSZWNvcmQ6IFRyZW5EQVAuaVdpZGdldCxcclxuICAgIFRvZ2dsZTogYm9vbGVhbixcclxuICAgIFNldFRvZ2dsZTogKGJvb2xlYW4pID0+IHZvaWRcclxufVxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXaWRnaXQocHJvcHM6IFByb3BzKSB7XHJcblxyXG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbFwiIHJvbGU9XCJkaWFsb2dcIiBzdHlsZT17eyBkaXNwbGF5OiBwcm9wcy5Ub2dnbGUgPyAnYmxvY2snIDogJ25vbmUnLCBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuNCknIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2cgbXctMTAwIHctNzVcIiByb2xlPVwiZG9jdW1lbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWNvbnRlbnQgbXgtYXV0b1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJtb2RhbC1oZWFkZXJcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibW9kYWwtdGl0bGVcIj57cHJvcHMuTGFiZWx9IFNldHRpbmdzPC9oNT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT17XCJjbG9zZVwifSBvbkNsaWNrPXsoKSA9PiBwcm9wcy5TZXRUb2dnbGUoZmFsc2UpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlVwZGF0ZShwcm9wcy5SZWNvcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlNldFRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5TYXZlIGNoYW5nZXM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tZGFuZ2VyXCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlNldFRvZ2dsZShmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PkRlbGV0ZSBXaWRnaXQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tc2Vjb25kYXJ5XCIgb25DbGljaz17KCkgPT4gcHJvcHMuU2V0VG9nZ2xlKGZhbHNlKX0+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid2luZG93XCIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNlcmllc1NlbGVjdChwcm9wczogeyBXaWRnZXQ6IFdpZGdldDxUcmVuREFQLldpZGdldENsYXNzPiwgRGF0YVNvdXJjZUlEOiBudW1iZXIsIENhbGxiYWNrOiAoKSA9PiB2b2lkLCBBeGlzPzogJ3gnIHwgJ3knIH0pIHtcclxuICAgIGNvbnN0IFtkYXRhU291cmNlLCBzZXREYXRhU291cmNlXSA9IFJlYWN0LnVzZVN0YXRlPFRyZW5EQVAuaURhdGFTZXRSZXR1cm4+KHVuZGVmaW5lZClcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBwcm9wcy5XaWRnZXQuRGF0YS5maW5kKGQgPT4gZC5EYXRhU291cmNlLklEID09PSBwcm9wcy5EYXRhU291cmNlSUQpO1xyXG4gICAgICAgIGlmIChkYXRhU291cmNlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzZXREYXRhU291cmNlKGRhdGFTb3VyY2UpO1xyXG4gICAgICAgICAgICAvL3NldFNlbGVjdGVkKChkYXRhU291cmNlPy5EYXRhID8/IFt1bmRlZmluZWRdKVswXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3Byb3BzLldpZGdldC5EYXRhXSk7XHJcblxyXG5cclxuICAgIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKVxyXG4gICAgICAgIHJldHVybiA8U2VyaWVzU2VsZWN0WERBIHsuLi5wcm9wc30gLz47XHJcbiAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJylcclxuICAgICAgICByZXR1cm4gPFNlcmllc1NlbGVjdE9wZW5IaXN0b3JpYW4gey4uLnByb3BzfSAvPjtcclxuICAgIGVsc2UgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJylcclxuICAgICAgICByZXR1cm4gPFNlcmllc1NlbGVjdFNhcHBoaXJlIHsuLi5wcm9wc30gV2lkZ2V0PXtwcm9wcy5XaWRnZXQgYXMgV2lkZ2V0PFRyZW5EQVAuV2lkZ2V0Q2xhc3MsIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YT4gfSAvPjtcclxuXHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBBZGRpdGlvbmFsSW5mby50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDMvMTAvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZ2xvYmFsXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFkZGl0aW9uYWxJbmZvKHByb3BzOiB7IEluZGV4OiBudW1iZXIsIERhdGE6IFRyZW5EQVAuaVhEQVJldHVybkRhdGEgfSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sIGRyb3Bkb3duLXRvZ2dsZVwiIHR5cGU9XCJidXR0b25cIiBpZD17XCJkcm9wZG93bk1lbnVCdXR0b25cIiArIHByb3BzLkluZGV4fSBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj5cclxuICAgICAgICAgICAgICAgIEFkZGl0aW9uIEluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24tbWVudVwiIGFyaWEtbGFiZWxsZWRieT17XCJkcm9wZG93bk1lbnVCdXR0b25cIiArIHByb3BzLkluZGV4fT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPk1ldGVyOiB7cHJvcHMuRGF0YT8uTWV0ZXJ9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5Bc3NldDoge3Byb3BzLkRhdGE/LkFzc2V0fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+Q2hhcmFjdGVyaXN0aWM6IHtwcm9wcy5EYXRhPy5DaGFyYWN0ZXJpc3RpY308L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlR5cGU6IHtwcm9wcy5EYXRhPy5UeXBlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+U3RhdGlvbjoge3Byb3BzLkRhdGE/LlN0YXRpb259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5QaGFzZToge3Byb3BzLkRhdGE/LlBoYXNlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+SGFybW9uaWM6IHtwcm9wcy5EYXRhPy5IYXJtb25pY308L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICk7XHJcbn1cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFNlcmllc1NlbGVjdC50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDMvMTAvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCB7IEhpc3RvZ3JhbSwgU3RhdHMsIFRhYmxlLCBUcmVuZCwgV2lkZ2V0LCBYdnNZIH0gZnJvbSAnLi4vLi4vSW1wbGVtZW50YXRpb25zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNlcmllc1NlbGVjdChwcm9wczogeyBXaWRnZXQ6IFdpZGdldDxUcmVuREFQLldpZGdldENsYXNzPiwgRGF0YVNvdXJjZUlEOiBudW1iZXIsIENhbGxiYWNrOiAoKSA9PiB2b2lkLCBBeGlzPzogJ3gnIHwgJ3knIH0pIHtcclxuICAgIGNvbnN0IFtkYXRhU291cmNlLCBzZXREYXRhU291cmNlXSA9IFJlYWN0LnVzZVN0YXRlPFRyZW5EQVAuaURhdGFTZXRSZXR1cm4+KHVuZGVmaW5lZClcclxuICAgIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWRdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pWERBUmV0dXJuRGF0YT4oeyBJRDogMCB9IGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpO1xyXG4gICAgY29uc3QgW3R5cGUsIHNldFR5cGVdID0gUmVhY3QudXNlU3RhdGU8J01ldGVyJyB8ICdBc3NldCc+KCdNZXRlcicpO1xyXG4gICAgY29uc3QgW2RlbGltZXRlciwgc2V0RGVsaW1ldGVyXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4oJycpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHByb3BzLldpZGdldC5EYXRhLmZpbmQoZCA9PiBkLkRhdGFTb3VyY2UuSUQgPT09IHByb3BzLkRhdGFTb3VyY2VJRCk7XHJcbiAgICAgICAgaWYgKGRhdGFTb3VyY2UgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNldERhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3Byb3BzLldpZGdldC5EYXRhXSk7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXt0eXBlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0VHlwZShldnQudGFyZ2V0LnZhbHVlIGFzIGFueSl9PlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nTWV0ZXInPk1ldGVyPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdBc3NldCc+QXNzZXQ8L29wdGlvbj5cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e2RlbGltZXRlcn0gb25DaGFuZ2U9eyhldnQpID0+IHNldERlbGltZXRlcihldnQudGFyZ2V0LnZhbHVlKX0+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPScnPjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgeyhkYXRhU291cmNlPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBkW3R5cGVdKS5maWx0ZXIoKHgsIGksIGEpID0+IGEuaW5kZXhPZih4KSA9PT0gaSkubWFwKChkLCBpKSA9PiA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2R9PntkfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG5cclxuICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17c2VsZWN0ZWQ/LklEID8/ICcwJ30gb25DaGFuZ2U9eyhldnQpID0+IHNldFNlbGVjdGVkKGRhdGFTb3VyY2UuRGF0YS5maW5kKChkYXR1bTogVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkgPT4gZGF0dW0uSUQgPT09IHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpKSBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKX0+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPScwJz48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIHsoZGF0YVNvdXJjZT8uRGF0YSA/PyBbXSkuZmlsdGVyKGRhdHVtID0+IGRhdHVtW3R5cGVdLmluZGV4T2YoZGVsaW1ldGVyKSA+PSAwKS5tYXAoKGRhdHVtOiBUcmVuREFQLmlYREFSZXR1cm5EYXRhLCBpbmRleCkgPT4gPG9wdGlvbiBrZXk9e2luZGV4fSB2YWx1ZT17ZGF0dW0uSUR9PntkYXR1bS5OYW1lfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5IGRyb3Bkb3duLXRvZ2dsZVwiIHR5cGU9XCJidXR0b25cIiBpZD17XCJkcm9wZG93bk1lbnVCdXR0b25cIn0gZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+SW5mbzwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtcmlnaHRcIiBhcmlhLWxhYmVsbGVkYnk9e1wiZHJvcGRvd25NZW51QnV0dG9uXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPk1ldGVyOiB7KHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpPy5NZXRlcn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5Bc3NldDogeyhzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKT8uQXNzZXR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+Q2hhcmFjdGVyaXN0aWM6IHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSk/LkNoYXJhY3RlcmlzdGljfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlR5cGU6IHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSk/LlR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+U3RhdGlvbjogeyhzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKT8uU3RhdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5QaGFzZTogeyhzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKT8uUGhhc2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+SGFybW9uaWM6IHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSk/Lkhhcm1vbmljfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdIaXN0b2dyYW0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIEhpc3RvZ3JhbSkuQWRkU2VyaWVzKChzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5JRCwgcHJvcHMuRGF0YVNvdXJjZUlELCAoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuVHlwZSArICcgJyArIHNlbGVjdGVkLlBoYXNlKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLldpZGdldC5UeXBlID09PSAnVHJlbmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLkNoYXJhY3RlcmlzdGljID09PSAnRnJlcXVlbmN5JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gJ0ZyZXEgLSAnICsgKHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLk1ldGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuVHlwZSA9PT0gJ1ZvbHRhZ2UnICYmIChzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5DaGFyYWN0ZXJpc3RpYyA9PT0gJ1JNUycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGBWJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuUGhhc2V9IC0gJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuTWV0ZXJ9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLlR5cGUgPT09ICdWb2x0YWdlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gYFYkeyhzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5QaGFzZX0gJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuQ2hhcmFjdGVyaXN0aWN9IC0gJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuTWV0ZXJ9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLlR5cGUgPT09ICdDdXJyZW50JyAmJiAoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuQ2hhcmFjdGVyaXN0aWMgPT09ICdSTVMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBgSSR7c2VsZWN0ZWQuUGhhc2V9IC0gJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuTWV0ZXJ9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLlR5cGUgPT09ICdDdXJyZW50JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gYEkkeyhzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5QaGFzZX0gJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuQ2hhcmFjdGVyaXN0aWN9IC0gJHsoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuTWV0ZXJ9YDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBsYWJlbCA9IChzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5OYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFRyZW5kKS5BZGRTZXJpZXMoKHNlbGVjdGVkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLklELCBwcm9wcy5EYXRhU291cmNlSUQsIGxhYmVsKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1N0YXRzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBTdGF0cykuU2V0U2VyaWVzKChzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5JRCwgcHJvcHMuRGF0YVNvdXJjZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1RhYmxlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBUYWJsZSkuU2V0U2VyaWVzKChzZWxlY3RlZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5JRCwgcHJvcHMuRGF0YVNvdXJjZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1h2c1knKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFh2c1kpLlNldFNlcmllcyhwcm9wcy5BeGlzLCAoc2VsZWN0ZWQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuSUQsIHByb3BzLkRhdGFTb3VyY2VJRClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH19PlNlbGVjdDwvYnV0dG9uID5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG5cclxufVxyXG5cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFh2c1kudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzE2LzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCwgUmVkdXggfSBmcm9tICcuLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uLy4uLy4uL1N0eWxlcy9hcHAuc2Nzcyc7XHJcbmltcG9ydCB7IElucHV0LCBDaGVja0JveCB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5cclxuaW1wb3J0IFdpZGdldCwgeyBTZXJpZXNTZWxlY3QgfSBmcm9tICcuL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9YREEgZnJvbSAnLi9XaWRnZXQvWERBL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBmcm9tICcuL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IHsgQ3Jvc3NNYXJrLCBQbHVzIH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9ncGEtc3ltYm9scyc7XHJcbmltcG9ydCB7IFh2c1kgfSBmcm9tICcuL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IERhdGV0aW1lIGZyb20gJ3JlYWN0LWRhdGV0aW1lJztcclxuaW1wb3J0IFwicmVhY3QtZGF0ZXRpbWUvY3NzL3JlYWN0LWRhdGV0aW1lLmNzc1wiO1xyXG5pbXBvcnQgeyBsaW5lYXJSZWdyZXNzaW9uLCBsaW5lYXJSZWdyZXNzaW9uTGluZSwgclNxdWFyZWQgfSBmcm9tICdzaW1wbGUtc3RhdGlzdGljcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBYdnNZSlNYKHByb3BzOiBUcmVuREFQLmlXaWRnZXQ8VHJlbkRBUC5pWHZzWT4pIHtcclxuICAgIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcclxuICAgIGNvbnN0IFt0b2dnbGUsIHNldFRvZ2dsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgICBjb25zdCBbcmVjb3JkLCBzZXRSZWNvcmRdID0gUmVhY3QudXNlU3RhdGU8WHZzWT4obmV3IFh2c1kocHJvcHMpKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIC8vcmVjb3JkLmN1cnJlbnQgPSBuZXcgVHJlbmQocHJvcHMpO1xyXG4gICAgfSwgW3RvZ2dsZSwgcHJvcHMuSlNPTl0pO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIEluaXRpYWxpemUocmVjb3JkKVxyXG4gICAgfSwgW3JlY29yZF0pXHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBzZXRSZWNvcmQobmV3IFh2c1koeyAuLi5yZWNvcmQsIEhlaWdodDogcHJvcHMuSGVpZ2h0IH0pKVxyXG4gICAgfSwgW3Byb3BzLkhlaWdodF0pXHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBzZXRSZWNvcmQobmV3IFh2c1koeyAuLi5yZWNvcmQsIERhdGE6IHByb3BzLkRhdGEgfSkpO1xyXG4gICAgfSwgW3Byb3BzLkRhdGFdKTtcclxuXHJcbiAgICBmdW5jdGlvbiBaaXA8VD4oYXJyYXkxOiBUW10sIGZpZWxkMToga2V5b2YgVCwgYXJyYXkyOiBUW10sIGZpZWxkMjoga2V5b2YgVCwgemlwRmllbGQ6IGtleW9mIFQpIHtcclxuICAgICAgICBsZXQgcmV0dXJuQXJyYXk6IHsgWmlwRmllbGQ6IFRba2V5b2YgVF0sIEFycmF5MTogVFtrZXlvZiBUXSwgQXJyYXkyOiAgVFtrZXlvZiBUXX1bXT0gW107XHJcbiAgICAgICAgaWYgKGFycmF5MS5sZW5ndGggPiBhcnJheTIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFycmF5MS5mb3JFYWNoKCh4ZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXkyUG9pbnQgPSBhcnJheTIuZmluZChwb2ludCA9PiBwb2ludFt6aXBGaWVsZF0gPT09IHhkW3ppcEZpZWxkXSlcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheTJQb2ludCA9PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybkFycmF5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIFppcEZpZWxkOiB4ZFt6aXBGaWVsZF0sIEFycmF5MTogeGRbZmllbGQxXSwgQXJyYXkyOiBhcnJheTJQb2ludFtmaWVsZDJdXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhcnJheTIuZm9yRWFjaCgoeGQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5MVBvaW50ID0gYXJyYXkxLmZpbmQocG9pbnQgPT4gcG9pbnRbemlwRmllbGRdID09PSB4ZFt6aXBGaWVsZF0pXHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyYXkxUG9pbnQgPT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICByZXR1cm5BcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBaaXBGaWVsZDogeGRbemlwRmllbGRdLCBBcnJheTI6IHhkW2ZpZWxkMV0sIEFycmF5MTogYXJyYXkxUG9pbnRbZmllbGQyXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJldHVybkFycmF5XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gSW5pdGlhbGl6ZShzZXR0aW5nczogWHZzWSkge1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5KU09OLlguU2VyaWVzID09IHVuZGVmaW5lZCB8fCBzZXR0aW5ncy5KU09OLlkuU2VyaWVzID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCBtYXJnaW4gPSB7IGJvdHRvbTogNTAsIGxlZnQ6IDUwLCB0b3A6IDQwLCByaWdodDogNTAgfTtcclxuICAgICAgICBjb25zdCBzdmdIZWlnaHQgPSBwcm9wcy5IZWlnaHQ7XHJcbiAgICAgICAgZDMuc2VsZWN0KHJlZi5jdXJyZW50KS5zZWxlY3RBbGwoJ3N2ZycpLnJlbW92ZSgpXHJcbiAgICAgICAgY29uc3QgeCA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgLmRvbWFpbihbc2V0dGluZ3MuSlNPTi5YLk1pbiwgc2V0dGluZ3MuSlNPTi5YLk1heF0pICAgICAvLyBjYW4gdXNlIHRoaXMgaW5zdGVhZCBvZiAxMDAwIHRvIGhhdmUgdGhlIG1heCBvZiBkYXRhOiBkMy5tYXgoZGF0YSwgZnVuY3Rpb24oZCkgeyByZXR1cm4gK2QucHJpY2UgfSlcclxuICAgICAgICAgICAgLnJhbmdlKFswLCBzZXR0aW5ncy5XaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0XSk7XHJcbiAgICAgICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgLnJhbmdlKFtzdmdIZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSwgMF0pXHJcbiAgICAgICAgICAgIC5kb21haW4oW3NldHRpbmdzLkpTT04uWS5NaW4sIHNldHRpbmdzLkpTT04uWS5NYXhdKTsgICAvLyBkMy5oaXN0IGhhcyB0byBiZSBjYWxsZWQgYmVmb3JlIHRoZSBZIGF4aXMgb2J2aW91c2x5XHJcblxyXG4gICAgICAgIGNvbnN0IHN2ZyA9IGQzLnNlbGVjdChyZWYuY3VycmVudClcclxuICAgICAgICAgICAgLmFwcGVuZCgnc3ZnJylcclxuICAgICAgICAgICAgLmF0dHIoJ3dpZHRoJywgc2V0dGluZ3MuV2lkdGgpXHJcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBzdmdIZWlnaHQpO1xyXG5cclxuICAgICAgICBjb25zdCB4QXhpcyA9IHN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIChzdmdIZWlnaHQgLSBtYXJnaW4uYm90dG9tKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4KSlcclxuXHJcbiAgICAgICAgc3ZnLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAoc2V0dGluZ3MuV2lkdGggLyAyKSArIFwiLFwiICsgKHN2Z0hlaWdodCAtIG1hcmdpbi5ib3R0b20gLyAzKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAudGV4dChzZXR0aW5ncy5KU09OLlguVW5pdHMpXHJcblxyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAobWFyZ2luLmxlZnQpICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXHJcbiAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHkpKTtcclxuXHJcbiAgICAgICAgc3ZnLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKSB0cmFuc2xhdGUoLVwiICsgc3ZnSGVpZ2h0IC8gMiArIFwiLFwiICsgKG1hcmdpbi5sZWZ0IC8gMykgKyBcIilcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLnRleHQoc2V0dGluZ3MuSlNPTi5ZLlVuaXRzKTtcclxuXHJcbiAgICAgICAgY29uc3QgeERhdGE6IFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50W10gPSBHZXREYXR1bSgneCcpPy5EYXRhID8/IFtdO1xyXG4gICAgICAgIGNvbnN0IHlEYXRhOiBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludFtdID0gR2V0RGF0dW0oJ3knKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICBjb25zdCBjb21iaW5lZERhdGEgPSBaaXAoeERhdGEsIHJlY29yZC5KU09OLlguU2VyaWVzLkZpZWxkLCB5RGF0YSwgcmVjb3JkLkpTT04uWS5TZXJpZXMuRmllbGQsICdUaW1lc3RhbXAnKTsgXHJcbiAgICAgICAgLy9jb25zdCBjb21iaW5lZERhdGEgPSB4RGF0YS5tYXAoKHhkLCBpKSA9PiAoeyBUaW1lc3RhbXA6IHhkLlRpbWVzdGFtcCwgWDogeGRbcmVjb3JkLkpTT04uWFNlcmllcy5GaWVsZF0sIFk6IHlEYXRhW2ldW3JlY29yZC5KU09OLllTZXJpZXMuRmllbGRdIH0pKVxyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRGF0YSA9IGNvbWJpbmVkRGF0YS5maWx0ZXIoZCA9PiBtb21lbnQoZC5aaXBGaWVsZCkudG9EYXRlKCkuZ2V0VGltZSgpID49IHJlY29yZC5KU09OLlRpbWVNaW4gJiYgbW9tZW50KGQuWmlwRmllbGQpLnRvRGF0ZSgpLmdldFRpbWUoKSA8PSByZWNvcmQuSlNPTi5UaW1lTWF4KTtcclxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwiZG90XCIpXHJcbiAgICAgICAgICAgIC5kYXRhKGZpbHRlcmVkRGF0YSlcclxuICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiclwiLCAzLjUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHgoZC5BcnJheTEgYXMgbnVtYmVyKTsgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4geShkLkFycmF5MiBhcyBudW1iZXIpOyB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG5cclxuICAgICAgICBpZiAocmVjb3JkLkpTT04uUmVncmVzc2lvbkxpbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGZpbHRlcmVkRGF0YS5tYXAoZCA9PiBbZC5BcnJheTEgYXMgbnVtYmVyLCBkLkFycmF5MiBhcyBudW1iZXJdKVxyXG4gICAgICAgICAgICBjb25zdCBtb2RlbCA9IGxpbmVhclJlZ3Jlc3Npb24oZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxyTGluZSA9IGxpbmVhclJlZ3Jlc3Npb25MaW5lKG1vZGVsKTtcclxuICAgICAgICAgICAgY29uc3QgcjIgPSByU3F1YXJlZChkYXRhLCBsckxpbmUpO1xyXG4gICAgICAgICAgICBjb25zdCBsaW5lRnVuYyA9IGQzLmxpbmU8bnVtYmVyW10+KCkueChkID0+IHgoZFswXSkpLnkoZCA9PiB5KGxyTGluZShkWzBdKSkpO1xyXG4gICAgICAgICAgICBzdmcuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAncmVkJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtwcm9wcy5XaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0fSwke21hcmdpbi50b3B9KWApXHJcbiAgICAgICAgICAgICAgICAudGV4dChgUjIgLSAke3IyLnRvRml4ZWQoMyl9YCk7XHJcblxyXG4gICAgICAgICAgICBzdmcuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoW2RhdGFdKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgJ3JlZCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgKGQpID0+IGxpbmVGdW5jKGQpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApXHJcblxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEdldERhdHVtKGF4aXM6ICd4JyB8ICd5Jykge1xyXG4gICAgICAgIGlmIChheGlzID09PSAneCcpIHtcclxuICAgICAgICAgICAgaWYgKHJlY29yZC5KU09OLlguU2VyaWVzID09IHVuZGVmaW5lZCkgcmV0dXJuIHtOYW1lOiAnJ30gYXMgYW55O1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcmVjb3JkLkRhdGEuZmluZChkID0+IGQuRGF0YVNvdXJjZS5JRC50b1N0cmluZygpID09PSByZWNvcmQuSlNPTi5YLlNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdHVtID0gZGF0YVNvdXJjZS5maW5kKGRzID0+IGRzLklELnRvU3RyaW5nKCkgPT09IHJlY29yZC5KU09OLlguU2VyaWVzLklELnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBkYXR1bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChyZWNvcmQuSlNPTi5ZLlNlcmllcyA9PSB1bmRlZmluZWQpIHJldHVybiB7IE5hbWU6ICcnIH0gYXMgYW55O1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcmVjb3JkLkRhdGEuZmluZChkID0+IGQuRGF0YVNvdXJjZS5JRC50b1N0cmluZygpID09PSByZWNvcmQuSlNPTi5ZLlNlcmllcy5EYXRhU291cmNlSUQudG9TdHJpbmcoKSk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdHVtID0gZGF0YVNvdXJjZS5maW5kKGRzID0+IGRzLklELnRvU3RyaW5nKCkgPT09IHJlY29yZC5KU09OLlkuU2VyaWVzLklELnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgIHJldHVybiBkYXR1bTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBzdHlsZT17eyB3aWR0aDogcHJvcHMuV2lkdGgsIGhlaWdodDogcHJvcHMuSGVpZ2h0IH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wid2lkZ2l0LWxhYmVsXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMuTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImJ0biBcIiArIHN0eWxlc1tcIndpZGdpdC1jb250cm9sc1wiXX0gdGl0bGU9J1dpZGdldCBTZXR0aW5ncycgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKHRydWUpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHJlZj17cmVmfT48L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8V2lkZ2V0IHsuLi5wcm9wc30gUmVjb3JkPXtyZWNvcmR9IFRvZ2dsZT17dG9nZ2xlfSBTZXRUb2dnbGU9eyhib29sKSA9PiBzZXRUb2dnbGUoYm9vbCl9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pV2lkZ2V0PiBGaWVsZD0nTGFiZWwnIFJlY29yZD17cmVjb3JkfSBUeXBlPSd0ZXh0JyBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQobmV3IFh2c1kocikpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+V2lkdGg8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17cmVjb3JkPy5XaWR0aH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChuZXcgWHZzWSh7IC4uLnJlY29yZCwgV2lkdGg6IHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpIH0pKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHsgLi4ucmVjb3JkLCBXaWR0aDogd2luZG93LmlubmVyV2lkdGggLSAyMDAgfSkpfT5GdWxsIFdpZHRoPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TWluPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEYXRldGltZSB2YWx1ZT17bW9tZW50KHJlY29yZC5KU09OLlRpbWVNaW4pfSBvbkNoYW5nZT17KHZhbHVlKSA9PiBzZXRSZWNvcmQobmV3IFh2c1kocmVjb3JkLlVwZGF0ZUpTT04oJ1RpbWVNaW4nLCBtb21lbnQodmFsdWUpLnRvRGF0ZSgpLmdldFRpbWUoKSkpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TWluPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEYXRldGltZSB2YWx1ZT17bW9tZW50KHJlY29yZC5KU09OLlRpbWVNYXgpfSBvbkNoYW5nZT17KHZhbHVlKSA9PiBzZXRSZWNvcmQobmV3IFh2c1kocmVjb3JkLlVwZGF0ZUpTT04oJ1RpbWVNYXgnLCBtb21lbnQodmFsdWUpLnRvRGF0ZSgpLmdldFRpbWUoKSkpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2IH19IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLkNhbGN1bGF0ZVJhbmdlKCd0aW1lJykpfT5Vc2UgRGF0YTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja0JveDxUcmVuREFQLmlYdnNZPiBSZWNvcmQ9e3JlY29yZC5KU09OfSBGaWVsZD0nUmVncmVzc2lvbkxpbmUnIExhYmVsPSdBZGQgUmVncmVzc2lvbicgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZC5VcGRhdGVKU09OKCdSZWdyZXNzaW9uTGluZScsIHIuUmVncmVzc2lvbkxpbmUpKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxici8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxoNj5YIEF4aXM8L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pQXhpcz4gUmVjb3JkPXtyZWNvcmQuSlNPTi5YfSBGaWVsZD0nVW5pdHMnIFZhbGlkPXsoKSA9PiB0cnVlfSBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldEF4aXMoJ3gnLCAnVW5pdHMnLCByLlVuaXRzKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaUF4aXM+IFJlY29yZD17cmVjb3JkLkpTT04uWH0gRmllbGQ9J01pbicgVmFsaWQ9eygpID0+IHRydWV9IFNldHRlcj17KHIpID0+IHNldFJlY29yZChyZWNvcmQuU2V0QXhpcygneCcsICdNaW4nLCByLk1pbikpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlBeGlzPiBSZWNvcmQ9e3JlY29yZC5KU09OLlh9IEZpZWxkPSdNYXgnIFZhbGlkPXsoKSA9PiB0cnVlfSBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldEF4aXMoJ3gnLCAnTWF4Jywgci5NYXgpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2IH19IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLkNhbGN1bGF0ZVJhbmdlKCd4JykpfT5Vc2UgRGF0YTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlkgQXhpczwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlBeGlzPiBSZWNvcmQ9e3JlY29yZC5KU09OLll9IEZpZWxkPSdVbml0cycgVmFsaWQ9eygpID0+IHRydWV9IFNldHRlcj17KHIpID0+IHNldFJlY29yZChyZWNvcmQuU2V0QXhpcygneScsICdVbml0cycsIHIuVW5pdHMpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pQXhpcz4gUmVjb3JkPXtyZWNvcmQuSlNPTi5ZfSBGaWVsZD0nTWluJyBWYWxpZD17KCkgPT4gdHJ1ZX0gU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKHJlY29yZC5TZXRBeGlzKCd5JywgJ01pbicsIHIuTWluKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaUF4aXM+IFJlY29yZD17cmVjb3JkLkpTT04uWX0gRmllbGQ9J01heCcgVmFsaWQ9eygpID0+IHRydWV9IFNldHRlcj17KHIpID0+IHNldFJlY29yZChyZWNvcmQuU2V0QXhpcygneScsICdNYXgnLCByLk1heCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMlwiIHN0eWxlPXt7IHBvc2l0aW9uOiAncmVsYXRpdmUnIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgc3R5bGU9e3sgcG9zaXRpb246ICdhYnNvbHV0ZScsIGJvdHRvbTogMTYgfX0gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHNldFJlY29yZChyZWNvcmQuQ2FsY3VsYXRlUmFuZ2UoJ3knKSl9PlVzZSBEYXRhPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDY+U2VyaWVzPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYWNjb3JkaW9uXCIgc3R5bGU9e3sgb3ZlcmZsb3dZOiAnYXV0bycsIG1heEhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gMzAwLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAvIDIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNvcmQuRGF0YS5tYXAoKGQsIGkpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNhcmQtbGlua1wiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiBocmVmPXtcIiNjb2xsYXBzZVwiICsgaX0+e2QuRGF0YVNvdXJjZS5OYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPXtcImNvbGxhcHNlXCIgKyBpfSBjbGFzc05hbWU9XCJjb2xsYXBzZSBzaG93XCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+WCBTZXJpZXM8L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJpZXNTZWxlY3QgV2lkZ2V0PXtyZWNvcmR9IERhdGFTb3VyY2VJRD17ZC5EYXRhU291cmNlLklEfSBBeGlzPSd4JyBDYWxsYmFjaz17KCkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZCkpfSAgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsocmVjb3JkLkpTT04uWC5TZXJpZXMgIT0gdW5kZWZpbmVkID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+e0dldERhdHVtKCd4Jyk/Lk5hbWUgPz8gJyd9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb1hEQSBJbmRleD17aX0gRGF0YT17R2V0RGF0dW0oJ3gnKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJpZXNQaWNrZXIgQXhpcz0neCcgU2VyaWVzPXtyZWNvcmQuSlNPTi5YLlNlcmllc30gV2lkZ2V0PXtyZWNvcmR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFh2c1kocmVjb3JkKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IDogbnVsbCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+WSBTZXJpZXM8L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzU2VsZWN0IFdpZGdldD17cmVjb3JkfSBEYXRhU291cmNlSUQ9e2QuRGF0YVNvdXJjZS5JRH0gQXhpcz0neScgQ2FsbGJhY2s9eygpID0+IHNldFJlY29yZChuZXcgWHZzWShyZWNvcmQpKX0gIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KHJlY29yZC5KU09OLlkuU2VyaWVzICE9IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPntHZXREYXR1bSgneScpPy5OYW1lID8/ICcnfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9YREEgSW5kZXg9e2l9IERhdGE9e0dldERhdHVtKCd5Jyl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIEF4aXM9J3knIFNlcmllcz17cmVjb3JkLkpTT04uWS5TZXJpZXN9IFdpZGdldD17cmVjb3JkfSBDYWxsYmFjaz17KCkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiA6IG51bGwpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9XaWRnZXQ+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbmNvbnN0IFNlcmllc1BpY2tlciA9IChwcm9wczogeyBBeGlzOiAneCd8J3knLCBTZXJpZXM6IFRyZW5EQVAuaVNlcmllcywgV2lkZ2V0OiBYdnNZLCBDYWxsYmFjazogKCkgPT4gdm9pZCB9KSA9PiB7XHJcbiAgICBjb25zdCBbdHlwZSwgc2V0VHlwZV0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkPihwcm9wcy5TZXJpZXMuRmllbGQpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgcHJvcHMuV2lkZ2V0LlVwZGF0ZVNlcmllcyhwcm9wcy5BeGlzLCBcIkZpZWxkXCIsIHR5cGUpO1xyXG4gICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICB9LCBbdHlwZV0pO1xyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXt0eXBlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0VHlwZShldnQudGFyZ2V0LnZhbHVlIGFzIFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpfT5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQXZlcmFnZVwiPkF2Zzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1heGltdW1cIj5NYXg8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxpbmtcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlJlbW92ZVNlcmllcyhwcm9wcy5BeGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfX0+e0Nyb3NzTWFya308L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC8+XHJcblxyXG4gICAgKTtcclxufVxyXG5cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEhpc3RvZ3JhbS50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMTEvMTYvMjAyMCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcblxyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAZ3BhLWdlbXN0b25lL3JlYWN0LWZvcm1zJztcclxuaW1wb3J0IFdpZGdldCwgeyBTZXJpZXNTZWxlY3QgfSBmcm9tICcuL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9YREEgZnJvbSAnLi9XaWRnZXQvWERBL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBmcm9tICcuL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvU2FwcGhpcmUgZnJvbSAnLi9XaWRnZXQvU2FwcGhpcmUvQWRkaXRpb25hbEluZm8nO1xyXG5cclxuaW1wb3J0IHsgQ3Jvc3NNYXJrIH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9ncGEtc3ltYm9scyc7XHJcbmltcG9ydCB7IEhpc3RvZ3JhbSB9IGZyb20gJy4vSW1wbGVtZW50YXRpb25zJztcclxuXHJcblxyXG5jb25zdCBTdmdTdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcclxuICAgIGZpbGw6ICdub25lJyxcclxuICAgIHNoYXBlUmVuZGVyaW5nOiAnY3Jpc3BFZGdlcycsXHJcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXHJcbiAgICBXZWJraXRUb3VjaENhbGxvdXQ6ICdub25lJyxcclxuICAgIFdlYmtpdFVzZXJTZWxlY3Q6ICdub25lJyxcclxuICAgIEtodG1sVXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgTW96VXNlclNlbGVjdDogJ25vbmUnLFxyXG4gICAgbXNVc2VyU2VsZWN0OiAnbm9uZSdcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhpc3RvZ3JhbUpTWChwcm9wczogVHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW0+KSB7XHJcbiAgICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IFJlYWN0LnVzZVN0YXRlPEhpc3RvZ3JhbT4obmV3IEhpc3RvZ3JhbShwcm9wcykpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICB9LCBbdG9nZ2xlLCBwcm9wcy5KU09OXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBJbml0aWFsaXplKHJlY29yZCk7XHJcbiAgICB9LCBbcmVjb3JkXSlcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHByb3BzKSk7XHJcbiAgICB9LCBbcHJvcHMuRGF0YSwgcHJvcHMuSGVpZ2h0LCBwcm9wcy5EZXZpY2VdKTtcclxuXHJcbiAgICBmdW5jdGlvbiBJbml0aWFsaXplKHNldHRpbmdzOiBUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldDxUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbT4pIHtcclxuICAgICAgICBjb25zdCBwcm9maWxlID0gKHNldHRpbmdzLkpTT04uU2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzW10pLm1hcChzZXJpZXMgPT4gc2VyaWVzLlByb2ZpbGUpLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldiB8fCBjdXJyLCBmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgbWFyZ2luID0geyBib3R0b206IDUwLCBsZWZ0OiA1MCwgdG9wOiA0MCwgcmlnaHQ6IChwcm9maWxlID8gNzAgOiAyMCkgfTtcclxuICAgICAgICBjb25zdCBzdmdIZWlnaHQgPSByZWNvcmQuSGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XHJcblxyXG4gICAgICAgIGNvbnN0IGV4dGVudCA9IGQzLmV4dGVudChbXS5jb25jYXQoLi4uKHNldHRpbmdzLkpTT04uU2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzW10pLm1hcChzZXJpZXMgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlID0gc2V0dGluZ3MuRGF0YS5maW5kKGRkID0+IGRkLkRhdGFTb3VyY2UuSUQgPT09IHNlcmllcz8uRGF0YVNvdXJjZUlEID8/IDApXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhU291cmNlPy5EYXRhID8/IFtdO1xyXG4gICAgICAgICAgICBsZXQgZGF0dW07XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YVNvdXJjZT8uRGF0YVNvdXJjZS5UeXBlID09PSAnT3Blbkhpc3RvcmlhbicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzT3Blbkhpc3RvcmlhbjtcclxuICAgICAgICAgICAgICAgIGRhdHVtID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikgPT4gZGRbcHJvcHMuQnldID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuU2lnbmFsVHlwZSA9PT0gcy5UeXBlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IHNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbVNlcmllc1hEQTtcclxuICAgICAgICAgICAgICAgIGRhdHVtID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkgPT4gZGRbcHJvcHMuQnldID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuVHlwZSA9PT0gcy5UeXBlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzLkNoYXJhY3RlcmlzdGljKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzU2FwcGhpcmU7XHJcbiAgICAgICAgICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YSkgPT4gZGQuTWV0ZXIgPT09IHByb3BzLkRldmljZSAmJiBkZC5QaGFzZSA9PT0gcy5QaGFzZSAmJiBkZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5NZWFzdXJlbWVudCAmJiBkZC5IYXJtb25pYyA9PT0gcy5IYXJtb25pYyk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgZGF0dW0gPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXR1bS5tYXAoZCA9PiBkW3Nlcmllcy5GaWVsZF0gYXMgbnVtYmVyKVxyXG4gICAgICAgIH0pKSk7XHJcblxyXG4gICAgICAgIC8vLy8gc2V0IHRoZSBwYXJhbWV0ZXJzIGZvciB0aGUgaGlzdG9ncmFtXHJcbiAgICAgICAgbGV0IGhpc3RvZ3JhbXMgPSAoKHNldHRpbmdzLkpTT04/LlNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbVNlcmllc1tdKSA/PyBbXSkubWFwKHNlcmllcyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSByZWNvcmQuRGF0YS5maW5kKGRkID0+IGRkLkRhdGFTb3VyY2UuSUQgPT09IHNlcmllcz8uRGF0YVNvdXJjZUlEID8/IDApXHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhU291cmNlPy5EYXRhID8/IFtdO1xyXG4gICAgICAgICAgICBsZXQgZGF0dW07XHJcbiAgICAgICAgICAgIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHMgPSBzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNPcGVuSGlzdG9yaWFuO1xyXG4gICAgICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKSA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5TaWduYWxUeXBlID09PSBzLlR5cGUgJiYgZGQuUGhhc2UgPT09IHMuUGhhc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzWERBO1xyXG4gICAgICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlYREFSZXR1cm5EYXRhKSA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5UeXBlID09PSBzLlR5cGUgJiYgZGQuUGhhc2UgPT09IHMuUGhhc2UgJiYgZGQuQ2hhcmFjdGVyaXN0aWMgPT09IHMuQ2hhcmFjdGVyaXN0aWMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHMgPSBzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNTYXBwaGlyZTtcclxuICAgICAgICAgICAgICAgIGRhdHVtID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKSA9PiBkZC5NZXRlciA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzLk1lYXN1cmVtZW50ICYmIGRkLkhhcm1vbmljID09PSBzLkhhcm1vbmljKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBkYXR1bSA9IHtEYXRhOiBbXX07XHJcblxyXG4gICAgICAgICAgICBkYXR1bSA9IGRhdHVtPy5EYXRhLm1hcChkID0+IGRbc2VyaWVzLkZpZWxkXSkgPz8gW107XHJcblxyXG4gICAgICAgICAgICBsZXQgaGlzdG9ncmFtID0gZDMuaGlzdG9ncmFtPG51bWJlciwgbnVtYmVyPigpXHJcbiAgICAgICAgICAgICAgICAudmFsdWUoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQ7IH0pICAgLy8gSSBuZWVkIHRvIGdpdmUgdGhlIHZlY3RvciBvZiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgLmRvbWFpbihleHRlbnQpICAvLyB0aGVuIHRoZSBkb21haW4gb2YgdGhlIGdyYXBoaWNcclxuICAgICAgICAgICAgICAgIC50aHJlc2hvbGRzKHNldHRpbmdzLkpTT04uQmluQ291bnQpOyAvLyB0aGVuIHRoZSBudW1iZXJzIG9mIGJpbnNcclxuXHJcbiAgICAgICAgICAgIC8vIEFuZCBhcHBseSB0aGlzIGZ1bmN0aW9uIHRvIGRhdGEgdG8gZ2V0IHRoZSBiaW5zXHJcbiAgICAgICAgICAgIHJldHVybiBoaXN0b2dyYW0oZGF0dW0pO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IHlNYXggPSBNYXRoLm1heCguLi5bXS5jb25jYXQoLi4uaGlzdG9ncmFtcykubWFwKGIgPT4gYi5sZW5ndGgpKTtcclxuICAgICAgIGQzLnNlbGVjdChyZWYuY3VycmVudCkuc2VsZWN0QWxsKCdzdmcnKS5yZW1vdmUoKVxyXG4gICAgICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHJlZi5jdXJyZW50KVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIHNldHRpbmdzLldpZHRoKVxyXG4gICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCBzZXR0aW5ncy5IZWlnaHQpXHJcblxyXG4gICAgICAgIGxldCB4TWluID0gTWF0aC5taW4oLi4uW10uY29uY2F0KC4uLmhpc3RvZ3JhbXMpLm1hcChiID0+IGIueDApKTtcclxuICAgICAgICBsZXQgeE1heCA9IE1hdGgubWF4KC4uLltdLmNvbmNhdCguLi5oaXN0b2dyYW1zKS5tYXAoYiA9PiBiLngxKSk7XHJcbiAgICAgICAgY29uc3QgeCA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgLmRvbWFpbihbeE1pbiwgeE1heF0pICAgICAvLyBjYW4gdXNlIHRoaXMgaW5zdGVhZCBvZiAxMDAwIHRvIGhhdmUgdGhlIG1heCBvZiBkYXRhOiBkMy5tYXgoZGF0YSwgZnVuY3Rpb24oZCkgeyByZXR1cm4gK2QucHJpY2UgfSlcclxuICAgICAgICAgICAgLnJhbmdlKFswLCBzZXR0aW5ncy5XaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0XSk7XHJcblxyXG5cclxuICAgICAgICBjb25zdCB4QXhpcyA9IHN2Zy5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIChzZXR0aW5ncy5IZWlnaHQgLSBtYXJnaW4uYm90dG9tKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpKVxyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzZXR0aW5ncy5XaWR0aCAvIDIpICsgXCIsXCIgKyAoc2V0dGluZ3MuSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbS8zKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAudGV4dChyZWNvcmQuSlNPTi5Vbml0cylcclxuXHJcbiAgICAgICAgY29uc3QgeSA9IGQzLnNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgLnJhbmdlKFtzZXR0aW5ncy5IZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbSwgMF0pXHJcbiAgICAgICAgICAgIC5kb21haW4oWzAsIHlNYXhdKTsgICAvLyBkMy5oaXN0IGhhcyB0byBiZSBjYWxsZWQgYmVmb3JlIHRoZSBZIGF4aXMgb2J2aW91c2x5XHJcblxyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5KSk7XHJcbiAgICAgICAgc3ZnLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKSB0cmFuc2xhdGUoLVwiICsgc2V0dGluZ3MuSGVpZ2h0LzIgKyBcIixcIiArIG1hcmdpbi5sZWZ0LzMgKyBcIilcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcclxuICAgICAgICAgICAgLnRleHQoXCJDb3VudHNcIilcclxuXHJcbiAgICAgICAgY29uc3QgYmluV2lkdGggPSBNYXRoLm1heCguLi5oaXN0b2dyYW1zLm1hcChoaXN0b2dyYW0gPT4gTWF0aC5tYXgoLi4uaGlzdG9ncmFtLm1hcChhID0+IHgoYS54MSkgLSB4KGEueDApKSkpKTtcclxuICAgICAgICAvL3N2Zy5zZWxlY3RBbGwoXCJnLmJpbnNcIikucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmJpbnNcIilcclxuICAgICAgICAgICAgLmRhdGEoc2V0dGluZ3MuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNbXSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdiaW5zJykuYXR0cihcImZpbGxcIiwgKHNlcmllcykgPT4gc2VyaWVzLkNvbG9yKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQsIGluZGV4KSA9PiBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnQgKyBpbmRleCAqIGJpbldpZHRoIC8gc2V0dGluZ3MuSlNPTi5TZXJpZXMubGVuZ3RofSwke21hcmdpbi50b3B9KWApXHJcbiAgICAgICAgICAgICAgICAvLy5hdHRyKFwib3BhY2l0eVwiLCAwLjMpXHJcbiAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKCdyZWN0JylcclxuICAgICAgICAgICAgICAgIC5kYXRhKChzZXJpZXMsIGluZGV4KSA9PiBoaXN0b2dyYW1zW2luZGV4XSlcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCAoZCxpLGcpID0+IGB0cmFuc2xhdGUoJHt4KGQueDApfSwke3koZC5sZW5ndGgpfSlgKVxyXG4gICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIChkKSA9PiAoeChkLngxKSAtIHgoZC54MCkgPiAyID8gKHgoZC54MSkgLSB4KGQueDApKSAvIHNldHRpbmdzLkpTT04uU2VyaWVzLmxlbmd0aCA6IDIpIC0gMSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCAoZCkgPT4gc3ZnSGVpZ2h0IC0geShkLmxlbmd0aCkpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIGlmIChwcm9maWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2ZpbGVzOiB7IENvbG9yOiBzdHJpbmcsIFByb2ZpbGU6IGFueSB9W10gPSAoc2V0dGluZ3MuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNbXSkuZmlsdGVyKHNlcmllcyA9PiBzZXJpZXMuUHJvZmlsZSkubWFwKChzZXJpZXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YVNvdXJjZSA9IHNldHRpbmdzLkRhdGEuZmluZChkID0+IGQuRGF0YVNvdXJjZS5JRCA9PT0gc2VyaWVzLkRhdGFTb3VyY2VJRCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZT8uRGF0YSA/PyBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBkYXR1bTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJylcclxuICAgICAgICAgICAgICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4pID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlNpZ25hbFR5cGUgPT09IChzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNPcGVuSGlzdG9yaWFuKS5UeXBlICYmIGRkLlBoYXNlID09PSAoc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzT3Blbkhpc3RvcmlhbikuUGhhc2UpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YVNvdXJjZT8uRGF0YVNvdXJjZS5UeXBlID09PSAnVHJlbkRBUERCJylcclxuICAgICAgICAgICAgICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaVhEQVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlR5cGUgPT09IChzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNYREEpLlR5cGUgJiYgZGQuUGhhc2UgPT09IChzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNYREEpLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSAoc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzWERBKS5DaGFyYWN0ZXJpc3RpYyk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpID0+IGRkLk1ldGVyID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuSGFybW9uaWMgPT09IChzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNTYXBwaGlyZSkuSGFybW9uaWMgJiYgZGQuUGhhc2UgPT09IChzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNTYXBwaGlyZSkuUGhhc2UgJiYgZGQuQ2hhcmFjdGVyaXN0aWMgPT09IChzZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNTYXBwaGlyZSkuTWVhc3VyZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGRhdHVtID0ge0RhdGE6IFtdfTtcclxuXHJcbiAgICAgICAgICAgICAgICBkYXR1bSA9IGRhdHVtPy5EYXRhLm1hcChkID0+IGRbc2VyaWVzLkZpZWxkXSkgPz8gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgaGlzdG9ncmFtID0gZDMuaGlzdG9ncmFtPG51bWJlciwgbnVtYmVyPigpXHJcbiAgICAgICAgICAgICAgICAgICAgLnZhbHVlKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkOyB9KSAgIC8vIEkgbmVlZCB0byBnaXZlIHRoZSB2ZWN0b3Igb2YgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGQzLmV4dGVudChkYXR1bSkgYXMgW251bWJlciwgbnVtYmVyXSkgIC8vIHRoZW4gdGhlIGRvbWFpbiBvZiB0aGUgZ3JhcGhpY1xyXG4gICAgICAgICAgICAgICAgICAgIC50aHJlc2hvbGRzKHNldHRpbmdzLkpTT04uQmluQ291bnQpKGRhdHVtKTsgLy8gdGhlbiB0aGUgbnVtYmVycyBvZiBiaW5zXHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgQ29sb3I6IHNlcmllcy5Qcm9maWxlQ29sb3IsIFByb2ZpbGU6IGhpc3RvZ3JhbS5tYXAoKHN1bSA9PiB2YWx1ZSA9PiBzdW0gKz0gdmFsdWUubGVuZ3RoKSgwKSkubWFwKChwcm9mLCBpKSA9PiAoeyBCaW46IGhpc3RvZ3JhbVtpXS54MCwgVmFsdWU6IHByb2YgfSkpfTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL2NvbnN0IHByb2ZpbGVzID0gaGlzdG9ncmFtcy5tYXAoaGlzdCA9PiBoaXN0Lm1hcCgoc3VtID0+IHZhbHVlID0+IHN1bSArPSB2YWx1ZS5sZW5ndGgpKDApKS5tYXAoKHByb2YsIGkpID0+ICh7IEJpbjogaGlzdFtpXS54MCwgVmFsdWU6IHByb2YgfSkpKTtcclxuICAgICAgICAgICAgY29uc3QgcHlNYXggPSBNYXRoLm1heCguLi5wcm9maWxlcy5tYXAocHIgPT4gcHIuUHJvZmlsZSkucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2LmNvbmNhdChjdXJyKSwgW10pLm1hcChwID0+IHAuVmFsdWUpKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcHkgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgICAgICAucmFuZ2UoW3NldHRpbmdzLkhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tLCAwXSlcclxuICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHB5TWF4XSk7ICAgLy8gZDMuaGlzdCBoYXMgdG8gYmUgY2FsbGVkIGJlZm9yZSB0aGUgWSBheGlzIG9idmlvdXNseVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcHlBeGlzID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHNldHRpbmdzLldpZHRoIC0gbWFyZ2luLnJpZ2h0KSArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxyXG4gICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc1JpZ2h0KHB5KSk7XHJcbiAgICAgICAgICAgIHN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApIHRyYW5zbGF0ZSgtXCIgKyBzZXR0aW5ncy5IZWlnaHQgLyAyICsgXCIsXCIgKyAoc2V0dGluZ3MuV2lkdGggLSBtYXJnaW4ucmlnaHQvMykgKyBcIilcIilcclxuICAgICAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgICAgICAudGV4dChcIlByb2ZpbGVcIilcclxuXHJcbiAgICAgICAgICAgIC8vY29uc3QgZmlsdGVyZWREYXRhID0gcHJvZmlsZS5maW5kKGRzID0+IGRzLklEID09PSBzZXJpZXMuSUQpPy5EYXRhID8/IFtdKS5maWx0ZXIoZHMgPT4gbW9tZW50KGRzLlRpbWVzdGFtcCkudG9EYXRlKCkuZ2V0VGltZSgpID49IHNldHRpbmdzLkpTT04uTWluICYmIG1vbWVudChkcy5UaW1lc3RhbXApLnRvRGF0ZSgpLmdldFRpbWUoKSA8PSBzZXR0aW5ncy5KU09OLk1heCAmJiBkc1tmaWVsZF0gPj0gYXhpcy5NaW4gJiYgZHNbZmllbGRdIDw9IGF4aXMuTWF4KVxyXG4gICAgICAgICAgICBjb25zdCBsaW5lRnVuYyA9IGQzLmxpbmU8e0JpbjogbnVtYmVyLCBWYWx1ZTogbnVtYmVyfT4oKS54KGRkID0+IHgoZGQuQmluKSkueShkZCA9PiBweShkZC5WYWx1ZSkpO1xyXG5cclxuICAgICAgICAgICAgc3ZnLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKHByb2ZpbGVzKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZCA9PiBkLkNvbG9yKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIChkKSA9PiBsaW5lRnVuYyhkLlByb2ZpbGUpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBzdHlsZT17eyB3aWR0aDogcHJvcHMuV2lkdGgsIGhlaWdodDogcHJvcHMuSGVpZ2h0IH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wid2lkZ2l0LWxhYmVsXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMuTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImJ0biBcIiArIHN0eWxlc1tcIndpZGdpdC1jb250cm9sc1wiXX0gdGl0bGU9J1dpZGdldCBTZXR0aW5ncycgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKHRydWUpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHJlZj17cmVmfT48L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8V2lkZ2V0IHsuLi5wcm9wc30gUmVjb3JkPXtyZWNvcmR9IFRvZ2dsZT17dG9nZ2xlfSBTZXRUb2dnbGU9eyhib29sKSA9PiBzZXRUb2dnbGUoYm9vbCkgfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ+IEZpZWxkPSdMYWJlbCcgUmVjb3JkPXtyZWNvcmR9IFR5cGU9J3RleHQnIFNldHRlcj17KHIpID0+IHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHIpKX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPldpZHRoPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZD8uV2lkdGggPz8gMH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHsgLi4ucmVjb3JkLCBXaWR0aDogcGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkgfSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IEhpc3RvZ3JhbSh7IC4uLnJlY29yZCwgV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoIC0gMjAwIH0pKX0+RnVsbCBXaWR0aDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW0+IEZpZWxkPSdVbml0cycgUmVjb3JkPXtyZWNvcmQuSlNPTn0gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBIaXN0b2dyYW0oeyAuLi5yZWNvcmQsIEpTT046IHIgfSkpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW0+IEZpZWxkPSdCaW5Db3VudCcgTGFiZWw9J0JpbnMnIFJlY29yZD17cmVjb3JkLkpTT059IFR5cGU9J251bWJlcicgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBIaXN0b2dyYW0oeyAuLi5yZWNvcmQsIEpTT046IHIgfSkpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgey8qXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbT4gRmllbGQ9J01pbicgTGFiZWw9J01pbicgUmVjb3JkPXtyZWNvcmQuSlNPTiBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbX0gVHlwZT0nbnVtYmVyJyBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQoeyAuLi5yZWNvcmQsIEpTT046IHIgfSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtPiBGaWVsZD0nTWF4JyBSZWNvcmQ9e3JlY29yZC5KU09OIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtfSBUeXBlPSdudW1iZXInIFNldHRlcj17KHIpID0+IHNldFJlY29yZCh7IC4uLnJlY29yZCwgSlNPTjogciB9KX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIiBzdHlsZT17e3Bvc2l0aW9uOiAncmVsYXRpdmUnfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgYm90dG9tOiAxNiB9fSB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4gc2V0UmVjb3JkKHJlY29yZC5DYWxjdWxhdGVBeGlzUmFuZ2UoKSl9PlVzZSBEYXRhPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAqL31cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDY+U2VyaWVzPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYWNjb3JkaW9uXCIgc3R5bGU9e3tvdmVyZmxvd1k6ICdhdXRvJywgbWF4SGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAzMDAsIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LzJ9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3JlY29yZC5EYXRhLm1hcCgoZCwgaSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2FyZC1saW5rXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGhyZWY9e1wiI2NvbGxhcHNlXCIgKyBpfT57ZC5EYXRhU291cmNlLk5hbWV9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPXtcImNvbGxhcHNlXCIgKyBpfSBjbGFzc05hbWU9XCJjb2xsYXBzZSBzaG93XCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzU2VsZWN0IFdpZGdldD17cmVjb3JkfSBEYXRhU291cmNlSUQ9e2QuRGF0YVNvdXJjZS5JRH0gQ2FsbGJhY2s9eygpID0+IHNldFJlY29yZChuZXcgSGlzdG9ncmFtKHJlY29yZCkpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicgPyAoKHJlY29yZC5KU09OPy5TZXJpZXMgPz8gW10pIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzWERBW10pLm1hcCgoc2VyaWVzLGluZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0dW0gPSAoZC5EYXRhIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGFbXSkuZmluZChkZCA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5UeXBlID09PSBzZXJpZXMuVHlwZSAmJiBkZC5QaGFzZSA9PT0gc2VyaWVzLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzZXJpZXMuQ2hhcmFjdGVyaXN0aWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIChkYXR1bSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2luZH0gY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57ZGF0dW0/Lk5hbWV9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb1hEQSBEYXRhPXtkYXR1bX0gSW5kZXg9e2l9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIEluZGV4PXtpbmR9IFNlcmllcz17c2VyaWVzfSBXaWRnZXQ9e3JlY29yZH0gQ2FsbGJhY2s9eyh3aWRnZXQpID0+IHNldFJlY29yZCh3aWRnZXQpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IG51bGwpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsoZC5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScgPyAoKHJlY29yZC5KU09OPy5TZXJpZXMgPz8gW10pIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzU2FwcGhpcmVbXSkubWFwKChzZXJpZXMsIGluZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0dW0gPSAoZC5EYXRhIGFzIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YVtdKS5maW5kKGRkID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzZXJpZXMuTWVhc3VyZW1lbnQgJiYgZGQuUGhhc2UgPT09IHNlcmllcy5QaGFzZSAgJiYgZGQuSGFybW9uaWMgPT09IHNlcmllcy5IYXJtb25pYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKGRhdHVtID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aW5kfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPntkYXR1bT8uTmFtZX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvU2FwcGhpcmUgRGF0YT17ZGF0dW19IEluZGV4PXtpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcmllc1BpY2tlciBJbmRleD17aW5kfSBTZXJpZXM9e3Nlcmllc30gV2lkZ2V0PXtyZWNvcmR9IENhbGxiYWNrPXsod2lkZ2V0KSA9PiBzZXRSZWNvcmQod2lkZ2V0KX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBudWxsKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KGQuRGF0YVNvdXJjZS5UeXBlID09PSAnT3Blbkhpc3RvcmlhbicgPyAoKHJlY29yZC5KU09OPy5TZXJpZXMgPz8gW10pIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzT3Blbkhpc3RvcmlhbltdKS5tYXAoKHNlcmllcywgaW5kKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXR1bSA9IChkLkRhdGEgYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybltdKS5maW5kKGRkID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlNpZ25hbFR5cGUgPT09IHNlcmllcy5UeXBlICYmIGRkLlBoYXNlID09PSBzZXJpZXMuUGhhc2UgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoZGF0dW0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpbmR9IGNsYXNzTmFtZT1cImxpc3QtZ3JvdXAtaXRlbVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+e2RhdHVtPy5EZXZpY2UgKyAnIC0gJyArIGRhdHVtPy5EZXNjcmlwdGlvbiB9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gRGF0YT17ZGF0dW19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIEluZGV4PXtpbmR9IFNlcmllcz17c2VyaWVzfSBXaWRnZXQ9e3JlY29yZH0gQ2FsbGJhY2s9eyh3aWRnZXQpID0+IHNldFJlY29yZCh3aWRnZXQpfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IG51bGwpfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L1dpZGdldD5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICApO1xyXG5cclxufVxyXG5cclxuY29uc3QgU2VyaWVzUGlja2VyID0gKHByb3BzOiB7IEluZGV4OiBudW1iZXIsIFNlcmllczogVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXMsIFdpZGdldDogSGlzdG9ncmFtLCBDYWxsYmFjazogKHdpZGdldDogSGlzdG9ncmFtKSA9PiB2b2lkIH0pID0+IHtcclxuICAgIGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihwcm9wcy5TZXJpZXMuQ29sb3IpO1xyXG4gICAgY29uc3QgW3R5cGUsIHNldFR5cGVdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZD4ocHJvcHMuU2VyaWVzLkZpZWxkKTtcclxuICAgIGNvbnN0IFtwcm9maWxlLCBzZXRQcm9maWxlXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KHByb3BzLlNlcmllcy5Qcm9maWxlKTtcclxuICAgIGNvbnN0IFtwQ29sb3IsIHNldFBDb2xvcl0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KHByb3BzLlNlcmllcy5Qcm9maWxlQ29sb3IpO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHByb3BzLkNhbGxiYWNrKHByb3BzLldpZGdldC5VcGRhdGVTZXJpZXMocHJvcHMuSW5kZXgsIFwiQ29sb3JcIiwgY29sb3IpKSwgW2NvbG9yXSk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gcHJvcHMuQ2FsbGJhY2socHJvcHMuV2lkZ2V0LlVwZGF0ZVNlcmllcyhwcm9wcy5JbmRleCwgXCJGaWVsZFwiLCB0eXBlKSksIFt0eXBlXSk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gcHJvcHMuQ2FsbGJhY2socHJvcHMuV2lkZ2V0LlVwZGF0ZVNlcmllcyhwcm9wcy5JbmRleCwgXCJQcm9maWxlXCIsIHByb2ZpbGUpKSwgW3Byb2ZpbGVdKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiBwcm9wcy5DYWxsYmFjayhwcm9wcy5XaWRnZXQuVXBkYXRlU2VyaWVzKHByb3BzLkluZGV4LCBcIlByb2ZpbGVDb2xvclwiLCBwQ29sb3IpKSwgW3BDb2xvcl0pO1xyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbD5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXt0eXBlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0VHlwZShldnQudGFyZ2V0LnZhbHVlIGFzIFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpfT5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQXZlcmFnZVwiPkF2Zzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1heGltdW1cIj5NYXg8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbD5Db2xvcjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNvbG9yXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e2NvbG9yfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0Q29sb3IoZXZ0LnRhcmdldC52YWx1ZSl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xXCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWw+UHJvZmlsZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgc3R5bGU9e3t3aWR0aDogMjB9fSAgdmFsdWU9e3Byb2ZpbGU/LnRvU3RyaW5nKCl9IGNoZWNrZWQ9e3Byb2ZpbGV9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRQcm9maWxlKGV2dC50YXJnZXQuY2hlY2tlZCl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsPlByb2ZpbGUgQ29sb3I8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjb2xvclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtwQ29sb3J9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRQQ29sb3IoZXZ0LnRhcmdldC52YWx1ZSl9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxpbmtcIiBvbkNsaWNrPXsoKSA9PiBwcm9wcy5DYWxsYmFjayhwcm9wcy5XaWRnZXQuUmVtb3ZlU2VyaWVzKHByb3BzLkluZGV4KSkgfT57Q3Jvc3NNYXJrfTwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Lz5cclxuXHJcbik7XHJcbn0iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgSW1wbGVtZW50YXRpb25zLnRzIC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjEsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDAxLzI3LzIwMjEgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCB7IENyZWF0ZUd1aWQsIFJhbmRvbUNvbG9yIH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9oZWxwZXItZnVuY3Rpb25zJztcclxuaW1wb3J0IHN0YXRzIGZyb20gJ3N0YXRzLWxpdGUnO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IE9wZW5IaXN0b3JpYW4sIE9wZW5YREEgfSBmcm9tICdAZ3BhLWdlbXN0b25lL2FwcGxpY2F0aW9uLXR5cGluZ3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdpZGdldDxUIGV4dGVuZHMgVHJlbkRBUC5UZW1wbGF0YWJsZVdpZGdldENsYXNzLCBVIGV4dGVuZHMgVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGUgPSBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT4gaW1wbGVtZW50cyBUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldDxULFU+e1xyXG4gICAgSlNPTjogVDtcclxuICAgIEhlaWdodDogbnVtYmVyO1xyXG4gICAgV2lkdGg6IG51bWJlcjtcclxuICAgIFR5cGU6IFRyZW5EQVAuV2lkZ2V0VHlwZTtcclxuICAgIExhYmVsOiBzdHJpbmc7XHJcbiAgICBEYXRhOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuPFU+W107XHJcbiAgICBCeTogVHJlbkRBUC5UZW1wbGF0ZUJ5O1xyXG4gICAgRGV2aWNlOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VCxVPikge1xyXG4gICAgICAgIHRoaXMuSGVpZ2h0ID0gcHJvcHMuSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuV2lkdGggPSBwcm9wcy5XaWR0aDtcclxuICAgICAgICB0aGlzLlR5cGUgPSBwcm9wcy5UeXBlO1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBwcm9wcy5MYWJlbDtcclxuICAgICAgICB0aGlzLkpTT04gPSBwcm9wcy5KU09OO1xyXG4gICAgICAgIHRoaXMuQnkgPSBwcm9wcy5CeTtcclxuICAgICAgICB0aGlzLkRldmljZSA9IHByb3BzLkRldmljZTtcclxuICAgICAgICBpZiAocHJvcHMuRGF0YSA9PSB1bmRlZmluZWQpIHRoaXMuRGF0YSA9IFtdO1xyXG4gICAgICAgIGVsc2UgdGhpcy5EYXRhID0gcHJvcHMuRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU2V0TGFiZWwgPSAobGFiZWw6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBsYWJlbDtcclxuICAgIH0gXHJcbiAgICBwdWJsaWMgU2V0SGVpZ2h0ID0gKGhlaWdodDogbnVtYmVyKSA9PiB0aGlzLkhlaWdodCA9IGhlaWdodDtcclxuICAgIHB1YmxpYyBTZXRXaWR0aCA9ICh3aWR0aDogbnVtYmVyKSA9PiB0aGlzLldpZHRoID0gd2lkdGg7XHJcbiAgICBwdWJsaWMgU2V0SlNPTiA9IChqc29uOiBUKSA9PiB0aGlzLkpTT04gPSBqc29uO1xyXG4gICAgLy9wdWJsaWMgQXZhaWxhYmxlU2VyaWVzID0gKCkgPT4gdGhpcy5EYXRhLm1hcChkZCA9PiAoeyAuLi5kZCwgRGF0YVNvdXJjZUlEOiBkZC5EYXRhU291cmNlLklELCBEYXRhU291cmNlOiBkZC5EYXRhU291cmNlIH0pLkRhdGEubWFwKGRkZCA9PiAoeyAuLi5kZGQsIERhdGE6IFtdLCBEYXRhU291cmNlOiBkZC5EYXRhU291cmNlLk5hbWUsIERhdGFTb3VyY2VJRDogZGQuRGF0YVNvdXJjZS5JRCB9IGFzIFRyZW5EQVAuaVhEQVJldHVybldpdGhEYXRhU291cmNlKSkpLnJlZHVjZSgoYWNjLCB2YWwpID0+IGFjYy5jb25jYXQodmFsKSwgW10pO1xyXG5cclxuICAgIHB1YmxpYyBVcGRhdGVKU09OID0gPEsgZXh0ZW5kcyBrZXlvZiBUPihmaWVsZDogSywgdmFsdWU6IFRbS10pID0+IHtcclxuICAgICAgICB0aGlzLkpTT05bZmllbGRdID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhpc3RvZ3JhbTxVIGV4dGVuZHMgVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGUgPSBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT4gZXh0ZW5kcyBXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW0sVT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFRyZW5EQVAuaVRlbXBsYXRhYmxlV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtLFU+ICkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLlR5cGUgPSBcIkhpc3RvZ3JhbVwiO1xyXG4gICAgICAgIGlmICh0aGlzLkpTT04gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OID0geyBNaW46IDAsIE1heDogMTAsIFVuaXRzOiAnJywgU2VyaWVzOiBbXSwgQmluQ291bnQ6IDEwIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZFNlcmllc1hEQSA9IChkYXRhU291cmNlSUQ6IG51bWJlciwgcGhhc2U6IE9wZW5YREEuVHlwZXMuUGhhc2VOYW1lLCB0eXBlOiBPcGVuWERBLlR5cGVzLk1lYXN1cmVtZW50VHlwZU5hbWUsIGNoYXJhY3RlcmlzdGljOiBPcGVuWERBLlR5cGVzLk1lYXN1cmVtZW50Q2hhcmFjdGVyaXN0aWNOYW1lKSA9PiB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gYCR7dHlwZX0gJHtwaGFzZX0gJHtjaGFyYWN0ZXJpc3RpY31gO1xyXG5cclxuICAgICAgICBsZXQgc2VyaWVzID0ge1xyXG4gICAgICAgICAgICBQaGFzZTogcGhhc2UsIFxyXG4gICAgICAgICAgICBUeXBlOiB0eXBlLFxyXG4gICAgICAgICAgICBDaGFyYWN0ZXJpc3RpYzogY2hhcmFjdGVyaXN0aWMsXHJcbiAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgIENvbG9yOiBHZXRDb2xvcigpLFxyXG4gICAgICAgICAgICBQcm9maWxlOiBmYWxzZSxcclxuICAgICAgICAgICAgUHJvZmlsZUNvbG9yOiBHZXRDb2xvcihsYWJlbClcclxuICAgICAgICB9IGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzWERBXHJcblxyXG4gICAgICAgICh0aGlzLkpTT04uU2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzWERBW10pLnB1c2goc2VyaWVzKTtcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkU2VyaWVzU2FwcGhpcmUgPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIsIHBoYXNlOiBzdHJpbmcsIG1lYXN1cmVtZW50OiBzdHJpbmcsIGhhcm1vbmljOiBudW1iZXIpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGxhYmVsID0gYCR7cGhhc2V9ICR7bWVhc3VyZW1lbnR9JHsobWVhc3VyZW1lbnQuaW5kZXhPZignSFJNUycpID49MCA/ICcgSEc6ICcgKyBoYXJtb25pYy50b1N0cmluZygpOiAnJyl9YDtcclxuXHJcbiAgICAgICAgbGV0IHNlcmllcyA9IHtcclxuICAgICAgICAgICAgUGhhc2U6IHBoYXNlLFxyXG4gICAgICAgICAgICBNZWFzdXJlbWVudDogbWVhc3VyZW1lbnQsXHJcbiAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgIENvbG9yOiBHZXRDb2xvcigpLFxyXG4gICAgICAgICAgICBQcm9maWxlOiBmYWxzZSxcclxuICAgICAgICAgICAgUHJvZmlsZUNvbG9yOiBHZXRDb2xvcihsYWJlbCksXHJcbiAgICAgICAgICAgIEhhcm1vbmljOiBoYXJtb25pY1xyXG4gICAgICAgIH0gYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNTYXBwaGlyZVxyXG5cclxuICAgICAgICAodGhpcy5KU09OLlNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbVNlcmllc1NhcHBoaXJlW10pLnB1c2goc2VyaWVzKTtcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh0aGlzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIEFkZFNlcmllc09IID0gKGRhdGFTb3VyY2VJRDogbnVtYmVyLCBwaGFzZTogT3Blbkhpc3Rvcmlhbi5UeXBlcy5QaGFzZSwgdHlwZTogT3Blbkhpc3Rvcmlhbi5UeXBlcy5TaWduYWxUeXBlKSA9PiB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gYCR7dHlwZX0gJHtwaGFzZX1gO1xyXG5cclxuICAgICAgICBsZXQgc2VyaWVzID0ge1xyXG4gICAgICAgICAgICBQaGFzZTogcGhhc2UsXHJcbiAgICAgICAgICAgIFR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgIENvbG9yOiBHZXRDb2xvcigpLFxyXG4gICAgICAgICAgICBQcm9maWxlOiBmYWxzZSxcclxuICAgICAgICAgICAgUHJvZmlsZUNvbG9yOiBHZXRDb2xvcihsYWJlbClcclxuICAgICAgICB9IGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlSGlzdG9ncmFtU2VyaWVzT3Blbkhpc3RvcmlhblxyXG5cclxuXHJcbiAgICAgICAgKHRoaXMuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNPcGVuSGlzdG9yaWFuW10pLnB1c2goc2VyaWVzKTtcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh0aGlzKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIFJlbW92ZVNlcmllcyA9IChpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9ncmFtKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBVcGRhdGVTZXJpZXMgPSAoaW5kZXg6IGtleW9mIFRyZW5EQVAuaUhpc3RvZ3JhbVNlcmllc1tdLCBmaWVsZDoga2V5b2YgVHJlbkRBUC5pSGlzdG9ncmFtU2VyaWVzLCB2YWx1ZTogVHJlbkRBUC5pSGlzdG9ncmFtU2VyaWVzW2tleW9mIFRyZW5EQVAuaUhpc3RvZ3JhbVNlcmllc10pID0+IHtcclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzW2luZGV4XVtmaWVsZF0gPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh0aGlzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENhbGN1bGF0ZUF4aXNSYW5nZSA9ICgpID0+IHtcclxuICAgICAgICBsZXQgZHMgPSB0aGlzLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklEID09PSB0aGlzLkpTT04uU2VyaWVzWzBdLkRhdGFTb3VyY2VJRClcclxuXHJcbiAgICAgICAgaWYgKGRzLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicpIHtcclxuICAgICAgICAgICAgbGV0IGRkOiBUcmVuREFQLmlYREFSZXR1cm5EYXRhW10gPSBbXS5jb25jYXQoLi4udGhpcy5EYXRhLm1hcChkID0+IGQuRGF0YSkpO1xyXG4gICAgICAgICAgICBsZXQgc3MgPSAodGhpcy5KU09OLlNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbVNlcmllc1hEQVtdKS5tYXAoKHNlcmllczogVHJlbkRBUC5pVGVtcGxhdGVTZXJpZXNYREEpID0+IChkZC5maW5kKGQgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgZC5QaGFzZSA9PT0gc2VyaWVzLlBoYXNlICYmIGQuQ2hhcmFjdGVyaXN0aWMgPT09IHNlcmllcy5DaGFyYWN0ZXJpc3RpYyAmJiBkLlR5cGUgPT09IHNlcmllcy5UeXBlKT8uRGF0YSA/PyBbXSkubWFwKGQgPT4gZFtzZXJpZXMuRmllbGRdKSk7XHJcbiAgICAgICAgICAgIGxldCBtbSA9IHNzLm1hcChzID0+IFtNYXRoLm1pbiguLi5zKSwgTWF0aC5tYXgoLi4ucyldKTtcclxuICAgICAgICAgICAgdGhpcy5KU09OLk1heCA9IE1hdGgubWF4KC4uLltdLmNvbmNhdCguLi5tbSkpO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWluID0gTWF0aC5taW4oLi4uW10uY29uY2F0KC4uLm1tKSk7XHJcbiAgICAgICAgICAgIGxldCBidWZmZXIgPSAodGhpcy5KU09OLk1heCAtIHRoaXMuSlNPTi5NaW4pICogLjEwO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWF4ID0gdGhpcy5KU09OLk1heCArIGJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy5KU09OLk1pbiA9IHRoaXMuSlNPTi5NaW4gLSBidWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRzLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgIGxldCBkZDogVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybltdID0gW10uY29uY2F0KC4uLnRoaXMuRGF0YS5tYXAoZCA9PiBkLkRhdGEpKTtcclxuICAgICAgICAgICAgbGV0IHNzID0gKHRoaXMuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGFibGVIaXN0b2dyYW1TZXJpZXNPcGVuSGlzdG9yaWFuW10pLm1hcCgoc2VyaWVzOiBUcmVuREFQLmlUZW1wbGF0ZVNlcmllc09wZW5IaXN0b3JpYW4pID0+IChkZC5maW5kKGQgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgZC5QaGFzZSA9PT0gc2VyaWVzLlBoYXNlICYmIGQuU2lnbmFsVHlwZSA9PT0gc2VyaWVzLlR5cGUpPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBkW3Nlcmllcy5GaWVsZF0pKTtcclxuICAgICAgICAgICAgbGV0IG1tID0gc3MubWFwKHMgPT4gW01hdGgubWluKC4uLnMpLCBNYXRoLm1heCguLi5zKV0pO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWF4ID0gTWF0aC5tYXgoLi4uW10uY29uY2F0KC4uLm1tKSk7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5NaW4gPSBNYXRoLm1pbiguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9ICh0aGlzLkpTT04uTWF4IC0gdGhpcy5KU09OLk1pbikgKiAuMTA7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5NYXggPSB0aGlzLkpTT04uTWF4ICsgYnVmZmVyO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWluID0gdGhpcy5KU09OLk1pbiAtIGJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZHMuRGF0YVNvdXJjZS5UeXBlID09PSAnU2FwcGhpcmUnKSB7XHJcbiAgICAgICAgICAgIGxldCBkZDogVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhW10gPSBbXS5jb25jYXQoLi4udGhpcy5EYXRhLm1hcChkID0+IGQuRGF0YSkpO1xyXG4gICAgICAgICAgICBsZXQgc3MgPSAodGhpcy5KU09OLlNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZUhpc3RvZ3JhbVNlcmllc1NhcHBoaXJlW10pLm1hcCgoc2VyaWVzKSA9PiAoZGQuZmluZChkID0+IGRbdGhpcy5CeV0gPT09IHRoaXMuRGV2aWNlICYmIGQuUGhhc2UgPT09IHNlcmllcy5QaGFzZSAmJiBkLkNoYXJhY3RlcmlzdGljID09PSBzZXJpZXMuTWVhc3VyZW1lbnQgJiYgZC5IYXJtb25pYyA9PSBzZXJpZXMuSGFybW9uaWMpPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBkW3Nlcmllcy5GaWVsZF0pKTtcclxuICAgICAgICAgICAgbGV0IG1tID0gc3MubWFwKHMgPT4gW01hdGgubWluKC4uLnMpLCBNYXRoLm1heCguLi5zKV0pO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWF4ID0gTWF0aC5tYXgoLi4uW10uY29uY2F0KC4uLm1tKSk7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5NaW4gPSBNYXRoLm1pbiguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9ICh0aGlzLkpTT04uTWF4IC0gdGhpcy5KU09OLk1pbikgKiAuMTA7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5NYXggPSB0aGlzLkpTT04uTWF4ICsgYnVmZmVyO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uTWluID0gdGhpcy5KU09OLk1pbiAtIGJ1ZmZlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2UgeyB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIaXN0b2dyYW0odGhpcyk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJlbmQ8VSBleHRlbmRzIFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlID0gVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGU+IGV4dGVuZHMgV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlVHJlbmQsVT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFRyZW5EQVAuaVRlbXBsYXRhYmxlV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlVHJlbmQsVT4pIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5UeXBlID0gXCJUcmVuZFwiO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5KU09OID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTiA9IHsgTWluOiAwLCBNYXg6IDEwLCBMZWdlbmQ6IGZhbHNlLCBTcGxpdDogZmFsc2UsIFNwbGl0VHlwZTogJ0F4aXMnLCBZQXhpczogW3sgTWF4OiAxMCwgTWluOiAwLCBQb3NpdGlvbjogJ2xlZnQnLCBVbml0czogJycgfV0sIFNlcmllczogW10gIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZEF4aXMgPSAoKSA9PiB0aGlzLkpTT04uWUF4aXMucHVzaCh7IE1heDogMTAsIE1pbjogMCwgUG9zaXRpb246ICdsZWZ0JywgVW5pdHM6ICcnIH0pO1xyXG4gICAgcHVibGljIFJlbW92ZUF4aXMgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLkpTT04uWUF4aXMubGVuZ3RoID09IDEpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5KU09OLllBeGlzLnNwbGljZShpbmRleCwgMSlcclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzLmZvckVhY2goc2VyaWVzID0+IHtcclxuICAgICAgICAgICAgaWYgKHNlcmllcy5BeGlzID49IGluZGV4KVxyXG4gICAgICAgICAgICAgICAgc2VyaWVzLkF4aXMgPSAoaW5kZXggPiAwID8gc2VyaWVzLkF4aXMgLSAxIDogMCk7ICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHB1YmxpYyBVcGRhdGVBeGlzID0gKGluZGV4OiBrZXlvZiBUcmVuREFQLmlZQXhpc1tdLCBmaWVsZDoga2V5b2YgVHJlbkRBUC5pWUF4aXMsIHZhbHVlOiBUcmVuREFQLmlZQXhpc1trZXlvZiBUcmVuREFQLmlZQXhpc10pID0+IHsgdGhpcy5KU09OLllBeGlzW2luZGV4XVtmaWVsZF0gPSB2YWx1ZTsgfTtcclxuXHJcbiAgICBwdWJsaWMgQ2FsY3VsYXRlQXhpc1JhbmdlID0gKHR5cGU6ICd4JyB8ICd5JywgaW5kZXg/OiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5KU09OLlNlcmllcy5sZW5ndGggPT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZHMgPSB0aGlzLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklEID09PSB0aGlzLkpTT04uU2VyaWVzWzBdLkRhdGFTb3VyY2VJRClcclxuICAgICAgICBsZXQgZGQ6IFVbXSA9IFtdLmNvbmNhdCguLi50aGlzLkRhdGEubWFwKGQgPT4gZC5EYXRhKSk7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICd4JylcclxuICAgICAgICAgICAgdGhpcy5DYWxjdWxhdGVYQXhpcyhkcywgZGQpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5KU09OLllBeGlzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuQ2FsY3VsYXRlWUF4aXMoZHMsIGRkLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNhbGN1bGF0ZVlBeGlzKGRzLCBkZCwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFRyZW5kKHRoaXMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIENhbGN1bGF0ZVhBeGlzKGRzOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuPFU+LCBkZDogVVtdKSB7XHJcbiAgICAgICAgbGV0IHNzO1xyXG4gICAgICAgIGlmIChkcy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgIGxldCBwaGFzZXMgPSB0aGlzLkpTT04uU2VyaWVzLm1hcCgoczogVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQSkgPT4gcy5QaGFzZSlcclxuICAgICAgICAgICAgbGV0IHR5cGVzID0gdGhpcy5KU09OLlNlcmllcy5tYXAoKHM6IFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNYREEpID0+IHMuVHlwZSlcclxuICAgICAgICAgICAgbGV0IGNoYXJhY3RlcmlzdGljcyA9IHRoaXMuSlNPTi5TZXJpZXMubWFwKChzOiBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzWERBKSA9PiBzLkNoYXJhY3RlcmlzdGljKVxyXG4gICAgICAgICAgICBsZXQgc2VyaWVzID0gZGQuZmluZCgoZCkgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgcGhhc2VzLmluZGV4T2YoKGQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuUGhhc2UpID49IDAgJiYgY2hhcmFjdGVyaXN0aWNzLmluZGV4T2YoKGQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuQ2hhcmFjdGVyaXN0aWMpID49IDAgJiYgdHlwZXMuaW5kZXhPZigoZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKS5UeXBlKSA+PSAwKTtcclxuXHJcbiAgICAgICAgICAgIHNzID0gKHNlcmllcz8uRGF0YSA/PyBbXSkubWFwKGQgPT4gbmV3IERhdGUoZC5UaW1lc3RhbXApLmdldFRpbWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRzLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgIGxldCBwaGFzZXMgPSB0aGlzLkpTT04uU2VyaWVzLm1hcCgoczogVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc09wZW5IaXN0b3JpYW4pID0+IHMuUGhhc2UpXHJcbiAgICAgICAgICAgIGxldCB0eXBlcyA9IHRoaXMuSlNPTi5TZXJpZXMubWFwKChzOiBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzT3Blbkhpc3RvcmlhbikgPT4gcy5UeXBlKVxyXG4gICAgICAgICAgICBsZXQgc2VyaWVzID0gZGQuZmluZCgoZCkgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgcGhhc2VzLmluZGV4T2YoKGQgYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikuUGhhc2UpID49IDAgJiYgdHlwZXMuaW5kZXhPZigoZCBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKS5TaWduYWxUeXBlKSA+PSAwKTtcclxuXHJcbiAgICAgICAgICAgIHNzID0gKHNlcmllcz8uRGF0YSA/PyBbXSkubWFwKGQgPT4gbmV3IERhdGUoZC5UaW1lc3RhbXApLmdldFRpbWUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRzLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJykge1xyXG4gICAgICAgICAgICBsZXQgcGhhc2VzID0gdGhpcy5KU09OLlNlcmllcy5tYXAoKHM6IFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNTYXBwaGlyZSkgPT4gcy5QaGFzZSlcclxuICAgICAgICAgICAgbGV0IHR5cGVzID0gdGhpcy5KU09OLlNlcmllcy5tYXAoKHM6IFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNTYXBwaGlyZSkgPT4gcy5NZWFzdXJlbWVudClcclxuICAgICAgICAgICAgbGV0IGhhcm1vbmljcyA9IHRoaXMuSlNPTi5TZXJpZXMubWFwKChzOiBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzU2FwcGhpcmUpID0+IHMuSGFybW9uaWMpO1xyXG4gICAgICAgICAgICBsZXQgc2VyaWVzID0gZGQuZmluZCgoZCkgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgcGhhc2VzLmluZGV4T2YoKGQgYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKS5QaGFzZSkgPj0gMCAmJiB0eXBlcy5pbmRleE9mKChkIGFzIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YSkuQ2hhcmFjdGVyaXN0aWMpID49IDAgJiYgaGFybW9uaWNzLmluZGV4T2YoKGQgYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKS5IYXJtb25pYykgPj0gMCk7XHJcblxyXG4gICAgICAgICAgICBzcyA9IChzZXJpZXM/LkRhdGEgPz8gW10pLm1hcChkID0+IG5ldyBEYXRlKGQuVGltZXN0YW1wKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHNzID0gW107XHJcblxyXG5cclxuICAgICAgICBsZXQgbW0gPSBzcy5tYXAocyA9PiBbTWF0aC5taW4oLi4ucyksIE1hdGgubWF4KC4uLnMpXSk7XHJcbiAgICAgICAgdGhpcy5KU09OLk1heCA9IE1hdGgubWF4KC4uLltdLmNvbmNhdCguLi5tbSkpO1xyXG4gICAgICAgIHRoaXMuSlNPTi5NaW4gPSBNYXRoLm1pbiguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBDYWxjdWxhdGVZQXhpcyhkczogVHJlbkRBUC5pRGF0YVNldFJldHVybjxVPiwgZGQ6IFVbXSwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBheGVzID0gdGhpcy5KU09OLlNlcmllcy5maWx0ZXIoc2VyaWVzID0+IHNlcmllcy5BeGlzID09PSBpbmRleCk7XHJcblxyXG4gICAgICAgIGxldCBzcyA9IGF4ZXMubWFwKGEgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZHMuRGF0YVNvdXJjZS5UeXBlID09PSAnVHJlbkRBUERCJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXhpcyA9IGEgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQTsgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGRkLmZpbmQoKGQpID0+IGRbdGhpcy5CeV0gPT09IHRoaXMuRGV2aWNlICYmIGF4aXMuUGhhc2UgPT09IChkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLlBoYXNlICYmIGF4aXMuQ2hhcmFjdGVyaXN0aWMgPT09IChkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpLkNoYXJhY3RlcmlzdGljICYmIGF4aXMuVHlwZSA9PT0gKGQgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuVHlwZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHNlcmllcz8uRGF0YSA/PyBbXSkubWFwKGQgPT4gZFtheGlzLkZpZWxkXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZHMuRGF0YVNvdXJjZS5UeXBlID09PSAnT3Blbkhpc3RvcmlhbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBhIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNPcGVuSGlzdG9yaWFuO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gZGQuZmluZCgoZCkgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgYXhpcy5QaGFzZSA9PT0gKGQgYXMgVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikuUGhhc2UgJiYgYXhpcy5UeXBlID09PSAoZCBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKS5TaWduYWxUeXBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoc2VyaWVzPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBkW2F4aXMuRmllbGRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkcy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBhIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNTYXBwaGlyZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGRkLmZpbmQoKGQpID0+IGRbdGhpcy5CeV0gPT09IHRoaXMuRGV2aWNlICYmIGF4aXMuUGhhc2UgPT09IChkIGFzIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YSkuUGhhc2UgJiYgYXhpcy5NZWFzdXJlbWVudCA9PT0gKGQgYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKS5DaGFyYWN0ZXJpc3RpYyAmJiAoZCBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpLkhhcm1vbmljID09PSBheGlzLkhhcm1vbmljKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoc2VyaWVzPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBkW2F4aXMuRmllbGRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBzcyA9IFtdO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgbW0gPSBzcy5tYXAocyA9PiBbTWF0aC5taW4oLi4ucyksIE1hdGgubWF4KC4uLnMpXSk7XHJcbiAgICAgICAgdGhpcy5KU09OLk1heCA9IE1hdGgubWF4KC4uLltdLmNvbmNhdCguLi5tbSkpO1xyXG4gICAgICAgIHRoaXMuSlNPTi5NaW4gPSBNYXRoLm1pbiguLi5bXS5jb25jYXQoLi4ubW0pKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZFNlcmllc1hEQSA9IChkYXRhU291cmNlSUQ6IG51bWJlciwgcGhhc2U6IE9wZW5YREEuVHlwZXMuUGhhc2VOYW1lLCB0eXBlOiBPcGVuWERBLlR5cGVzLk1lYXN1cmVtZW50VHlwZU5hbWUsIGNoYXJhY3RlcmlzdGljOiBPcGVuWERBLlR5cGVzLk1lYXN1cmVtZW50Q2hhcmFjdGVyaXN0aWNOYW1lKSA9PiB7XHJcbiAgICAgICAgbGV0IGxhYmVsID0gJyc7XHJcbiAgICAgICAgaWYgKGNoYXJhY3RlcmlzdGljID09PSAnRnJlcXVlbmN5JylcclxuICAgICAgICAgICAgbGFiZWwgPSAnRnJlcXVlbmN5JztcclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnVm9sdGFnZScgJiYgY2hhcmFjdGVyaXN0aWMgPT09ICdSTVMnKVxyXG4gICAgICAgICAgICBsYWJlbCA9IGBWJHtwaGFzZX1gO1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdWb2x0YWdlJylcclxuICAgICAgICAgICAgbGFiZWwgPSBgViR7cGhhc2V9ICR7Y2hhcmFjdGVyaXN0aWN9YDtcclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnQ3VycmVudCcgJiYgY2hhcmFjdGVyaXN0aWMgPT09ICdSTVMnKVxyXG4gICAgICAgICAgICBsYWJlbCA9IGBJJHtwaGFzZX1gO1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdDdXJyZW50JylcclxuICAgICAgICAgICAgbGFiZWwgPSBgSSR7cGhhc2V9ICR7Y2hhcmFjdGVyaXN0aWN9YDtcclxuICAgICAgICBlbHNlIGxhYmVsID0gYCR7dHlwZX0gJHtwaGFzZX0gJHtjaGFyYWN0ZXJpc3RpY31gO1xyXG5cclxuICAgICAgICBsZXQgZGQ6IFRyZW5EQVAuaVhEQVJldHVybkRhdGFbXSA9IFtdLmNvbmNhdCguLi50aGlzLkRhdGEubWFwKGQgPT4gZC5EYXRhKSk7XHJcbiAgICAgICAgbGV0IGNoYW5uZWwgPSBkZC5maW5kKGQgPT4gZC5DaGFyYWN0ZXJpc3RpYyA9PT0gY2hhcmFjdGVyaXN0aWMgJiYgZC5UeXBlID09PSB0eXBlICYmIGQuUGhhc2UgPT09IHBoYXNlKTtcclxuICAgICAgICBsZXQgdW5pdCA9IGNoYW5uZWw/LlVuaXQgPz8gJydcclxuICAgICAgICBsZXQgYXhpc0luZGV4ID0gdGhpcy5KU09OLllBeGlzLmZpbmRJbmRleChhID0+IGEuVW5pdHMgPT09IHVuaXQpO1xyXG5cclxuICAgICAgICBpZiAoYXhpc0luZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICBheGlzSW5kZXggPSB0aGlzLkpTT04uWUF4aXMucHVzaCh7IFVuaXRzOiB1bml0LCBNaW46IDAsIE1heDogMTAwLCBQb3NpdGlvbjogJ2xlZnQnIH0pIC0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzZXJpZXMgPSB7XHJcbiAgICAgICAgICAgIFBoYXNlOiBwaGFzZSxcclxuICAgICAgICAgICAgVHlwZTogdHlwZSxcclxuICAgICAgICAgICAgQ2hhcmFjdGVyaXN0aWM6IGNoYXJhY3RlcmlzdGljLFxyXG4gICAgICAgICAgICBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCxcclxuICAgICAgICAgICAgRmllbGQ6IFwiQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICBDb2xvcjogR2V0Q29sb3IobGFiZWwpLFxyXG4gICAgICAgICAgICBBeGlzOiBheGlzSW5kZXgsXHJcbiAgICAgICAgICAgIFNob3dFdmVudHM6IGZhbHNlXHJcbiAgICAgICAgfSBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzWERBXHJcblxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllcy5wdXNoKHNlcmllcyBhcyBhbnkpO1xyXG4gICAgICAgIHRoaXMuQ2FsY3VsYXRlQXhpc1JhbmdlKCd4Jyk7XHJcbiAgICAgICAgdGhpcy5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3knKTtcclxuICAgICAgICByZXR1cm4gbmV3IFRyZW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGRTZXJpZXNTYXBwaGlyZSA9IChkYXRhU291cmNlSUQ6IG51bWJlciwgcGhhc2U6IHN0cmluZywgbWVhc3VyZW1lbnQ6IHN0cmluZywgaGFybW9uaWM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGxldCBsYWJlbCA9IGAke3BoYXNlfSAke21lYXN1cmVtZW50fSR7KG1lYXN1cmVtZW50LmluZGV4T2YoJ0hSTVMnKSA+PSAwID8gJyBIRzogJyArIGhhcm1vbmljLnRvU3RyaW5nKCkgOiAnJyl9YDtcclxuXHJcbiAgICAgICAgbGV0IGRkOiBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGFbXSA9IFtdLmNvbmNhdCguLi50aGlzLkRhdGEubWFwKGQgPT4gZC5EYXRhKSk7XHJcbiAgICAgICAgbGV0IGNoYW5uZWwgPSBkZC5maW5kKGQgPT4gZC5DaGFyYWN0ZXJpc3RpYyA9PT0gbWVhc3VyZW1lbnQgJiZkLlBoYXNlID09PSBwaGFzZSk7XHJcbiAgICAgICAgbGV0IHVuaXQgPSBjaGFubmVsPy5Vbml0ID8/ICcnXHJcbiAgICAgICAgbGV0IGF4aXNJbmRleCA9IHRoaXMuSlNPTi5ZQXhpcy5maW5kSW5kZXgoYSA9PiBhLlVuaXRzID09PSB1bml0KTtcclxuXHJcbiAgICAgICAgaWYgKGF4aXNJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgYXhpc0luZGV4ID0gdGhpcy5KU09OLllBeGlzLnB1c2goeyBVbml0czogdW5pdCwgTWluOiAwLCBNYXg6IDEwMCwgUG9zaXRpb246ICdsZWZ0JyB9KSAtIDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2VyaWVzID0ge1xyXG4gICAgICAgICAgICBQaGFzZTogcGhhc2UsXHJcbiAgICAgICAgICAgIE1lYXN1cmVtZW50OiBtZWFzdXJlbWVudCxcclxuICAgICAgICAgICAgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsXHJcbiAgICAgICAgICAgIEZpZWxkOiBcIkF2ZXJhZ2VcIixcclxuICAgICAgICAgICAgQ29sb3I6IEdldENvbG9yKGxhYmVsKSxcclxuICAgICAgICAgICAgQXhpczogYXhpc0luZGV4LFxyXG4gICAgICAgICAgICBTaG93RXZlbnRzOiBmYWxzZSxcclxuICAgICAgICAgICAgSGFybW9uaWM6IGhhcm1vbmljXHJcbiAgICAgICAgfSBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzU2FwcGhpcmVcclxuXHJcbiAgICAgICAgKHRoaXMuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1NhcHBoaXJlW10pLnB1c2goc2VyaWVzKTtcclxuICAgICAgICByZXR1cm4gbmV3IFRyZW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGRTZXJpZXNPSCA9IChkYXRhU291cmNlSUQ6IG51bWJlciwgcGhhc2U6IE9wZW5IaXN0b3JpYW4uVHlwZXMuUGhhc2UsIHR5cGU6IE9wZW5IaXN0b3JpYW4uVHlwZXMuU2lnbmFsVHlwZSkgPT4ge1xyXG4gICAgICAgIGxldCBsYWJlbCA9IGAke3R5cGV9ICR7cGhhc2V9YDtcclxuXHJcbiAgICAgICAgbGV0IHNlcmllcyA9IHtcclxuICAgICAgICAgICAgUGhhc2U6IHBoYXNlLFxyXG4gICAgICAgICAgICBUeXBlOiB0eXBlLFxyXG4gICAgICAgICAgICBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCxcclxuICAgICAgICAgICAgRmllbGQ6IFwiQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICBDb2xvcjogR2V0Q29sb3IobGFiZWwpLFxyXG4gICAgICAgICAgICBBeGlzOiAwXHJcbiAgICAgICAgfSBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzT3Blbkhpc3RvcmlhblxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5KU09OLlNlcmllcy5wdXNoKHNlcmllcyBhcyBhbnkpO1xyXG4gICAgICAgIHRoaXMuQ2FsY3VsYXRlQXhpc1JhbmdlKCd4Jyk7XHJcbiAgICAgICAgdGhpcy5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3knKTtcclxuICAgICAgICByZXR1cm4gbmV3IFRyZW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBRdWlja0FkZFZvbHRhZ2VSTVMgPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIpID0+IHtcclxuICAgICAgICBsZXQgYXhpcyA9IHRoaXMuSlNPTi5ZQXhpcy5maW5kSW5kZXgoYXhpcyA9PiBheGlzLlVuaXRzID09PSAnVm9sdHMnKVxyXG4gICAgICAgIGlmIChheGlzIDwgMCkge1xyXG4gICAgICAgICAgICBheGlzID0gdGhpcy5KU09OLllBeGlzLnB1c2goe1VuaXRzOiAnVm9sdHMnLCBQb3NpdGlvbjogJ2xlZnQnLCBNaW46IDAsIE1heDogMTAwfSkgLSAxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc2VyaWVzID0gW3tcclxuICAgICAgICAgICAgUGhhc2U6ICdBTicsXHJcbiAgICAgICAgICAgIFR5cGU6ICdWb2x0YWdlJyxcclxuICAgICAgICAgICAgQ2hhcmFjdGVyaXN0aWM6ICdSTVMnLFxyXG4gICAgICAgICAgICBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCxcclxuICAgICAgICAgICAgRmllbGQ6IFwiQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICBDb2xvcjogR2V0Q29sb3IoJ1ZBTiBSTVMnKSxcclxuICAgICAgICAgICAgQXhpczogMCxcclxuICAgICAgICAgICAgTGFiZWw6ICdWQU4gUk1TJyxcclxuICAgICAgICAgICAgU2hvd0V2ZW50czogZmFsc2VcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBQaGFzZTogJ0JOJyxcclxuICAgICAgICAgICAgICAgIFR5cGU6ICdWb2x0YWdlJyxcclxuICAgICAgICAgICAgICAgIENoYXJhY3RlcmlzdGljOiAnUk1TJyxcclxuICAgICAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICAgICAgRmllbGQ6IFwiQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICAgICAgQ29sb3I6IEdldENvbG9yKCdWQk4gUk1TJyksXHJcbiAgICAgICAgICAgICAgICBBeGlzOiAwLFxyXG4gICAgICAgICAgICAgICAgTGFiZWw6ICdWQk4gUk1TJyxcclxuICAgICAgICAgICAgICAgIFNob3dFdmVudHM6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIFBoYXNlOiAnQ04nLFxyXG4gICAgICAgICAgICAgICAgVHlwZTogJ1ZvbHRhZ2UnLFxyXG4gICAgICAgICAgICAgICAgQ2hhcmFjdGVyaXN0aWM6ICdSTVMnLFxyXG4gICAgICAgICAgICAgICAgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsXHJcbiAgICAgICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgICAgICBDb2xvcjogR2V0Q29sb3IoJ1ZDTiBSTVMnKSxcclxuICAgICAgICAgICAgICAgIEF4aXM6IDAsXHJcbiAgICAgICAgICAgICAgICBMYWJlbDogJ1ZDTiBSTVMnLFxyXG4gICAgICAgICAgICAgICAgU2hvd0V2ZW50czogZmFsc2VcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgUGhhc2U6ICdBQicsXHJcbiAgICAgICAgICAgICAgICBUeXBlOiAnVm9sdGFnZScsXHJcbiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJpc3RpYzogJ1JNUycsXHJcbiAgICAgICAgICAgICAgICBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCxcclxuICAgICAgICAgICAgICAgIEZpZWxkOiBcIkF2ZXJhZ2VcIixcclxuICAgICAgICAgICAgICAgIENvbG9yOiBHZXRDb2xvcignVkFCIFJNUycpLFxyXG4gICAgICAgICAgICAgICAgQXhpczogMCxcclxuICAgICAgICAgICAgICAgIExhYmVsOiAnVkFCIFJNUycsXHJcbiAgICAgICAgICAgICAgICBTaG93RXZlbnRzOiBmYWxzZVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBQaGFzZTogJ0JDJyxcclxuICAgICAgICAgICAgICAgIFR5cGU6ICdWb2x0YWdlJyxcclxuICAgICAgICAgICAgICAgIENoYXJhY3RlcmlzdGljOiAnUk1TJyxcclxuICAgICAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICAgICAgRmllbGQ6IFwiQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICAgICAgQ29sb3I6IEdldENvbG9yKCdWQkMgUk1TJyksXHJcbiAgICAgICAgICAgICAgICBBeGlzOiAwLFxyXG4gICAgICAgICAgICAgICAgTGFiZWw6ICdWQkMgUk1TJyxcclxuICAgICAgICAgICAgICAgIFNob3dFdmVudHM6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIFBoYXNlOiAnQ0EnLFxyXG4gICAgICAgICAgICAgICAgVHlwZTogJ1ZvbHRhZ2UnLFxyXG4gICAgICAgICAgICAgICAgQ2hhcmFjdGVyaXN0aWM6ICdSTVMnLFxyXG4gICAgICAgICAgICAgICAgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsXHJcbiAgICAgICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgICAgICBDb2xvcjogR2V0Q29sb3IoJ1ZDQSBSTVMnKSxcclxuICAgICAgICAgICAgICAgIEF4aXM6IDAsXHJcbiAgICAgICAgICAgICAgICBMYWJlbDogJ1ZDQSBSTVMnLFxyXG4gICAgICAgICAgICAgICAgU2hvd0V2ZW50czogZmFsc2VcclxuICAgICAgICAgICAgfV0gYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQVtdXHJcblxyXG4gICAgICAgICh0aGlzLkpTT04uU2VyaWVzIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNYREFbXSkuY29uY2F0KHNlcmllcyk7XHJcbiAgICAgICAgdGhpcy5DYWxjdWxhdGVBeGlzUmFuZ2UoJ3gnKTtcclxuICAgICAgICB0aGlzLkNhbGN1bGF0ZUF4aXNSYW5nZSgneScpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJlbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFF1aWNrQWRkQ3VycmVudFJNUyA9IChkYXRhU291cmNlSUQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGxldCBheGlzID0gdGhpcy5KU09OLllBeGlzLmZpbmRJbmRleChheGlzID0+IGF4aXMuVW5pdHMgPT09ICdBbXBzJylcclxuICAgICAgICBpZiAoYXhpcyA8IDApIHtcclxuICAgICAgICAgICAgYXhpcyA9IHRoaXMuSlNPTi5ZQXhpcy5wdXNoKHsgVW5pdHM6ICdBbXBzJywgUG9zaXRpb246ICdsZWZ0JywgTWluOiAwLCBNYXg6IDEwMCB9KSAtIDFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzZXJpZXMgPSBbe1xyXG4gICAgICAgICAgICBQaGFzZTogJ0FOJyxcclxuICAgICAgICAgICAgVHlwZTogJ0N1cnJlbnQnLFxyXG4gICAgICAgICAgICBDaGFyYWN0ZXJpc3RpYzogJ1JNUycsXHJcbiAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgIENvbG9yOiBHZXRDb2xvcignSUFOIFJNUycpLFxyXG4gICAgICAgICAgICBBeGlzOiAwLFxyXG4gICAgICAgICAgICBMYWJlbDogJ0lBTiBSTVMnLFxyXG4gICAgICAgICAgICBTaG93RXZlbnRzOiBmYWxzZVxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgUGhhc2U6ICdCTicsXHJcbiAgICAgICAgICAgIFR5cGU6ICdDdXJyZW50JyxcclxuICAgICAgICAgICAgQ2hhcmFjdGVyaXN0aWM6ICdSTVMnLFxyXG4gICAgICAgICAgICBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCxcclxuICAgICAgICAgICAgRmllbGQ6IFwiQXZlcmFnZVwiLFxyXG4gICAgICAgICAgICBDb2xvcjogR2V0Q29sb3IoJ0lCTiBSTVMnKSxcclxuICAgICAgICAgICAgQXhpczogMCxcclxuICAgICAgICAgICAgTGFiZWw6ICdJQk4gUk1TJyxcclxuICAgICAgICAgICAgU2hvd0V2ZW50czogZmFsc2VcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIFBoYXNlOiAnQ04nLFxyXG4gICAgICAgICAgICBUeXBlOiAnQ3VycmVudCcsXHJcbiAgICAgICAgICAgIENoYXJhY3RlcmlzdGljOiAnUk1TJyxcclxuICAgICAgICAgICAgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsXHJcbiAgICAgICAgICAgIEZpZWxkOiBcIkF2ZXJhZ2VcIixcclxuICAgICAgICAgICAgQ29sb3I6IEdldENvbG9yKCdJQ04gUk1TJyksXHJcbiAgICAgICAgICAgIEF4aXM6IDAsXHJcbiAgICAgICAgICAgIExhYmVsOiAnSUNOIFJNUycsXHJcbiAgICAgICAgICAgIFNob3dFdmVudHM6IGZhbHNlXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBQaGFzZTogJ05HJyxcclxuICAgICAgICAgICAgVHlwZTogJ0N1cnJlbnQnLFxyXG4gICAgICAgICAgICBDaGFyYWN0ZXJpc3RpYzogJ1JNUycsXHJcbiAgICAgICAgICAgIERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELFxyXG4gICAgICAgICAgICBGaWVsZDogXCJBdmVyYWdlXCIsXHJcbiAgICAgICAgICAgIENvbG9yOiBHZXRDb2xvcignSU5HIFJNUycpLFxyXG4gICAgICAgICAgICBBeGlzOiAwLFxyXG4gICAgICAgICAgICBMYWJlbDogJ0lORyBSTVMnLFxyXG4gICAgICAgICAgICBTaG93RXZlbnRzOiBmYWxzZVxyXG4gICAgICAgICAgICB9XSBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzWERBW11cclxuXHJcbiAgICAgICAgKHRoaXMuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQVtdKS5jb25jYXQoc2VyaWVzKTtcclxuICAgICAgICB0aGlzLkNhbGN1bGF0ZUF4aXNSYW5nZSgneCcpO1xyXG4gICAgICAgIHRoaXMuQ2FsY3VsYXRlQXhpc1JhbmdlKCd5Jyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVuZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVtb3ZlU2VyaWVzID0gKGluZGV4OiBudW1iZXIpID0+IHRoaXMuSlNPTi5TZXJpZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIHB1YmxpYyBSZW1vdmVBbGwgPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzID0gW107XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmVuZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgVXBkYXRlU2VyaWVzID0gKGluZGV4OiBrZXlvZiBUcmVuREFQLmlUcmVuZFNlcmllc1tdLCBmaWVsZDoga2V5b2YgVHJlbkRBUC5pVHJlbmRTZXJpZXMsIHZhbHVlOiBUcmVuREFQLmlUcmVuZFNlcmllc1trZXlvZiBUcmVuREFQLmlUcmVuZFNlcmllc10pID0+IHsgdGhpcy5KU09OLlNlcmllc1tpbmRleF1bZmllbGRdID0gdmFsdWU7IH07XHJcblxyXG4gICAgcHVibGljIFBhbiA9ICh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLk1heCA9IHRoaXMuSlNPTi5NYXggKyB2YWx1ZTtcclxuICAgICAgICB0aGlzLkpTT04uTWluID0gdGhpcy5KU09OLk1pbiArIHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJlbmQodGhpcyk7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXRzPFUgZXh0ZW5kcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSA9IFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlPiBleHRlbmRzIFdpZGdldDxUcmVuREFQLmlUZW1wbGF0YWJsZVN0YXRzLFU+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldDxUcmVuREFQLmlUZW1wbGF0YWJsZVN0YXRzLFU+KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMuVHlwZSA9IFwiU3RhdHNcIjtcclxuICAgICAgICBpZiAodGhpcy5KU09OID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTiA9IHtTZXJpZXM6IG51bGwsIFByZWNpc2lvbjogM307XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgU2V0U2VyaWVzWERBID0gKGRhdGFTb3VyY2VJRDogbnVtYmVyLCBwaGFzZTogT3BlblhEQS5UeXBlcy5QaGFzZU5hbWUsIHR5cGU6IE9wZW5YREEuVHlwZXMuTWVhc3VyZW1lbnRUeXBlTmFtZSwgY2hhcmFjdGVyaXN0aWM6IE9wZW5YREEuVHlwZXMuTWVhc3VyZW1lbnRDaGFyYWN0ZXJpc3RpY05hbWUpID0+IHRoaXMuSlNPTi5TZXJpZXMgPSB7IERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELCBQaGFzZTogcGhhc2UsIFR5cGU6IHR5cGUsIENoYXJhY3RlcmlzdGljOiBjaGFyYWN0ZXJpc3RpYywgRmllbGQ6ICdBdmVyYWdlJyB9O1xyXG4gICAgcHVibGljIFNldFNlcmllc09IID0gKGRhdGFTb3VyY2VJRDogbnVtYmVyLCBwaGFzZTogT3Blbkhpc3Rvcmlhbi5UeXBlcy5QaGFzZSwgdHlwZTogT3Blbkhpc3Rvcmlhbi5UeXBlcy5TaWduYWxUeXBlKSA9PiB0aGlzLkpTT04uU2VyaWVzID0geyBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCwgUGhhc2U6IHBoYXNlLCBUeXBlOiB0eXBlLCBGaWVsZDogJ0F2ZXJhZ2UnIH07XHJcbiAgICBwdWJsaWMgU2V0U2VyaWVzU2FwcGhpcmUgPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIsIHBoYXNlOiBzdHJpbmcsIG1lYXN1cmVtZW50OiBzdHJpbmcsIGhhcm1vbmljOiBudW1iZXIpID0+IHRoaXMuSlNPTi5TZXJpZXMgPSB7IERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELCBQaGFzZTogcGhhc2UsIE1lYXN1cmVtZW50OiBtZWFzdXJlbWVudCwgRmllbGQ6ICdBdmVyYWdlJywgSGFybW9uaWM6IGhhcm1vbmljfTtcclxuXHJcbiAgICBwdWJsaWMgU2V0U2VyaWVzRmllbGQgPSAoZmllbGQ6IFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpID0+IHtcclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzLkZpZWxkID0gZmllbGQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0cyh0aGlzKTtcclxuICAgIH07XHJcbiAgICBwdWJsaWMgU2V0UHJlY3Npc2lvbiA9ICh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLlByZWNpc2lvbiA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RhdHModGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBTdGF0cyA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLkpTT04uU2VyaWVzO1xyXG5cclxuICAgICAgICBpZiAoc2VyaWVzID09IG51bGwpIHJldHVybiB7XHJcbiAgICAgICAgICAgIE1lYW46ICcnLFxyXG4gICAgICAgICAgICBNZWRpYW46JycsXHJcbiAgICAgICAgICAgIC8vTW9kZTogJycsXHJcbiAgICAgICAgICAgIFZhcmlhbmNlOiAnJyxcclxuICAgICAgICAgICAgU3RkRGV2OicnLFxyXG4gICAgICAgICAgICBQZXJjZW50aWxlOiB7XHJcbiAgICAgICAgICAgICAgICAxMDogJycsXHJcbiAgICAgICAgICAgICAgICAyNTonJyxcclxuICAgICAgICAgICAgICAgIDUwOiAnJyxcclxuICAgICAgICAgICAgICAgIDc1OiAnJyxcclxuICAgICAgICAgICAgICAgIDkwOicnLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZURhdGEgPSB0aGlzLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklEID09PSBzZXJpZXMuRGF0YVNvdXJjZUlEKTtcclxuLy8/LkRhdGEgPz8gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGRhdGFTZXJpZXM7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGRhdGFTb3VyY2VEYXRhPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzWERBO1xyXG4gICAgICAgICAgICBkYXRhU2VyaWVzID0gKChkYXRhU291cmNlRGF0YT8uRGF0YSA/PyBbXSkgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YVtdKS5maW5kKGQgPT4gZFt0aGlzLkJ5XSA9PT0gdGhpcy5EZXZpY2UgJiYgZC5QaGFzZSA9PT0gc2VyaWVzLlBoYXNlICYmIGQuVHlwZSA9PT0gcy5UeXBlICYmIHMuQ2hhcmFjdGVyaXN0aWMgPT09IGQuQ2hhcmFjdGVyaXN0aWMpPy5EYXRhID8/IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlRGF0YT8uRGF0YVNvdXJjZS5UeXBlID09PSAnU2FwcGhpcmUnKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzU2FwcGhpcmU7XHJcbiAgICAgICAgICAgIGRhdGFTZXJpZXMgPSAoKGRhdGFTb3VyY2VEYXRhPy5EYXRhID8/IFtdKSBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGFbXSkuZmluZChkID0+IGQuTWV0ZXIgPT09IHRoaXMuRGV2aWNlICYmIGQuUGhhc2UgPT09IHMuUGhhc2UgJiYgcy5NZWFzdXJlbWVudCA9PT0gZC5DaGFyYWN0ZXJpc3RpYyAmJiBkLkhhcm1vbmljID09PSBzLkhhcm1vbmljKT8uRGF0YSA/PyBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGF0YVNvdXJjZURhdGE/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzT3Blbkhpc3RvcmlhbjtcclxuICAgICAgICAgICAgZGF0YVNlcmllcyA9ICgoZGF0YVNvdXJjZURhdGE/LkRhdGEgPz8gW10pIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm5bXSkuZmluZChkID0+IGRbdGhpcy5CeV0gPT09IHRoaXMuRGV2aWNlICYmIGQuUGhhc2UgPT09IHMuUGhhc2UgJiYgZC5TaWduYWxUeXBlID09PSBzLlR5cGUpPy5EYXRhID8/IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGRhdGFTZXJpZXMgPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFTZXJpZXMubWFwKGQgPT5kW3Nlcmllcy5GaWVsZF0pO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09IDApIHJldHVybiB7XHJcbiAgICAgICAgICAgIE1lYW46ICcnLFxyXG4gICAgICAgICAgICBNZWRpYW46ICcnLFxyXG4gICAgICAgICAgICAvL01vZGU6ICcnLFxyXG4gICAgICAgICAgICBWYXJpYW5jZTogJycsXHJcbiAgICAgICAgICAgIFN0ZERldjogJycsXHJcbiAgICAgICAgICAgIFBlcmNlbnRpbGU6IHtcclxuICAgICAgICAgICAgICAgIDEwOiAnJyxcclxuICAgICAgICAgICAgICAgIDI1OiAnJyxcclxuICAgICAgICAgICAgICAgIDUwOiAnJyxcclxuICAgICAgICAgICAgICAgIDc1OiAnJyxcclxuICAgICAgICAgICAgICAgIDkwOiAnJyxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgTWVhbjogc3RhdHMubWVhbihkYXRhKS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICBNZWRpYW46IHN0YXRzLm1lZGlhbihkYXRhKS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAvL01vZGU6IHN0YXRzLm1vZGUoZGF0YSkvKi50b1ByZWNpc2lvbih0aGlzLkpTT04uUHJlY2lzaW9uKSovLFxyXG4gICAgICAgICAgICBWYXJpYW5jZTogc3RhdHMudmFyaWFuY2UoZGF0YSkudG9GaXhlZCh0aGlzLkpTT04uUHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgU3RkRGV2OiBzdGF0cy5zdGRldihkYXRhKS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICBQZXJjZW50aWxlOiB7XHJcbiAgICAgICAgICAgICAgICAxMDogc3RhdHMucGVyY2VudGlsZShkYXRhLCAwLjEwKS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgMjU6IHN0YXRzLnBlcmNlbnRpbGUoZGF0YSwgMC4yNSkudG9GaXhlZCh0aGlzLkpTT04uUHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgICAgIDUwOiBzdGF0cy5wZXJjZW50aWxlKGRhdGEsIDAuNTApLnRvRml4ZWQodGhpcy5KU09OLlByZWNpc2lvbiksXHJcbiAgICAgICAgICAgICAgICA3NTogc3RhdHMucGVyY2VudGlsZShkYXRhLCAwLjc1KS50b0ZpeGVkKHRoaXMuSlNPTi5QcmVjaXNpb24pLFxyXG4gICAgICAgICAgICAgICAgOTA6IHN0YXRzLnBlcmNlbnRpbGUoZGF0YSwgMC45MCkudG9GaXhlZCh0aGlzLkpTT04uUHJlY2lzaW9uKSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUYWJsZTxVIGV4dGVuZHMgVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGUgPSBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT4gZXh0ZW5kcyBXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVUYWJsZSxVPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogVHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVUYWJsZSxVPikge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICBpZiAodGhpcy5KU09OID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTiA9IHsgU2VyaWVzOiBudWxsLCBQcmVjaXNpb246IDMgfTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBTZXRTZXJpZXNYREEgPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIsIHBoYXNlOiBPcGVuWERBLlR5cGVzLlBoYXNlTmFtZSwgdHlwZTogT3BlblhEQS5UeXBlcy5NZWFzdXJlbWVudFR5cGVOYW1lLCBjaGFyYWN0ZXJpc3RpYzogT3BlblhEQS5UeXBlcy5NZWFzdXJlbWVudENoYXJhY3RlcmlzdGljTmFtZSkgPT4gdGhpcy5KU09OLlNlcmllcyA9IHsgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsIFBoYXNlOiBwaGFzZSwgVHlwZTogdHlwZSwgQ2hhcmFjdGVyaXN0aWM6IGNoYXJhY3RlcmlzdGljLCBGaWVsZDogJ0F2ZXJhZ2UnIH07XHJcbiAgICBwdWJsaWMgU2V0U2VyaWVzT0ggPSAoZGF0YVNvdXJjZUlEOiBudW1iZXIsIHBoYXNlOiBPcGVuSGlzdG9yaWFuLlR5cGVzLlBoYXNlLCB0eXBlOiBPcGVuSGlzdG9yaWFuLlR5cGVzLlNpZ25hbFR5cGUpID0+IHRoaXMuSlNPTi5TZXJpZXMgPSB7IERhdGFTb3VyY2VJRDogZGF0YVNvdXJjZUlELCBQaGFzZTogcGhhc2UsIFR5cGU6IHR5cGUsIEZpZWxkOiAnQXZlcmFnZScgfTtcclxuICAgIHB1YmxpYyBTZXRTZXJpZXNTYXBwaGlyZSA9IChkYXRhU291cmNlSUQ6IG51bWJlciwgcGhhc2U6IHN0cmluZywgbWVhc3VyZW1lbnQ6IHN0cmluZywgaGFybW9uaWM6IG51bWJlcikgPT4gdGhpcy5KU09OLlNlcmllcyA9IHsgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsIFBoYXNlOiBwaGFzZSwgTWVhc3VyZW1lbnQ6IG1lYXN1cmVtZW50LCBGaWVsZDogJ0F2ZXJhZ2UnLCBIYXJtb25pYzogaGFybW9uaWMgfTtcclxuXHJcbiAgICBwdWJsaWMgU2V0U2VyaWVzRmllbGQgPSAoZmllbGQ6IFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpID0+IHtcclxuICAgICAgICB0aGlzLkpTT04uU2VyaWVzLkZpZWxkID0gZmllbGQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYWJsZSh0aGlzKTtcclxuICAgIH07XHJcbiAgICBwdWJsaWMgU2V0UHJlY3Npc2lvbiA9ICh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OLlByZWNpc2lvbiA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuZXcgVGFibGUodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXh0PFUgZXh0ZW5kcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSA9IFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlPiBleHRlbmRzIFdpZGdldDxUcmVuREFQLmlUZW1wbGF0YWJsZVRleHQsVT4ge1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFRyZW5EQVAuaVRlbXBsYXRhYmxlV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlVGV4dCxVPikge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICBpZiAodGhpcy5KU09OID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTiA9IHtUZXh0OiAnJ307XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgWHZzWTxVIGV4dGVuZHMgVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGUgPSBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT4gZXh0ZW5kcyBXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVYdnNZLFU+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldDxUcmVuREFQLmlUZW1wbGF0YWJsZVh2c1ksVT4pIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgaWYgKHRoaXMuSlNPTiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB0aGlzLkpTT04gPSB7XHJcbiAgICAgICAgICAgICAgICBZOiB7IE1pbjogMCwgTWF4OiAxMDAsIFVuaXRzOiAnJywgU2VyaWVzOiBudWxsIH0sXHJcbiAgICAgICAgICAgICAgICBYOiB7IE1pbjogMCwgTWF4OiAxMDAsIFVuaXRzOiAnJywgU2VyaWVzOiBudWxsIH0sXHJcbiAgICAgICAgICAgICAgICBUaW1lTWluOiBudWxsLCBUaW1lTWF4OiBudWxsLCBSZWdyZXNzaW9uTGluZTogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuSlNPTi5YID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5KU09OLlggPSB7IE1pbjogMCwgTWF4OiAxMDAsIFVuaXRzOiAnJywgU2VyaWVzOiBudWxsIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLkpTT04uWSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5ZID0geyBNaW46IDAsIE1heDogMTAwLCBVbml0czogJycsIFNlcmllczogbnVsbCB9O1xyXG5cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIENhbGN1bGF0ZVJhbmdlID0gKHR5cGU6ICdYJyB8ICdZJyB8ICd0aW1lJykgPT4ge1xyXG4gICAgICAgIGxldCBkcyA9IHRoaXMuRGF0YS5maW5kKGRzID0+IGRzLkRhdGFTb3VyY2UuSUQgPT09IHRoaXMuSlNPTi5YLlNlcmllcy5EYXRhU291cmNlSUQpXHJcbiAgICAgICAgbGV0IGRkID0gZHM/LkRhdGEgPz8gW107XHJcbiAgICAgICAgbGV0IHNzO1xyXG5cclxuICAgICAgICBpZiAodHlwZSA9PT0gJ3RpbWUnKSB7XHJcbiAgICAgICAgICAgIGlmIChkcy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IHRoaXMuSlNPTlt0eXBlXS5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQTtcclxuICAgICAgICAgICAgICAgIHNzID0gKGRkIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGFbXSkuZmluZChkID0+IGRbdGhpcy5CeV0gPT09IHRoaXMuRGV2aWNlICYmIGQuUGhhc2UgPT09IHMuUGhhc2UgJiYgZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5DaGFyYWN0ZXJpc3RpYyAmJiBkLlR5cGUgPT09IHMuVHlwZSkuRGF0YS5tYXAoZCA9PiBuZXcgRGF0ZShkLlRpbWVzdGFtcCkuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkcy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzID0gdGhpcy5KU09OW3R5cGVdLlNlcmllcyBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzU2FwcGhpcmU7XHJcbiAgICAgICAgICAgICAgICBzcyA9IChkZCBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGFbXSkuZmluZChkID0+IGQuTWV0ZXIgPT09IHRoaXMuRGV2aWNlICYmIGQuUGhhc2UgPT09IHMuUGhhc2UgJiYgZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5NZWFzdXJlbWVudCAmJiBkLkhhcm1vbmljID09PSBzLkhhcm1vbmljKS5EYXRhLm1hcChkID0+IG5ldyBEYXRlKGQuVGltZXN0YW1wKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRzLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IHRoaXMuSlNPTlt0eXBlXS5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc09wZW5IaXN0b3JpYW47XHJcbiAgICAgICAgICAgICAgICBzcyA9IChkZCBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuW10pLmZpbmQoZCA9PiBkW3RoaXMuQnldID09PSB0aGlzLkRldmljZSAmJiBkLlBoYXNlID09PSBzLlBoYXNlICYmIGQuU2lnbmFsVHlwZSA9PT0gcy5UeXBlKS5EYXRhLm1hcChkID0+IG5ldyBEYXRlKGQuVGltZXN0YW1wKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHNzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTi5UaW1lTWF4ID0gTWF0aC5tYXgoLi4uc3MpO1xyXG4gICAgICAgICAgICB0aGlzLkpTT04uVGltZU1pbiA9IE1hdGgubWluKC4uLnNzKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZHMuRGF0YVNvdXJjZS5UeXBlID09PSAnVHJlbkRBUERCJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHMgPSB0aGlzLkpTT05bdHlwZV0uU2VyaWVzIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNYREE7XHJcbiAgICAgICAgICAgICAgICBzcyA9IChkZCBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhW10pLmZpbmQoZCA9PiBkW3RoaXMuQnldID09PSB0aGlzLkRldmljZSAmJiBkLlBoYXNlID09PSBzLlBoYXNlICYmIGQuQ2hhcmFjdGVyaXN0aWMgPT09IHMuQ2hhcmFjdGVyaXN0aWMgJiYgZC5UeXBlID09PSBzLlR5cGUpLkRhdGEubWFwKGQgPT4gZFtzLkZpZWxkXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZHMuRGF0YVNvdXJjZS5UeXBlID09PSAnU2FwcGhpcmUnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IHRoaXMuSlNPTlt0eXBlXS5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1NhcHBoaXJlO1xyXG4gICAgICAgICAgICAgICAgc3MgPSAoZGQgYXMgVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhW10pLmZpbmQoZCA9PiBkLk1ldGVyID09PSB0aGlzLkRldmljZSAmJiBkLlBoYXNlID09PSBzcy5QaGFzZSAmJiBkLkNoYXJhY3RlcmlzdGljID09PSBzLk1lYXN1cmVtZW50ICYmIGQuSGFybW9uaWMgPT09IHMuSGFybW9uaWMgKS5EYXRhLm1hcChkID0+IGRbcy5GaWVsZF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRzLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IHRoaXMuSlNPTlt0eXBlXS5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc09wZW5IaXN0b3JpYW47XHJcbiAgICAgICAgICAgICAgICBzcyA9IChkZCBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuW10pLmZpbmQoZCA9PiBkW3RoaXMuQnldID09PSB0aGlzLkRldmljZSAmJiBkLlBoYXNlID09PSBzLlBoYXNlICYmIGQuU2lnbmFsVHlwZSA9PT0gcy5UeXBlKS5EYXRhLm1hcChkID0+IGRbcy5GaWVsZF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHNzID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLkpTT05bdHlwZV0uTWF4ID0gTWF0aC5tYXgoLi4uc3MpO1xyXG4gICAgICAgICAgICB0aGlzLkpTT05bdHlwZV0uTWluID0gTWF0aC5taW4oLi4uc3MpO1xyXG4gICAgICAgICAgICBsZXQgYnVmZmVyID0gKHRoaXMuSlNPTlt0eXBlXS5NYXggLSB0aGlzLkpTT05bdHlwZV0uTWluKSAqIC4xMDtcclxuICAgICAgICAgICAgdGhpcy5KU09OW3R5cGVdLk1heCA9IHRoaXMuSlNPTlt0eXBlXS5NYXggKyBidWZmZXI7XHJcbiAgICAgICAgICAgIHRoaXMuSlNPTlt0eXBlXS5NaW4gPSB0aGlzLkpTT05bdHlwZV0uTWluIC0gYnVmZmVyO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgWHZzWSh0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHB1YmxpYyBTZXRBeGlzID0gKGF4aXM6ICd4JyB8ICd5JywgZmllbGQ6IGtleW9mIFRyZW5EQVAuaUF4aXMsIHZhbHVlOiBUcmVuREFQLmlBeGlzW2tleW9mIFRyZW5EQVAuaUF4aXNdKSA9PiB7XHJcbiAgICAgICAgaWYgKGF4aXMgPT09ICd4JylcclxuICAgICAgICAgICAgKHRoaXMuSlNPTi5YW2ZpZWxkXSBhcyBhbnkpID0gdmFsdWU7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAodGhpcy5KU09OLllbZmllbGRdIGFzIGFueSkgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBYdnNZKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRTZXJpZXNYREEgPSAoYXhpczogJ1gnIHwgJ1knLCBkYXRhU291cmNlSUQ6IG51bWJlciwgcGhhc2U6IE9wZW5YREEuVHlwZXMuUGhhc2VOYW1lLCB0eXBlOiBPcGVuWERBLlR5cGVzLk1lYXN1cmVtZW50VHlwZU5hbWUsIGNoYXJhY3RlcmlzdGljOiBPcGVuWERBLlR5cGVzLk1lYXN1cmVtZW50Q2hhcmFjdGVyaXN0aWNOYW1lKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OW2F4aXNdLlNlcmllcyA9IHsgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsIFBoYXNlOiBwaGFzZSwgVHlwZTogdHlwZSwgQ2hhcmFjdGVyaXN0aWM6IGNoYXJhY3RlcmlzdGljLCBGaWVsZDogJ0F2ZXJhZ2UnIH1cclxuICAgICAgICByZXR1cm4gbmV3IFh2c1kodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgcHVibGljIFNldFNlcmllc09IID0gKGF4aXM6ICdYJyB8ICdZJywgZGF0YVNvdXJjZUlEOiBudW1iZXIsIHBoYXNlOiBPcGVuSGlzdG9yaWFuLlR5cGVzLlBoYXNlLCB0eXBlOiBPcGVuSGlzdG9yaWFuLlR5cGVzLlNpZ25hbFR5cGUpID0+IHtcclxuICAgICAgICB0aGlzLkpTT05bYXhpc10uU2VyaWVzID0geyBEYXRhU291cmNlSUQ6IGRhdGFTb3VyY2VJRCwgUGhhc2U6IHBoYXNlLCBUeXBlOiB0eXBlLCBGaWVsZDogJ0F2ZXJhZ2UnIH1cclxuICAgICAgICByZXR1cm4gbmV3IFh2c1kodGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBTZXRTZXJpZXNTYXBwaGlyZSA9IChheGlzOiAnWCcgfCAnWScsIGRhdGFTb3VyY2VJRDogbnVtYmVyLCBwaGFzZTogc3RyaW5nLCBtZWFzdXJlbWVudDogc3RyaW5nLCBoYXJtb25pYzogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5KU09OW2F4aXNdLlNlcmllcyA9IHsgRGF0YVNvdXJjZUlEOiBkYXRhU291cmNlSUQsIFBoYXNlOiBwaGFzZSwgTWVhc3VyZW1lbnQ6IG1lYXN1cmVtZW50LCBGaWVsZDogJ0F2ZXJhZ2UnLCBIYXJtb25pYzogaGFybW9uaWMgfVxyXG4gICAgICAgIHJldHVybiBuZXcgWHZzWSh0aGlzKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIHB1YmxpYyBVcGRhdGVTZXJpZXMgPSAoYXhpczogJ3gnIHwgJ3knLCBmaWVsZDoga2V5b2YgVHJlbkRBUC5pU2VyaWVzLCB2YWx1ZTogVHJlbkRBUC5pU2VyaWVzW2tleW9mIFRyZW5EQVAuaVNlcmllc10pID0+IHtcclxuICAgICAgICBpZiAoYXhpcyA9PT0gJ3gnKVxyXG4gICAgICAgICAgICAodGhpcy5KU09OLlguU2VyaWVzW2ZpZWxkXSBhcyBhbnkpID0gdmFsdWU7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAodGhpcy5KU09OLlkuU2VyaWVzW2ZpZWxkXSBhcyBhbnkpID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgWHZzWSh0aGlzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFJlbW92ZVNlcmllcyA9IChheGlzOiAneCcgfCAneScpID0+IHtcclxuICAgICAgICBpZiAoYXhpcyA9PT0gJ3gnKVxyXG4gICAgICAgICAgICB0aGlzLkpTT04uWC5TZXJpZXMgPSBudWxsO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5KU09OLlkuU2VyaWVzID0gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBYdnNZKHRoaXMpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlV2lkZ2V0KHR5cGU6IFRyZW5EQVAuV2lkZ2V0VHlwZSwgYnk6IFRyZW5EQVAuVGVtcGxhdGVCeSwgZGV2aWNlOiBzdHJpbmcsIGhlaWdodDogbnVtYmVyLCB3aWR0aDogbnVtYmVyKSB7XHJcbiAgICBpZiAodHlwZSA9PSAnSGlzdG9ncmFtJylcclxuICAgICAgICByZXR1cm4gbmV3IEhpc3RvZ3JhbSh7SGVpZ2h0OiBoZWlnaHQsIFdpZHRoOiB3aWR0aCwgQnk6IGJ5LCBEZXZpY2U6IGRldmljZSwgTGFiZWw6IHR5cGUsIFR5cGU6IHR5cGUsIEpTT046IHVuZGVmaW5lZCB9KTtcclxuICAgIC8vZWxzZSBpZiAodHlwZSA9PSAnUHJvZmlsZScpXHJcbiAgICAvLyAgICByZXR1cm4gbmV3IFByb2ZpbGUoaGVpZ2h0LCB3aWR0aCk7XHJcbiAgICBlbHNlIGlmICh0eXBlID09ICdTdGF0cycpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0cyh7IEhlaWdodDogaGVpZ2h0LCBXaWR0aDogd2lkdGgsIEJ5OiBieSwgRGV2aWNlOiBkZXZpY2UsTGFiZWw6IHR5cGUsIFR5cGU6IHR5cGUsIEpTT046IHVuZGVmaW5lZCB9KTtcclxuICAgIGVsc2UgaWYgKHR5cGUgPT0gJ1RhYmxlJylcclxuICAgICAgICByZXR1cm4gbmV3IFRhYmxlKHsgSGVpZ2h0OiBoZWlnaHQsIFdpZHRoOiB3aWR0aCwgQnk6IGJ5LCBEZXZpY2U6IGRldmljZSxMYWJlbDogdHlwZSwgVHlwZTogdHlwZSwgSlNPTjogdW5kZWZpbmVkIH0pO1xyXG4gICAgZWxzZSBpZiAodHlwZSA9PSAnVGV4dCcpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0KHsgSGVpZ2h0OiBoZWlnaHQsIFdpZHRoOiB3aWR0aCwgQnk6IGJ5LCBEZXZpY2U6IGRldmljZSxMYWJlbDogdHlwZSwgVHlwZTogdHlwZSwgSlNPTjogdW5kZWZpbmVkIH0pO1xyXG4gICAgZWxzZSBpZiAodHlwZSA9PSAnVHJlbmQnKVxyXG4gICAgICAgIHJldHVybiBuZXcgVHJlbmQoeyBIZWlnaHQ6IGhlaWdodCwgV2lkdGg6IHdpZHRoLCBCeTogYnksIERldmljZTogZGV2aWNlLExhYmVsOiB0eXBlLCBUeXBlOiB0eXBlLCBKU09OOiB1bmRlZmluZWQgfSk7XHJcbiAgICBpZiAodHlwZSA9PSAnWHZzWScpXHJcbiAgICAgICAgcmV0dXJuIG5ldyBYdnNZKHsgSGVpZ2h0OiBoZWlnaHQsIFdpZHRoOiB3aWR0aCwgQnk6IGJ5LCBEZXZpY2U6IGRldmljZSwgTGFiZWw6IHR5cGUsIFR5cGU6IHR5cGUsIEpTT046IHVuZGVmaW5lZCB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gR2V0Q29sb3IobGFiZWw/OiBzdHJpbmcpIHtcclxuICAgIGlmIChsYWJlbCA9PSB1bmRlZmluZWQpIHJldHVybiBSYW5kb21Db2xvcigpO1xyXG4gICAgZWxzZSBpZiAobGFiZWwuaW5kZXhPZignVm9sdGFnZSBBJykgPj0gMCkgcmV0dXJuICcjQTMwMDAwJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1ZvbHRhZ2UgQicpID49IDApIHJldHVybiAnIzAwMjlBMyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdWb2x0YWdlIEMnKSA+PSAwKSByZXR1cm4gJyMwMDdBMjknO1xyXG4gICAgZWxzZSBpZiAobGFiZWwuaW5kZXhPZignVm9sdGFnZSBOJykgPj0gMCkgcmV0dXJuICcjYzNjM2MzJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ0N1cnJlbnQgQScpID49IDApIHJldHVybiAnI0ZGMDAwMCc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdDdXJyZW50IEInKSA+PSAwKSByZXR1cm4gJyMwMDY2Q0MnO1xyXG4gICAgZWxzZSBpZiAobGFiZWwuaW5kZXhPZignQ3VycmVudCBDJykgPj0gMCkgcmV0dXJuICcjMzNDQzMzJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ0FOJykgPj0gMCkgcmV0dXJuICcjRkYwMDAwJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ0JOJykgPj0gMCkgcmV0dXJuICcjMDA2NkNDJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ0NOJykgPj0gMCkgcmV0dXJuICcjMzNDQzMzJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ05HJykgPj0gMCkgcmV0dXJuICcjYzNjM2MzJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1JFUycpID49IDApIHJldHVybiAnI2ZmYzEwNyc7XHJcbiAgICBlbHNlIGlmIChsYWJlbC5pbmRleE9mKCdBdmVyYWdlJykgPj0gMCkgcmV0dXJuICcjOUE1MkE0JztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1RvdGFsJykgPj0gMCkgcmV0dXJuICcjOUE1MkE0JztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1MwJykgPj0gMCkgcmV0dXJuICcjQTMwMDAwJztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1MyJykgPj0gMCkgcmV0dXJuICcjMDA3QTI5JztcclxuICAgIGVsc2UgaWYgKGxhYmVsLmluZGV4T2YoJ1MxJykgPj0gMCkgcmV0dXJuICcjMDAyOUEzJztcclxuICAgIGVsc2UgcmV0dXJuIFJhbmRvbUNvbG9yKCk7XHJcbn1cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFdpZGdpdC50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMTEvMTYvMjAyMCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uLy4uLy4uL1N0eWxlcy9hcHAuc2Nzcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQcm9maWxlKHByb3BzOiBUcmVuREFQLmlXaWRnZXQpIHtcclxuICAgIHJldHVybiA8ZGl2PlByb2ZpbGU8L2Rpdj47XHJcbn1cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFN0YXRzLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIwLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAxMS8xNi8yMDIwIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgeyBTdGF0cyB9IGZyb20gJy4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IFdpZGdldCwgeyBTZXJpZXNTZWxlY3QgfSBmcm9tICcuL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9YREEgZnJvbSAnLi9XaWRnZXQvWERBL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBmcm9tICcuL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvU2FwcGhpcmUgZnJvbSAnLi9XaWRnZXQvU2FwcGhpcmUvQWRkaXRpb25hbEluZm8nO1xyXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3RhdHNKU1gocHJvcHM6IFRyZW5EQVAuaVRlbXBsYXRhYmxlV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlU3RhdHM+KSB7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IFJlYWN0LnVzZVN0YXRlPFN0YXRzPihuZXcgU3RhdHMocHJvcHMpKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldFJlY29yZChuZXcgU3RhdHMocHJvcHMpKTtcclxuICAgIH0sIFtwcm9wcy5EYXRhLCBwcm9wcy5IZWlnaHQsIHByb3BzLkRldmljZV0pO1xyXG5cclxuXHJcbiAgICBjb25zdCBzdGF0cyA9IHJlY29yZC5TdGF0cygpO1xyXG4gICAgY29uc3QgZGF0YVNvdXJjZSA9IHJlY29yZC5EYXRhLmZpbmQoZGQgPT4gZGQuRGF0YVNvdXJjZS5JRCA9PT0gcmVjb3JkLkpTT04uU2VyaWVzPy5EYXRhU291cmNlSUQgPz8gMClcclxuICAgIGNvbnN0IGRhdGEgPSBkYXRhU291cmNlPy5EYXRhID8/IFtdO1xyXG4gICAgbGV0IGRhdHVtO1xyXG4gICAgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgbGV0IHMgPSByZWNvcmQuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGVTZXJpZXNPcGVuSGlzdG9yaWFuO1xyXG4gICAgICAgIGRhdHVtID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikgPT4gZGRbcHJvcHMuQnldID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuU2lnbmFsVHlwZSA9PT0gcy5UeXBlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicpIHtcclxuICAgICAgICBsZXQgcyA9IHJlY29yZC5KU09OLlNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0ZVNlcmllc1hEQTtcclxuICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaVhEQVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlR5cGUgPT09IHMuVHlwZSAmJiBkZC5QaGFzZSA9PT0gcy5QaGFzZSAmJiBkZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5DaGFyYWN0ZXJpc3RpYyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICBsZXQgcyA9IHJlY29yZC5KU09OLlNlcmllcyBhcyBUcmVuREFQLmlUZW1wbGF0ZVNlcmllc1NhcHBoaXJlO1xyXG4gICAgICAgIGRhdHVtID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKSA9PiBkZC5NZXRlciA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzLk1lYXN1cmVtZW50ICYmIGRkLkhhcm1vbmljID09PSBzLkhhcm1vbmljKTtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBkYXR1bSA9IHsgRGF0YTogW10gfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIHN0eWxlPXt7IHdpZHRoOiBwcm9wcy5XaWR0aCwgaGVpZ2h0OiBwcm9wcy5IZWlnaHQsIG1heEhlaWdodDogcHJvcHMuSGVpZ2h0LCBvdmVyZmxvd1k6ICdhdXRvJyB9fT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIiBzdHlsZT17eyBwYWRkaW5nOiAwIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcIndpZGdpdC1sYWJlbFwiXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3Byb3BzLkxhYmVsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJidG4gXCIgKyBzdHlsZXNbXCJ3aWRnaXQtY29udHJvbHNcIl19IHRpdGxlPSdXaWRnZXQgU2V0dGluZ3MnIG9uQ2xpY2s9eygpID0+IHNldFRvZ2dsZSh0cnVlKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtY29nXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT0ndGFibGUnPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPjx0aD5DYXRlZ29yeTwvdGg+PHRoPlN0YXRpc3RpYzwvdGg+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge09iamVjdC5rZXlzKHN0YXRzKS5tYXAoKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ1BlcmNlbnRpbGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8dHIga2V5PXtrZXl9Pjx0ZD57a2V5fTwvdGQ+PHRkPntzdGF0c1trZXldfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RhdHMuUGVyY2VudGlsZSkubWFwKHBrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHRyIGtleT17a2V5K3BrZXl9Pjx0ZD57cGtleX10aCBQZXJjZW50aWxlPC90ZD48dGQ+e3N0YXRzLlBlcmNlbnRpbGVbcGtleV19PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8V2lkZ2V0IHsuLi5wcm9wc30gUmVjb3JkPXtyZWNvcmR9IFRvZ2dsZT17dG9nZ2xlfSBTZXRUb2dnbGU9eyhib29sKSA9PiBzZXRUb2dnbGUoYm9vbCl9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVTdGF0cz4+IEZpZWxkPSdMYWJlbCcgUmVjb3JkPXtyZWNvcmR9IFR5cGU9J3RleHQnIFNldHRlcj17KHIpID0+IHNldFJlY29yZChuZXcgU3RhdHMocikpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+V2lkdGg8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17cmVjb3JkPy5XaWR0aH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChuZXcgU3RhdHMoeyAuLi5yZWNvcmQsIFdpZHRoOiBwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSB9KSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eyhldnQpID0+IHNldFJlY29yZChuZXcgU3RhdHMoeyAuLi5yZWNvcmQsIFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCAtIDIwMCB9KSl9PkZ1bGwgV2lkdGg8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoNj5TZXJpZXM8L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJhY2NvcmRpb25cIiBzdHlsZT17eyBvdmVyZmxvd1k6ICdhdXRvJywgbWF4SGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAzMDAsIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC8gMiB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3JlY29yZC5EYXRhLm1hcCgoZCwgaSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2FyZC1saW5rXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGhyZWY9e1wiI2NvbGxhcHNlXCIgKyBpfT57ZC5EYXRhU291cmNlLk5hbWV9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9e1wiY29sbGFwc2VcIiArIGl9IGNsYXNzTmFtZT1cImNvbGxhcHNlIHNob3dcIiBkYXRhLXBhcmVudD1cIiNhY2NvcmRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJpZXNTZWxlY3QgV2lkZ2V0PXtyZWNvcmR9IERhdGFTb3VyY2VJRD17ZC5EYXRhU291cmNlLklEfSBDYWxsYmFjaz17KCkgPT4gc2V0UmVjb3JkKG5ldyBTdGF0cyhyZWNvcmQpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2QuRGF0YVNvdXJjZS5UeXBlID09PSAnVHJlbkRBUERCJyAmJiByZWNvcmQuSlNPTi5TZXJpZXMgIT0gdW5kZWZpbmVkID8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+eyhkYXR1bSBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhKT8uTmFtZX08L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9YREEgSW5kZXg9e2l9IERhdGE9e2RhdHVtIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtyZWNvcmQuSlNPTi5TZXJpZXMuRmllbGR9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldFNlcmllc0ZpZWxkKGV2dC50YXJnZXQudmFsdWUgYXMgVHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZCkpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQXZlcmFnZVwiPkF2Zzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1heGltdW1cIj5NYXg8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+UHJlY2lzaW9uPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3JlY29yZC5KU09OLlByZWNpc2lvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0UHJlY3Npc2lvbihwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2QuRGF0YVNvdXJjZS5UeXBlID09PSAnU2FwcGhpcmUnICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+eyhkYXR1bSBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpPy5OYW1lfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb1NhcHBoaXJlIEluZGV4PXtpfSBEYXRhPXtkYXR1bSBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGF9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZC5KU09OLlNlcmllcy5GaWVsZH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0U2VyaWVzRmllbGQoZXZ0LnRhcmdldC52YWx1ZSBhcyBUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkKSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkF2ZXJhZ2VcIj5Bdmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWF4aW11bVwiPk1heDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlByZWNpc2lvbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3JlY29yZC5KU09OLlByZWNpc2lvbn0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChyZWNvcmQuU2V0UHJlY3Npc2lvbihwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+eyhkYXR1bSBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKT8uRGVzY3JpcHRpb259PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBEYXRhPXtkYXR1bSBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJufSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+RmllbGQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtyZWNvcmQuSlNPTi5TZXJpZXMuRmllbGR9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldFNlcmllc0ZpZWxkKGV2dC50YXJnZXQudmFsdWUgYXMgVHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZCkpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJBdmVyYWdlXCI+QXZnPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiTWluaW11bVwiPk1pbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1heGltdW1cIj5NYXg8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5QcmVjaXNpb248L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPXtyZWNvcmQuSlNPTi5QcmVjaXNpb259IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldFByZWNzaXNpb24ocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9XaWRnZXQ+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufSIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBUYWJsZS50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMTEvMTYvMjAyMCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IFRhYmxlRm9ybSBmcm9tICdAZ3BhLWdlbXN0b25lL3JlYWN0LXRhYmxlJztcclxuaW1wb3J0IHsgVGFibGUgfSBmcm9tICcuL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBXaWRnZXQsIHsgU2VyaWVzU2VsZWN0IH0gZnJvbSAnLi9XaWRnZXQvV2lkZ2V0JztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvWERBIGZyb20gJy4vV2lkZ2V0L1hEQS9BZGRpdGlvbmFsSW5mbyc7XHJcbmltcG9ydCBBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gZnJvbSAnLi9XaWRnZXQvT3Blbkhpc3Rvcmlhbi9BZGRpdGlvbmFsSW5mbyc7XHJcbmltcG9ydCBBZGRpdGlvbmFsSW5mb1NhcHBoaXJlIGZyb20gJy4vV2lkZ2V0L1NhcHBoaXJlL0FkZGl0aW9uYWxJbmZvJztcclxuXHJcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9yZWFjdC1mb3Jtcyc7XHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUYWJsZUpTWChwcm9wczogVHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVUYWJsZT4pIHtcclxuICAgIGNvbnN0IFt0b2dnbGUsIHNldFRvZ2dsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgICBjb25zdCBbcmVjb3JkLCBzZXRSZWNvcmRdID0gUmVhY3QudXNlU3RhdGU8VGFibGU+KG5ldyBUYWJsZShwcm9wcykpO1xyXG4gICAgY29uc3QgW3NvcnRGaWVsZCwgc2V0U29ydEZpZWxkXSA9IFJlYWN0LnVzZVN0YXRlPGtleW9mIFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50PignVGltZXN0YW1wJyk7XHJcbiAgICBjb25zdCBbYXNjZW5kaW5nLCBzZXRBc2NlbmRpbmddID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4odHJ1ZSk7XHJcbiAgICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludFtdPihbXSk7XHJcbiAgICBjb25zdCBbaW5mbywgc2V0SW5mb10gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT4oe30gYXMgVHJlbkRBUC5pRGF0YVNldFJldHVyblR5cGUpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgc2V0UmVjb3JkKG5ldyBUYWJsZShwcm9wcykpO1xyXG4gICAgfSwgW3Byb3BzLkRhdGEsIHByb3BzLkRldmljZV0pO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHJlY29yZC5EYXRhLmZpbmQoZGQgPT4gZGQuRGF0YVNvdXJjZS5JRCA9PT0gcmVjb3JkLkpTT04uU2VyaWVzPy5EYXRhU291cmNlSUQgPz8gMClcclxuICAgICAgICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZT8uRGF0YSA/PyBbXTtcclxuICAgICAgICBsZXQgZGF0dW07XHJcbiAgICAgICAgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gcmVjb3JkLkpTT04uU2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzT3Blbkhpc3RvcmlhbjtcclxuICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKSA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5TaWduYWxUeXBlID09PSBzLlR5cGUgJiYgZGQuUGhhc2UgPT09IHMuUGhhc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gcmVjb3JkLkpTT04uU2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzWERBO1xyXG4gICAgICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaVhEQVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlR5cGUgPT09IHMuVHlwZSAmJiBkZC5QaGFzZSA9PT0gcy5QaGFzZSAmJiBkZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5DaGFyYWN0ZXJpc3RpYyApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgbGV0IHMgPSByZWNvcmQuSlNPTi5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGVTZXJpZXNTYXBwaGlyZTtcclxuICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzLk1lYXN1cmVtZW50ICYmIHMuSGFybW9uaWMgPT09IGRkLkhhcm1vbmljKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBkYXR1bSA9IHtEYXRhOltdfTtcclxuXHJcbiAgICAgICAgaWYgKGRhdHVtID09IHVuZGVmaW5lZCkgc2V0SW5mbyh7fSBhcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSApO1xyXG4gICAgICAgIGVsc2Ugc2V0SW5mbyhkYXR1bSBhcyBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSk7XHJcbiAgICB9LCBbcmVjb3JkXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuXHJcbiAgICAgICAgY29uc3Qgb3JkZXJlZCA9IF8ub3JkZXJCeShpbmZvPy5EYXRhID8/IFtdLCBbc29ydEZpZWxkXSwgW2FzY2VuZGluZyA/ICdhc2MnIDogJ2Rlc2MnXSlcclxuICAgICAgICBzZXREYXRhKG9yZGVyZWQpO1xyXG4gICAgfSwgW2FzY2VuZGluZyxzb3J0RmllbGQsaW5mb10pXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCIgc3R5bGU9e3sgd2lkdGg6IHByb3BzLldpZHRoLCBoZWlnaHQ6IHByb3BzLkhlaWdodCwgbWF4SGVpZ2h0OiBwcm9wcy5IZWlnaHQsIG92ZXJmbG93WTogJ2F1dG8nIH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1wid2lkZ2l0LWxhYmVsXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57cHJvcHMuTGFiZWx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPXtcImJ0biBcIiArIHN0eWxlc1tcIndpZGdpdC1jb250cm9sc1wiXX0gdGl0bGU9J1dpZGdldCBTZXR0aW5ncycgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKHRydWUpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIj48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8VGFibGVGb3JtPFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50PiB0YWJsZUNsYXNzPSd0YWJsZScgY29scz17W1xyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnVGltZXN0YW1wJywgZmllbGQ6ICdUaW1lc3RhbXAnLCBsYWJlbDogJ1RpbWVzdGFtcCcgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ01pbmltdW0nLCBmaWVsZDogJ01pbmltdW0nLCBsYWJlbDogJ01pbicsIGNvbnRlbnQ6IChpdGVtLGtleSwgc3R5bGUpID0+IGl0ZW0uTWluaW11bS50b0ZpeGVkKHJlY29yZC5KU09OLlByZWNpc2lvbil9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnQXZlcmFnZScsIGZpZWxkOiAnQXZlcmFnZScsIGxhYmVsOiAnQXZnJywgY29udGVudDogKGl0ZW0sIGtleSwgc3R5bGUpID0+IGl0ZW0uQXZlcmFnZS50b0ZpeGVkKHJlY29yZC5KU09OLlByZWNpc2lvbil9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnTWF4aW11bScsIGZpZWxkOiAnTWF4aW11bScsIGxhYmVsOiAnTWF4JywgY29udGVudDogKGl0ZW0sIGtleSwgc3R5bGUpID0+IGl0ZW0uTWF4aW11bS50b0ZpeGVkKHJlY29yZC5KU09OLlByZWNpc2lvbil9LFxyXG4gICAgICAgICAgICAgICAgXX0gZGF0YT17ZGF0YX0gc29ydEtleT17c29ydEZpZWxkfSBvbkNsaWNrPXsoZGF0YSkgPT4geyB9fSBhc2NlbmRpbmc9e2FzY2VuZGluZ30gb25Tb3J0PXsoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmNvbEZpZWxkID09PSBzb3J0RmllbGQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEFzY2VuZGluZyghYXNjZW5kaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTb3J0RmllbGQoZGF0YS5jb2xGaWVsZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0QXNjZW5kaW5nKHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8V2lkZ2V0IHsuLi5wcm9wc30gUmVjb3JkPXtyZWNvcmR9IFRvZ2dsZT17dG9nZ2xlfSBTZXRUb2dnbGU9eyhib29sKSA9PiBzZXRUb2dnbGUoYm9vbCl9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVUYWJsZT4+IEZpZWxkPSdMYWJlbCcgUmVjb3JkPXtyZWNvcmR9IFR5cGU9J3RleHQnIFNldHRlcj17KHIpID0+IHNldFJlY29yZChuZXcgVGFibGUocikpfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWw+V2lkdGg8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17cmVjb3JkPy5XaWR0aH0gb25DaGFuZ2U9eyhldnQpID0+IHNldFJlY29yZChuZXcgVGFibGUoeyAuLi5yZWNvcmQsIFdpZHRoOiBwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSB9KSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eyhldnQpID0+IHNldFJlY29yZChuZXcgVGFibGUoeyAuLi5yZWNvcmQsIFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCAtIDIwMCB9KSl9PkZ1bGwgV2lkdGg8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoNj5TZXJpZXM8L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJhY2NvcmRpb25cIiBzdHlsZT17eyBvdmVyZmxvd1k6ICdhdXRvJywgbWF4SGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAzMDAsIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC8gMiB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3JlY29yZC5EYXRhLm1hcCgoZCwgaSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiY2FyZC1saW5rXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIGhyZWY9e1wiI2NvbGxhcHNlXCIgKyBpfT57ZC5EYXRhU291cmNlLk5hbWV9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9e1wiY29sbGFwc2VcIiArIGl9IGNsYXNzTmFtZT1cImNvbGxhcHNlIHNob3dcIiBkYXRhLXBhcmVudD1cIiNhY2NvcmRpb25cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJpZXNTZWxlY3QgV2lkZ2V0PXtyZWNvcmR9IERhdGFTb3VyY2VJRD17ZC5EYXRhU291cmNlLklEfSBDYWxsYmFjaz17KCkgPT4gc2V0UmVjb3JkKG5ldyBUYWJsZShyZWNvcmQpKX0gICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZC5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+eyhpbmZvIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpPy5OYW1lID8/ICcnfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb1hEQSBJbmRleD17aX0gRGF0YT17KGluZm8gYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5QcmVjaXNpb248L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cIm51bWJlclwiIHZhbHVlPXtyZWNvcmQuSlNPTi5QcmVjaXNpb259IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldFByZWNzaXNpb24ocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJyAmJiByZWNvcmQuSlNPTi5TZXJpZXMgIT0gdW5kZWZpbmVkID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aX0gY2xhc3NOYW1lPVwibGlzdC1ncm91cC1pdGVtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPnsoaW5mbyBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpPy5OYW1lID8/ICcnfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBZGRpdGlvbmFsSW5mb1NhcHBoaXJlIEluZGV4PXtpfSBEYXRhPXsoaW5mbyBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+UHJlY2lzaW9uPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJudW1iZXJcIiB2YWx1ZT17cmVjb3JkLkpTT04uUHJlY2lzaW9ufSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKHJlY29yZC5TZXRQcmVjc2lzaW9uKHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nICYmIHJlY29yZC5KU09OLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+eyhpbmZvIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4pPy5EZXNjcmlwdGlvbiA/PyAnJ308L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9PcGVuSGlzdG9yaWFuIERhdGE9eyhpbmZvIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4pfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+UHJlY2lzaW9uPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJudW1iZXJcIiB2YWx1ZT17cmVjb3JkLkpTT04uUHJlY2lzaW9ufSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKHJlY29yZC5TZXRQcmVjc2lzaW9uKHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvV2lkZ2V0PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICk7XHJcbn0iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgVGV4dC50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMCwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMTEvMTYvMjAyMCAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IFdpZGdldCBmcm9tICcuL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgeyBJbnB1dCwgVGV4dEFyZWEgfSBmcm9tICdAZ3BhLWdlbXN0b25lL3JlYWN0LWZvcm1zJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRleHRKU1gocHJvcHM6IFRyZW5EQVAuaVRlbXBsYXRhYmxlV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlVGV4dD4pIHtcclxuICAgIGNvbnN0IFt0b2dnbGUsIHNldFRvZ2dsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgICBjb25zdCBbcmVjb3JkLCBzZXRSZWNvcmRdID0gUmVhY3QudXNlU3RhdGU8VGV4dD4obmV3IFRleHQocHJvcHMpKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIHN0eWxlPXt7IHdpZHRoOiBwcm9wcy5XaWR0aCwgaGVpZ2h0OiBwcm9wcy5IZWlnaHQgfX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCIgc3R5bGU9e3sgcGFkZGluZzogMCB9fT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJ3aWRnaXQtbGFiZWxcIl19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPntwcm9wcy5MYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYnRuIFwiICsgc3R5bGVzW1wid2lkZ2l0LWNvbnRyb2xzXCJdfSB0aXRsZT0nV2lkZ2V0IFNldHRpbmdzJyBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUodHJ1ZSl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvZ1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxwIHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZScsIHRvcDogMzB9fT57cHJvcHMuSlNPTi5UZXh0IH08L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPFdpZGdldCB7Li4ucHJvcHN9IFJlY29yZD17cmVjb3JkfSBUb2dnbGU9e3RvZ2dsZX0gU2V0VG9nZ2xlPXsoYm9vbCkgPT4gc2V0VG9nZ2xlKGJvb2wpfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaVRlbXBsYXRhYmxlV2lkZ2V0PFRyZW5EQVAuaVRlbXBsYXRhYmxlVGV4dD4+IEZpZWxkPSdMYWJlbCcgUmVjb3JkPXtyZWNvcmR9IFR5cGU9J3RleHQnIFNldHRlcj17KHIpID0+IHNldFJlY29yZChuZXcgVGV4dChyKSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5XaWR0aDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtyZWNvcmQ/LldpZHRofSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBUZXh0KHsgLi4ucmVjb3JkLCBXaWR0aDogcGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkgfSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwLXByZXBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IFRleHQoeyAuLi5yZWNvcmQsIFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCAtIDIwMCB9KSl9PkZ1bGwgV2lkdGg8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxUZXh0QXJlYTxUcmVuREFQLmlUZXh0PiBSZWNvcmQ9e3JlY29yZC5KU09OfSBGaWVsZD1cIlRleHRcIiBSb3dzPXsxMH0gU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBUZXh0KHsgLi4ucmVjb3JkLCBKU09OOiB7IC4uLnIgfSB9KSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9XaWRnZXQ+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufSIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBBeGlzLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMi8xNy8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQLCBSZWR1eCB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCB7IFRyZW5kIH0gZnJvbSAnLi8uLi9JbXBsZW1lbnRhdGlvbnMnO1xyXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5pbXBvcnQgeyBDcm9zc01hcmsgfSBmcm9tICdAZ3BhLWdlbXN0b25lL2dwYS1zeW1ib2xzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEF4aXMgKHByb3BzOiB7IEluZGV4OiBudW1iZXIsIEF4aXM6IFRyZW5EQVAuaVlBeGlzLCBXaWRnZXQ6IFRyZW5kLCBDYWxsYmFjazogKCkgPT4gdm9pZCB9KXtcclxuICAgIGNvbnN0IGZpcnN0UmVuZGVyID0gUmVhY3QudXNlUmVmKHRydWUpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZmlyc3RSZW5kZXIuY3VycmVudCA9IGZhbHNlO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIC8vY29uc3QgW2JpbnMsIHNldEJpbnNdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPihwcm9wcy5TZXJpZXM/LkJpbkNvdW50ID8/IDEwKTtcclxuICAgIGNvbnN0IFt1bml0cywgc2V0VW5pdHNdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihwcm9wcy5BeGlzLlVuaXRzKTtcclxuICAgIGNvbnN0IFtwb3NpdGlvbiwgc2V0UG9zaXRpb25dID0gUmVhY3QudXNlU3RhdGU8J2xlZnQnIHwgJ3JpZ2h0Jz4ocHJvcHMuQXhpcy5Qb3NpdGlvbik7XHJcbiAgICBjb25zdCBbbWluLCBzZXRNaW5dID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPihwcm9wcy5BeGlzLk1pbik7XHJcbiAgICBjb25zdCBbbWF4LCBzZXRNYXhdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPihwcm9wcy5BeGlzLk1heCk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoIWZpcnN0UmVuZGVyLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlVwZGF0ZUF4aXMocHJvcHMuSW5kZXgsIFwiVW5pdHNcIiwgdW5pdHMpO1xyXG4gICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFt1bml0c10pO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoIWZpcnN0UmVuZGVyLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlVwZGF0ZUF4aXMocHJvcHMuSW5kZXgsIFwiUG9zaXRpb25cIiwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtwb3NpdGlvbl0pO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoIWZpcnN0UmVuZGVyLmN1cnJlbnQpIHtcclxuICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlVwZGF0ZUF4aXMocHJvcHMuSW5kZXgsIFwiTWF4XCIsIG1heCk7XHJcbiAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH0sIFttYXhdKTtcclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFmaXJzdFJlbmRlci5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVBeGlzKHByb3BzLkluZGV4LCBcIk1pblwiLCBtaW4pO1xyXG4gICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFttaW5dKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyb3cnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0yXCI+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWw+UG9zaXRpb248L2xhYmVsPlxyXG5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3Bvc2l0aW9ufSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UG9zaXRpb24oZXZ0LnRhcmdldC52YWx1ZSBhcyAoJ2xlZnQnIHwgJ3JpZ2h0JykpfT5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibGVmdFwiPkxlZnQ8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicmlnaHRcIj5SaWdodDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaVlBeGlzPiBGaWVsZD0nVW5pdHMnIFJlY29yZD17cHJvcHMuQXhpc30gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0VW5pdHMoci5Vbml0cyl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0yXCI+XHJcbiAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pWUF4aXM+IEZpZWxkPSdNaW4nIExhYmVsPSdNaW4nIFJlY29yZD17cHJvcHMuQXhpc30gVHlwZT0nbnVtYmVyJyBTZXR0ZXI9eyhyKSA9PiBzZXRNaW4oci5NaW4pfSBWYWxpZD17KGZpZWxkKSA9PiB0cnVlfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMlwiPlxyXG4gICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaVlBeGlzPiBGaWVsZD0nTWF4JyBSZWNvcmQ9e3Byb3BzLkF4aXN9IFR5cGU9J251bWJlcicgU2V0dGVyPXsocikgPT4gc2V0TWF4KHIuTWF4KX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2IH19IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LkNhbGN1bGF0ZUF4aXNSYW5nZSgneScsIHByb3BzLkluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9fT5Vc2UgRGF0YTwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTFcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1saW5rXCIgc3R5bGU9e3sgdG9wOiAzMCB9fSBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlJlbW92ZUF4aXMocHJvcHMuSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH19PntDcm9zc01hcmt9PC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn1cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFNlcmllc1BpY2tlci50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDIvMTcvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCB7IENoZWNrQm94IH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9yZWFjdC1mb3Jtcyc7XHJcblxyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9YREEgZnJvbSAnLi4vV2lkZ2V0L1hEQS9BZGRpdGlvbmFsSW5mbyc7XHJcbmltcG9ydCBBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gZnJvbSAnLi4vV2lkZ2V0L09wZW5IaXN0b3JpYW4vQWRkaXRpb25hbEluZm8nO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9TYXBwaGlyZSBmcm9tICcuLi9XaWRnZXQvU2FwcGhpcmUvQWRkaXRpb25hbEluZm8nO1xyXG5cclxuaW1wb3J0IHsgQ3Jvc3NNYXJrIH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9ncGEtc3ltYm9scyc7XHJcbmltcG9ydCB7IFRyZW5kIH0gZnJvbSAnLi8uLi9JbXBsZW1lbnRhdGlvbnMnO1xyXG5pbXBvcnQgXCJyZWFjdC1kYXRldGltZS9jc3MvcmVhY3QtZGF0ZXRpbWUuY3NzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTZXJpZXNQaWNrZXIocHJvcHM6IHsgSW5kZXg6IG51bWJlciwgVHlwZTogVHJlbkRBUC5EYXRhU291cmNlVHlwZSwgU2VyaWVzOiBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzLCBEYXRhOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSwgV2lkZ2V0OiBUcmVuZCwgQ2FsbGJhY2s6ICgpID0+IHZvaWQgfSl7XHJcbiAgICBjb25zdCBbYXhpcywgc2V0QXhpc10gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KHByb3BzLlNlcmllcy5BeGlzKTtcclxuICAgIGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPihwcm9wcy5TZXJpZXMuQ29sb3IpO1xyXG4gICAgY29uc3QgW3R5cGUsIHNldFR5cGVdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRGaWVsZD4ocHJvcHMuU2VyaWVzLkZpZWxkKTtcclxuICAgIGNvbnN0IFtzaG93RXZlbnRzLCBzZXRTaG93RXZlbnRzXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KChwcm9wcy5TZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQSk/LlNob3dFdmVudHMgPz8gZmFsc2UpO1xyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBwcm9wcy5XaWRnZXQuVXBkYXRlU2VyaWVzKHByb3BzLkluZGV4LCBcIkNvbG9yXCIsIGNvbG9yKTtcclxuICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgfSwgW2NvbG9yXSk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVTZXJpZXMocHJvcHMuSW5kZXgsIFwiRmllbGRcIiwgdHlwZSk7XHJcbiAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgIH0sIFt0eXBlXSk7XHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVTZXJpZXMocHJvcHMuSW5kZXgsIFwiU2hvd0V2ZW50c1wiLCBzaG93RXZlbnRzKTtcclxuICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgfSwgW3Nob3dFdmVudHNdKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHByb3BzLldpZGdldC5VcGRhdGVTZXJpZXMocHJvcHMuSW5kZXgsIFwiQXhpc1wiLCBheGlzKTtcclxuICAgICAgICBwcm9wcy5XaWRnZXQuQ2FsY3VsYXRlQXhpc1JhbmdlKCd5Jyk7XHJcbiAgICAgICAgcHJvcHMuV2lkZ2V0LkNhbGN1bGF0ZUF4aXNSYW5nZSgneCcpO1xyXG4gICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICB9LCBbYXhpc10pO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBTaG93QWRkaXRpb25JbmZvKCkge1xyXG4gICAgICAgIGlmIChwcm9wcy5UeXBlID09PSAnVHJlbkRBUERCJylcclxuICAgICAgICAgICAgcmV0dXJuIDxBZGRpdGlvbmFsSW5mb1hEQSBJbmRleD17cHJvcHMuSW5kZXh9IERhdGE9e3Byb3BzLkRhdGEgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSB9IC8+O1xyXG4gICAgICAgIGVsc2UgaWYgKHByb3BzLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJylcclxuICAgICAgICAgICAgcmV0dXJuIDxBZGRpdGlvbmFsSW5mb09wZW5IaXN0b3JpYW4gRGF0YT17cHJvcHMuRGF0YSBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJufSAvPjtcclxuICAgICAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09PSAnU2FwcGhpcmUnKVxyXG4gICAgICAgICAgICByZXR1cm4gPEFkZGl0aW9uYWxJbmZvU2FwcGhpcmUgSW5kZXg9e3Byb3BzLkluZGV4fSBEYXRhPXtwcm9wcy5EYXRhIGFzIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YX0gLz47XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gR2V0TmFtZSgpIHtcclxuICAgICAgICBpZiAocHJvcHMuU2VyaWVzID09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xyXG5cclxuICAgICAgICBsZXQgbmFtZTtcclxuICAgICAgICBpZiAocHJvcHMuVHlwZSA9PT0gJ09wZW5IaXN0b3JpYW4nKSB7XHJcbiAgICAgICAgICAgIGxldCBkID0gcHJvcHMuRGF0YSBhcyBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuO1xyXG4gICAgICAgICAgICByZXR1cm4gZC5Qb2ludFRhZ1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09PSAnVHJlbkRBUERCJykge1xyXG4gICAgICAgICAgICBsZXQgZCA9IHByb3BzLkRhdGEgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIGQuTmFtZVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09PSAnU2FwcGhpcmUnKSB7XHJcbiAgICAgICAgICAgIGxldCBkID0gcHJvcHMuRGF0YSBhcyBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiBkLk5hbWVcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBuYW1lID0gJyc7XHJcblxyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPntHZXROYW1lKCl9PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICB7U2hvd0FkZGl0aW9uSW5mbygpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPkZpZWxkPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXt0eXBlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0VHlwZShldnQudGFyZ2V0LnZhbHVlIGFzIFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkF2ZXJhZ2VcIj5Bdmc8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1pbmltdW1cIj5NaW48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1heGltdW1cIj5NYXg8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPllBeGlzPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtheGlzfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0QXhpcyhwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuV2lkZ2V0LkpTT04uWUF4aXMubWFwKChheGlzLCBpbmRleCkgPT4gPG9wdGlvbiB2YWx1ZT17aW5kZXh9IGtleT17aW5kZXh9PntheGlzLlVuaXRzfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5Db2xvcjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjb2xvclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtjb2xvcn0gb25DaGFuZ2U9eyhldnQpID0+IHNldENvbG9yKGV2dC50YXJnZXQudmFsdWUpfSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxpbmtcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLldpZGdldC5SZW1vdmVTZXJpZXMocHJvcHMuSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19PntDcm9zc01hcmt9PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIHsocHJvcHMuVHlwZSA9PT0gJ1RyZW5EQVBEQicgJiYgKHByb3BzLkRhdGEgYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkuRXZlbnRzLmxlbmd0aCA+IDAgP1xyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDaGVja0JveDxUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzWERBPiBSZWNvcmQ9e3Byb3BzLlNlcmllcyBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzWERBfSBGaWVsZD0nU2hvd0V2ZW50cycgTGFiZWw9J1Nob3cgRXZlbnRzJyBTZXR0ZXI9eyhyKSA9PiBzZXRTaG93RXZlbnRzKCFzaG93RXZlbnRzKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgOiBudWxsKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC8+XHJcblxyXG4gICAgKTtcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgVHJlbmQudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzEzLzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5pbXBvcnQgeyBheGlzQm90dG9tLCBheGlzTGVmdCwgYXhpc1JpZ2h0LCBicnVzaFgsIGZvcm1hdCwgbGluZSwgc2NhbGVMaW5lYXIsIHNjYWxlVXRjLCBzZWxlY3QgfSBmcm9tICdkMyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCwgUmVkdXggfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uLy4uLy4uLy4uL1N0eWxlcy9hcHAuc2Nzcyc7XHJcbmltcG9ydCB7IElucHV0LCBDaGVja0JveCwgU2VsZWN0IH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9yZWFjdC1mb3Jtcyc7XHJcblxyXG5pbXBvcnQgV2lkZ2V0LCB7IFNlcmllc1NlbGVjdCB9IGZyb20gJy4uL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgeyBDcm9zc01hcmssIFBsdXMgfSBmcm9tICdAZ3BhLWdlbXN0b25lL2dwYS1zeW1ib2xzJztcclxuaW1wb3J0IHsgVHJlbmQgfSBmcm9tICcuLy4uL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IFwicmVhY3QtZGF0ZXRpbWUvY3NzL3JlYWN0LWRhdGV0aW1lLmNzc1wiO1xyXG5pbXBvcnQgU3dpdGNoQnV0dG9uIGZyb20gJ2Jvb3RzdHJhcC1zd2l0Y2gtYnV0dG9uLXJlYWN0JztcclxuaW1wb3J0IEF4aXMgZnJvbSAnLi9BeGlzJztcclxuaW1wb3J0IFNlcmllc1BpY2tlciBmcm9tICcuL1Nlcmllc1BpY2tlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUcmVuZEpTWChwcm9wczogVHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ8VHJlbkRBUC5pVGVtcGxhdGFibGVUcmVuZD4pIHtcclxuICAgIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcclxuICAgIGNvbnN0IFt0b2dnbGUsIHNldFRvZ2dsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgICBjb25zdCBbcmVjb3JkLCBzZXRSZWNvcmRdID0gUmVhY3QudXNlU3RhdGU8VHJlbmQ+KG5ldyBUcmVuZChwcm9wcykpO1xyXG4gICAgY29uc3QgaG92ZXIgPSBSZWFjdC51c2VSZWY8bnVtYmVyPigtMTApO1xyXG4gICAgY29uc3Qgc3ZncyA9IFJlYWN0LnVzZVJlZjxkMy5TZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCx1bmtub3duLG51bGwsdW5kZWZpbmVkPltdPihbXSk7XHJcbiAgICBjb25zdCBtYXJnaW4gPSBSZWFjdC51c2VSZWY8eyBib3R0b206IG51bWJlciwgbGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciB9Pih7IGJvdHRvbTogNTAsIGxlZnQ6IDUwLCB0b3A6IDQwLCByaWdodDogNTAgfSk7XHJcbiAgICBjb25zdCBbY2hhcnRBY3Rpb24sIHNldENoYXJ0QWN0aW9uXSA9IFJlYWN0LnVzZVN0YXRlPFRyZW5EQVAuQ2hhcnRBY3Rpb24+KCdQYW4nKTtcclxuICAgIGNvbnN0IGNoYXJ0QWN0aW9uUmVmID0gUmVhY3QudXNlUmVmPFRyZW5EQVAuQ2hhcnRBY3Rpb24+KCdQYW4nKTtcclxuICAgIGNvbnN0IHNldEhvdmVyID0gUmVhY3QudXNlQ2FsbGJhY2soKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgSGFuZGxlSG92ZXJVcGRhdGUodmFsdWUpO1xyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgc2V0UmVjb3JkKG5ldyBUcmVuZChwcm9wcykpO1xyXG4gICAgICAgIH0sIFtwcm9wc10pO1xyXG5cclxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBjaGFydEFjdGlvblJlZi5jdXJyZW50ID0gY2hhcnRBY3Rpb247XHJcbiAgICAgICAgfSwgW2NoYXJ0QWN0aW9uXSk7XHJcblxyXG4gICAgICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIEluaXRpYWxpemUocmVjb3JkKVxyXG4gICAgICAgIH0sIFtyZWNvcmRdKVxyXG5cclxuICAgICAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRSZWNvcmQobmV3IFRyZW5kKHByb3BzKSlcclxuICAgICAgICB9LCBbcHJvcHMuSGVpZ2h0LCBwcm9wcy5EYXRhLCBwcm9wcy5EZXZpY2VdKVxyXG5cclxuXHJcbiAgICAgICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgc2VsZWN0KHJlZi5jdXJyZW50KS5zZWxlY3RBbGwoJ3N2ZycpLnJlbW92ZSgpOyB9XHJcbiAgICAgICAgfSwgW10pO1xyXG5cclxuXHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhleCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gR2V0RGF0YVNlcmllcyhzZXJpZXM6IFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXMpOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZSB7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHJlY29yZC5EYXRhLmZpbmQoZGQgPT4gZGQuRGF0YVNvdXJjZS5JRCA9PT0gc2VyaWVzPy5EYXRhU291cmNlSUQgPz8gMClcclxuICAgICAgICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZT8uRGF0YSA/PyBbXTtcclxuICAgICAgICBsZXQgZGF0dW07XHJcblxyXG4gICAgICAgIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJykge1xyXG4gICAgICAgICAgICBsZXQgcyA9IHNlcmllcyBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzT3Blbkhpc3RvcmlhbjtcclxuICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKSA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5TaWduYWxUeXBlID09PSBzLlR5cGUgJiYgZGQuUGhhc2UgPT09IHMuUGhhc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNYREE7XHJcbiAgICAgICAgICAgIGRhdHVtID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkgPT4gZGRbcHJvcHMuQnldID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuVHlwZSA9PT0gcy5UeXBlICYmIGRkLlBoYXNlID09PSBzLlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSBzLkNoYXJhY3RlcmlzdGljKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGF0YVNvdXJjZT8uRGF0YVNvdXJjZS5UeXBlID09PSAnU2FwcGhpcmUnKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gc2VyaWVzIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNTYXBwaGlyZTtcclxuICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpID0+IGRkLk1ldGVyID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuUGhhc2UgPT09IHMuUGhhc2UgJiYgZGQuQ2hhcmFjdGVyaXN0aWMgPT09IHMuTWVhc3VyZW1lbnQgJiYgZGQuSGFybW9uaWMgPT0gcy5IYXJtb25pYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZGF0dW0gPSB7RGF0YTogW119O1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0dW07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gR2V0RGF0YVNlcmllc0ZvckQzKHNlcmllczogVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllcykge1xyXG4gICAgICAgIHJldHVybiAoR2V0RGF0YVNlcmllcyhzZXJpZXMpPy5EYXRhID8/IFtdKS5tYXAoZCA9PiBbbmV3IERhdGUoZC5UaW1lc3RhbXApLmdldFRpbWUoKSwgZFtzZXJpZXMuRmllbGRdXSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gR2V0RGF0YVNlcmllc05hbWUoc2VyaWVzOiBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBkYXRhU2VyaWVzID0gR2V0RGF0YVNlcmllcyhzZXJpZXMpO1xyXG4gICAgICAgIGlmIChzZXJpZXMgPT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHJlY29yZC5EYXRhLmZpbmQoZGQgPT4gZGQuRGF0YVNvdXJjZS5JRCA9PT0gc2VyaWVzPy5EYXRhU291cmNlSUQgPz8gMClcclxuICAgICAgICBcclxuICAgICAgICBpZiAoZGF0YVNvdXJjZT8uRGF0YVNvdXJjZS5UeXBlID09PSAnT3Blbkhpc3RvcmlhbicpIHtcclxuICAgICAgICAgICAgbGV0IGQgPSBkYXRhU2VyaWVzIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm47XHJcbiAgICAgICAgICAgIHJldHVybiBkPy5Qb2ludFRhZyA/PyAnJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgIGxldCBkID0gZGF0YVNlcmllcyBhcyBUcmVuREFQLmlYREFSZXR1cm5EYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gZD8uTmFtZSA/PyAnJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgbGV0IGQgPSBkYXRhU2VyaWVzIGFzIFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIGQ/Lk5hbWUgPz8gJydcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gSW5pdGlhbGl6ZShzZXR0aW5nczogVHJlbmQpIHtcclxuICAgICAgICAvL2QzLnNlbGVjdChyZWYuY3VycmVudCkuc2VsZWN0QWxsKCdzdmcnKS5yZW1vdmUoKVxyXG4gICAgICAgIGxldCBzdmdDb3VudCA9IDE7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLkpTT04uU3BsaXQgJiYgc2V0dGluZ3MuSlNPTi5TcGxpdFR5cGUgPT09ICdBeGlzJykge1xyXG4gICAgICAgICAgICBtYXJnaW4uY3VycmVudCA9IHsgYm90dG9tOiA1MCwgbGVmdDogNTAsIHRvcDogNDAsIHJpZ2h0OiA1MCB9O1xyXG4gICAgICAgICAgICBzdmdDb3VudCA9IHNldHRpbmdzLkpTT04uWUF4aXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzZXR0aW5ncy5KU09OLlNwbGl0ICYmIHNldHRpbmdzLkpTT04uU3BsaXRUeXBlID09PSAnU2VyaWVzJykge1xyXG4gICAgICAgICAgICBtYXJnaW4uY3VycmVudCA9IHsgYm90dG9tOiA1MCwgbGVmdDogNTAsIHRvcDogNDAsIHJpZ2h0OiA1MCB9XHJcbiAgICAgICAgICAgIHN2Z0NvdW50ID0gc2V0dGluZ3MuSlNPTi5TZXJpZXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIG1hcmdpbi5jdXJyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgYm90dG9tOiA1MCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IChzZXR0aW5ncy5KU09OLllBeGlzLmZpbHRlcihheGlzID0+IGF4aXMuUG9zaXRpb24gPT09ICdsZWZ0JykubGVuZ3RoID09IDAgPyA1MCA6IHNldHRpbmdzLkpTT04uWUF4aXMuZmlsdGVyKGF4aXMgPT4gYXhpcy5Qb3NpdGlvbiA9PT0gJ2xlZnQnKS5sZW5ndGggKiA1MCksXHJcbiAgICAgICAgICAgICAgICB0b3A6IDQwLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IChzZXR0aW5ncy5KU09OLllBeGlzLmZpbHRlcihheGlzID0+IGF4aXMuUG9zaXRpb24gPT09ICdyaWdodCcpLmxlbmd0aCA9PSAwID8gNTAgOiBzZXR0aW5ncy5KU09OLllBeGlzLmZpbHRlcihheGlzID0+IGF4aXMuUG9zaXRpb24gPT09ICdyaWdodCcpLmxlbmd0aCAqIDUwKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5MZWdlbmQpIG1hcmdpbi5jdXJyZW50LnJpZ2h0ID0gbWFyZ2luLmN1cnJlbnQucmlnaHQgKyAyMDA7XHJcblxyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHByb3BzLkhlaWdodCAvIHN2Z0NvdW50O1xyXG5cclxuICAgICAgICBpZiAoc3Zncy5jdXJyZW50Lmxlbmd0aCAhPT0gc3ZnQ291bnQpIHtcclxuICAgICAgICAgICAgc3Zncy5jdXJyZW50ID0gW107XHJcbiAgICAgICAgICAgIHNlbGVjdChyZWYuY3VycmVudCkuc2VsZWN0QWxsKCdzdmcnKS5yZW1vdmUoKVxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN2Z0NvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN2ZyA9IHNlbGVjdChyZWYuY3VycmVudCkuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgICAgICAgc3ZnLmF0dHIoJ3dpZHRoJywgc2V0dGluZ3MuV2lkdGgpLmF0dHIoJ2hlaWdodCcsIHN2Z0hlaWdodClcclxuXHJcbiAgICAgICAgICAgICAgICBzdmdzLmN1cnJlbnQucHVzaChzdmcpO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB4ID0gR2V0WFNjYWxlKHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgc3Zncy5jdXJyZW50LmZvckVhY2goKHN2ZywgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5TcGxpdCAmJiBzZXR0aW5ncy5KU09OLlNwbGl0VHlwZSA9PT0gJ0F4aXMnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEluaXRpYWxpemVTcGxpdE9uQXhpcyhzZXR0aW5ncywgc3ZnLCB4LCBpKTtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLkpTT04uU3BsaXQgJiYgc2V0dGluZ3MuSlNPTi5TcGxpdFR5cGUgPT09ICdTZXJpZXMnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEluaXRpYWxpemVTcGxpdE9uU2VyaWVzKHNldHRpbmdzLCBzdmcsIHgsIGkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gSW5pdGlhbGl6ZU5vdFNwbGl0KHNldHRpbmdzLCBzdmcsIHgpO1xyXG4gICAgICAgIH0pOyAgICAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gSW5pdGlhbGl6ZVNwbGl0T25TZXJpZXMoc2V0dGluZ3M6IFRyZW5kLCBzdmc6IGQzLlNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+LCB4OiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+LCBpOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBzdmdIZWlnaHQgPSBwYXJzZUludChzdmcuYXR0cignaGVpZ2h0JykpO1xyXG5cclxuICAgICAgICBjb25zdCBzZXJpZXMgPSBzZXR0aW5ncy5KU09OLlNlcmllc1tpXTtcclxuICAgICAgICBjb25zdCBheGlzID0gc2V0dGluZ3MuSlNPTi5ZQXhpc1tzZXJpZXMuQXhpc107XHJcbiAgICAgICAgY29uc3QgZmllbGQgPSBzZXJpZXMuRmllbGQ7XHJcblxyXG4gICAgICAgIEFkZFhBeGlzKHN2ZywgeCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHkgPSBHZXRZU2NhbGUoc2V0dGluZ3MsIHN2Z0hlaWdodCwgc2VyaWVzLkF4aXMpO1xyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cueWF4aXMnKS5yZW1vdmUoKTtcclxuICAgICAgICBBZGRZQXhpc0xlZnQoYXhpcywgc3ZnLCB5KTtcclxuXHJcbiAgICAgICAgbGV0IGxpbmVGdW5jID0gbGluZTxudW1iZXJbXT4oKS54KGRkID0+IHgoZGRbMF0pKS55KGRkID0+IHkoZGRbMV0pKTtcclxuICAgICAgICBsZXQgZGF0YSA9IEdldERhdGFTZXJpZXNGb3JEMyhzZXJpZXMpO1xyXG5cclxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwiZy5saW5lXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cubGluZScpXHJcbiAgICAgICAgICAgIC5kYXRhKFtkYXRhXSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5jbGFzc2VkKCdsaW5lJywgdHJ1ZSlcclxuICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIikgICAgICAgICAgICBcclxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwibm9uZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAxLjUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIHNlcmllcy5Db2xvcilcclxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIChkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZUZ1bmMoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoKHNlcmllcyBhcyBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzWERBKS5TaG93RXZlbnRzKSB7XHJcbiAgICAgICAgICAgIEFkZEV2ZW50TGluZShzZXJpZXMgYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQSwgc3ZnLCB4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxlZ2VuZFwiKS5yZW1vdmUoKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5MZWdlbmQpIHtcclxuICAgICAgICAgICAgQWRkTGVnZW5kKHN2ZywgW3Nlcmllc10gYXMgVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQVtdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN2Zy5vbignbW91c2Vtb3ZlJywgKGQ6IE1vdXNlRXZlbnQpID0+IHNldEhvdmVyKGQub2Zmc2V0WCkpO1xyXG4gICAgICAgIHN2Zy5vbignbW91c2Vkb3duJywgKGQ6IE1vdXNlRXZlbnQpID0+IEhhbmRsZUNoYXJ0QWN0aW9uKGQsIHN2ZywgeCkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBJbml0aWFsaXplU3BsaXRPbkF4aXMoc2V0dGluZ3M6IFRyZW5kLCBzdmc6IGQzLlNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+LCB4OiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+LCBpOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBzdmdIZWlnaHQgPSBwYXJzZUludChzdmcuYXR0cignaGVpZ2h0JykpO1xyXG4gICAgICAgIGNvbnN0IGF4aXMgPSBzZXR0aW5ncy5KU09OLllBeGlzW2ldO1xyXG4gICAgICAgIGNvbnN0IHNlcmllcyA9IChzZXR0aW5ncy5KU09OLlNlcmllcyBhcyBhbnlbXSkuZmlsdGVyKChzKSA9PiBzLkF4aXMgPT09IGkpLm1hcCgoczogVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcmVjb3JkLkRhdGEuZmluZChkZCA9PiBkZC5EYXRhU291cmNlLklEID09PSBzPy5EYXRhU291cmNlSUQgPz8gMClcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFTb3VyY2U/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIGxldCBkYXR1bSA9IEdldERhdGFTZXJpZXMocyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4ucyxcclxuICAgICAgICAgICAgICAgIERhdGE6IChkYXR1bT8uRGF0YSA/PyBbXSkuZmlsdGVyKGRzID0+IG1vbWVudChkcy5UaW1lc3RhbXApLnRvRGF0ZSgpLmdldFRpbWUoKSA+PSBzZXR0aW5ncy5KU09OLk1pbiAmJiBtb21lbnQoZHMuVGltZXN0YW1wKS50b0RhdGUoKS5nZXRUaW1lKCkgPD0gc2V0dGluZ3MuSlNPTi5NYXggJiYgZHNbcy5GaWVsZF0gPj0gYXhpcy5NaW4gJiYgZHNbcy5GaWVsZF0gPD0gYXhpcy5NYXgpLm1hcChwb2ludCA9PiBbcG9pbnQuVGltZXN0YW1wLCBwb2ludFtzLkZpZWxkXV0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgQWRkWEF4aXMoc3ZnLCB4KTtcclxuXHJcbiAgICAgICAgY29uc3QgeSA9IEdldFlTY2FsZShzZXR0aW5ncywgc3ZnSGVpZ2h0LCBpKTtcclxuICAgICAgICBzdmcuc2VsZWN0QWxsKCdnLnlheGlzJykucmVtb3ZlKCk7XHJcbiAgICAgICAgQWRkWUF4aXNMZWZ0KGF4aXMsIHN2ZywgeSk7XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxpbmVcIikucmVtb3ZlKCk7XHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbChcImcubGluZVwiKVxyXG4gICAgICAgICAgICAuZGF0YShzZXJpZXMpXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuY2xhc3NlZCgnbGluZScsIHRydWUpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxyXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCAocykgPT4gcy5Db2xvcilcclxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIChzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGluZUZ1bmMgPSBsaW5lPG51bWJlcltdPigpLngoZGQgPT4geChkZFswXSkpLnkoZGQgPT4geShkZFsxXSkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBHZXREYXRhU2VyaWVzRm9yRDMocyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZUZ1bmMoZGF0YSk7XHJcblxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBzZXJpZXMuZm9yRWFjaChzID0+IEFkZEV2ZW50TGluZShzLHN2ZywgeCkpXHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxlZ2VuZFwiKS5yZW1vdmUoKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuSlNPTi5MZWdlbmQpIHtcclxuICAgICAgICAgICAgQWRkTGVnZW5kKHN2Zywgc2VyaWVzKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBzdmcub24oJ21vdXNlbW92ZScsIChkOiBNb3VzZUV2ZW50KSA9PiBzZXRIb3ZlcihkLm9mZnNldFgpKTtcclxuICAgICAgICBzdmcub24oJ21vdXNlZG93bicsIChkOiBNb3VzZUV2ZW50KSA9PiBIYW5kbGVDaGFydEFjdGlvbihkLCBzdmcsIHgpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBJbml0aWFsaXplTm90U3BsaXQoc2V0dGluZ3M6IFRyZW5kLCBzdmc6IGQzLlNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCB1bmtub3duLCBudWxsLCB1bmRlZmluZWQ+LCB4OiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+KSB7XHJcbiAgICAgICAgQWRkWEF4aXMoc3ZnLCB4KTtcclxuICAgICAgICBjb25zdCB5ID0gc2V0dGluZ3MuSlNPTi5ZQXhpcy5tYXAoKGF4aXMsaW5kZXgpID0+IEdldFlTY2FsZShzZXR0aW5ncywgc2V0dGluZ3MuSGVpZ2h0LCBpbmRleCkpO1xyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cueWF4aXMnKS5yZW1vdmUoKTtcclxuICAgICAgICBjb25zdCB5QXhpcyA9IHNldHRpbmdzLkpTT04uWUF4aXMubWFwKChheGlzLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgYTtcclxuICAgICAgICAgICAgaWYgKGF4aXMuUG9zaXRpb24gPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZCA9IHNldHRpbmdzLkpTT04uWUF4aXMuZmlsdGVyKGF4aXMgPT4gYXhpcy5Qb3NpdGlvbiA9PT0gJ2xlZnQnKS5maW5kSW5kZXgoYXhpcyA9PiBheGlzID09PSBzZXR0aW5ncy5KU09OLllBeGlzW2luZGV4XSk7XHJcbiAgICAgICAgICAgICAgICBBZGRZQXhpc0xlZnQoYXhpcywgc3ZnLCB5W2luZGV4XSwgZmFsc2UsIGluZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5kID0gc2V0dGluZ3MuSlNPTi5ZQXhpcy5maWx0ZXIoYXhpcyA9PiBheGlzLlBvc2l0aW9uID09PSAncmlnaHQnKS5maW5kSW5kZXgoYXhpcyA9PiBheGlzID09PSBzZXR0aW5ncy5KU09OLllBeGlzW2luZGV4XSk7XHJcbiAgICAgICAgICAgICAgICBBZGRZQXhpc1JpZ2h0KGF4aXMsIHN2ZywgeVtpbmRleF0sIGluZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBhO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbChcImcubGVnZW5kXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5KU09OLkxlZ2VuZCkge1xyXG4gICAgICAgICAgICBBZGRMZWdlbmQoc3ZnLCBzZXR0aW5ncy5KU09OLlNlcmllcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwiZy5saW5lXCIpLnJlbW92ZSgpO1xyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoXCJnLmxpbmVcIilcclxuICAgICAgICAgICAgLmRhdGEoc2V0dGluZ3MuSlNPTi5TZXJpZXMpXHJcbiAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgICAgICAgIC5jbGFzc2VkKFwibGluZVwiLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcclxuICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgKGQ6IFRyZW5EQVAuaVRyZW5kU2VyaWVzKSA9PiBkLkNvbG9yKVxyXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgKGQ6IFRyZW5EQVAuaVRyZW5kU2VyaWVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeVNjYWxlID0geVtkLkF4aXNdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmVGdW5jID0gbGluZTxudW1iZXJbXT4oKS54KGRkID0+IHgoZGRbMF0pKS55KGRkID0+IHlTY2FsZShkZFsxXSkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBHZXREYXRhU2VyaWVzRm9yRDMoZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZUZ1bmMoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIHN2Zy5vbignbW91c2Vtb3ZlJywgKGQ6IE1vdXNlRXZlbnQpID0+IHNldEhvdmVyKGQub2Zmc2V0WCkpXHJcbiAgICAgICAgc3ZnLm9uKCdtb3VzZWRvd24nLCAoZDogTW91c2VFdmVudCkgPT4gSGFuZGxlQ2hhcnRBY3Rpb24oZCwgc3ZnLCB4KSlcclxuXHJcbiAgICAgICAgc2V0dGluZ3MuSlNPTi5TZXJpZXMuZmlsdGVyKChzZXJpZXM6VHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllc1hEQSkgPT4gc2VyaWVzLlNob3dFdmVudHMpLmZvckVhY2goc2VyaWVzID0+IEFkZEV2ZW50TGluZShzZXJpZXMsIHN2ZywgeCkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBBZGRMZWdlbmQoc3ZnOiBkMy5TZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgdW5rbm93biwgbnVsbCwgdW5kZWZpbmVkPiwgc2VyaWVzOiBUcmVuREFQLmlUcmVuZFRlbXBsYXRlU2VyaWVzW10pIHtcclxuICAgICAgICBjb25zdCBzdmdIZWlnaHQgPSBwYXJzZUludChzdmcuYXR0cignaGVpZ2h0JykpO1xyXG4gICAgICAgIGNvbnN0IHN2Z1dpZHRoID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xyXG5cclxuICAgICAgICBjb25zdCBsZWdlbmQgPSBzdmcuc2VsZWN0QWxsKCdnLmxlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5kYXRhKFtzZXJpZXNdKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7c3ZnV2lkdGggLSAyMDB9LCR7bWFyZ2luLmN1cnJlbnQudG9wfSlgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGVnZW5kUm93cyA9IGxlZ2VuZC5zZWxlY3RBbGwoJ2cubGVnZW5kUm93JylcclxuICAgICAgICAgICAgLmRhdGEoZCA9PiBkIGFzIFRyZW5EQVAuaVRyZW5kVGVtcGxhdGVTZXJpZXNbXSlcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmRyb3cnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQsIGkpID0+IGB0cmFuc2xhdGUoMTAsJHtpICogMzB9KWApO1xyXG5cclxuICAgICAgICBsZWdlbmRSb3dzLmFwcGVuZCgncmVjdCcpLmF0dHIoJ2hlaWdodCcsIDIwKS5hdHRyKCd3aWR0aCcsIDIwKS5hdHRyKCdmaWxsJywgZCA9PiBkLkNvbG9yKVxyXG4gICAgICAgIGxlZ2VuZFJvd3MuYXBwZW5kKCd0ZXh0JykuYXR0cigneCcsIDMwKS5hdHRyKCd5JywgMTUpXHJcbiAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gR2V0RGF0YVNlcmllc05hbWUocyk7XHJcblxyXG5cclxuICAgICAgICAgICAgICBpZiAobmFtZS5sZW5ndGggPiAxNSlcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUuc2xpY2UoMCwgMTUpICsgJy4uLic7XHJcbiAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIGxlZ2VuZFJvd3MuYXBwZW5kKCd0aXRsZScpLnRleHQoZCA9PiBkLkxhYmVsKVxyXG4gICAgfVxyXG4gICAgICAgIFxyXG4gICAgZnVuY3Rpb24gQWRkRXZlbnRMaW5lKHNlcmllczogVHJlbkRBUC5pVHJlbmRUZW1wbGF0ZVNlcmllcywgc3ZnLCB4KSB7XHJcbiAgICAgICAgY29uc3Qgc3ZnSGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSByZWNvcmQuRGF0YS5maW5kKGRkID0+IGRkLkRhdGFTb3VyY2UuSUQgPT09IHNlcmllcz8uRGF0YVNvdXJjZUlEID8/IDApXHJcbiAgICAgICAgaWYgKGRhdGFTb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFTb3VyY2U/LkRhdGEgPz8gW107XHJcbiAgICAgICAgbGV0IGRhdHVtID0gR2V0RGF0YVNlcmllcyhzZXJpZXMpO1xyXG4gICAgICAgIGxldCBkID0gKGRhdHVtIGFzIFRyZW5EQVAuaVhEQVJldHVybkRhdGEpPy5FdmVudHMgPz8gW107XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cuZXZlbnQtbGluZScpLnJlbW92ZSgpO1xyXG4gICAgICAgIGNvbnN0IGcgPSBzdmcuc2VsZWN0QWxsKCdnLmV2ZW50LWxpbmUnKVxyXG4gICAgICAgICAgICAuZGF0YShkKVxyXG4gICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmNsYXNzZWQoJ2V2ZW50LWxpbmUnLCB0cnVlKVxyXG4gICAgICAgIGcuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsICcycHgnKVxyXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgZCA9PiBgTTAsJHtzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLSBtYXJnaW4uY3VycmVudC50b3B9TC0xMCwke3N2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSAtIG1hcmdpbi5jdXJyZW50LnRvcCArIDEwfSxMMTAsJHtzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLSBtYXJnaW4uY3VycmVudC50b3AgKyAxMH1MMCwke3N2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSAtIG1hcmdpbi5jdXJyZW50LnRvcH1aYClcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZCA9PiBgdHJhbnNsYXRlKCR7eChtb21lbnQoZC5TdGFydFRpbWUsICdZWVlZLU1NLUREVEhIOm1tOnNzLmZmZicpKX0sJHttYXJnaW4uY3VycmVudC50b3B9KWApXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAncmVkJylcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAncmVkJylcclxuICAgICAgICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCAoZSwgZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4ocmVjb3JkLkRhdGEuZmluZChkcyA9PiBkcy5EYXRhU291cmNlLklEID09PSBzZXJpZXMuRGF0YVNvdXJjZUlEKS5EYXRhU291cmNlLk9wZW5TRUUgKyAnP2V2ZW50SUQ9JyArIGQuSUQpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gQWRkWEF4aXMoc3ZnLCB4KSB7XHJcbiAgICAgICAgY29uc3Qgc3ZnV2lkdGggPSBwYXJzZUludChzdmcuYXR0cignd2lkdGgnKSk7XHJcbiAgICAgICAgY29uc3Qgc3ZnSGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy54YXhpcycpLnJlbW92ZSgpO1xyXG4gICAgICAgIGNvbnN0IHhBeGlzID0gc3ZnLmFwcGVuZChcImdcIikuY2xhc3NlZCgneGF4aXMnLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgKHN2Z0hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSkgKyBcIilcIilcclxuICAgICAgICAgICAgLmNhbGwoYXhpc0JvdHRvbSh4KSlcclxuXHJcbiAgICAgICAgc3ZnLmFwcGVuZChcImdcIikuY2xhc3NlZCgneGF4aXMnLCB0cnVlKS5hcHBlbmQoXCJ0ZXh0XCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHN2Z1dpZHRoIC8gMikgKyBcIixcIiArIChzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLyAzKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAudGV4dChcIlRpbWVcIilcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gQWRkWUF4aXNMZWZ0KGF4aXM6IFRyZW5EQVAuaVlBeGlzLCBzdmcsIHksIHJvdGF0ZTogYm9vbGVhbiA9IHRydWUsIGluZGV4OiBudW1iZXIgPSAwKSB7XHJcbiAgICAgICAgY29uc3Qgc3ZnV2lkdGggPSBwYXJzZUludChzdmcuYXR0cignd2lkdGgnKSk7XHJcbiAgICAgICAgY29uc3Qgc3ZnSGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgY29uc3QgeUF4aXMgPSBzdmcuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKCd5YXhpcycsIHRydWUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKG1hcmdpbi5jdXJyZW50LmxlZnQgLSBpbmRleCAqIDUwKSArIFwiLDApXCIpXHJcbiAgICAgICAgICAgIC5jYWxsKGF4aXNMZWZ0KHkpLnRpY2tzKE1hdGguZmxvb3Ioc3ZnSGVpZ2h0IC8gNTApICsgMSkudGlja0Zvcm1hdCgodmFsdWU6IG51bWJlcikgPT4gZm9ybWF0KFwifnNcIikodmFsdWUpKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHQgPSBzdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgICAgICAuY2xhc3NlZCgneWF4aXMnLCB0cnVlKVxyXG4gICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKSAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC50ZXh0KGF4aXMuVW5pdHMpO1xyXG4gICAgICAgIGlmIChyb3RhdGUpXHJcbiAgICAgICAgICAgIHRleHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApIHRyYW5zbGF0ZSgtXCIgKyBzdmdIZWlnaHQgLyAyICsgXCIsXCIgKyAoKG1hcmdpbi5jdXJyZW50LmxlZnQgLSBpbmRleCAqIDUwKSAvIDMpICsgXCIpXCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIik7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAobWFyZ2luLmN1cnJlbnQubGVmdCAtIGluZGV4ICogNTApICsgXCIsXCIgKyAoc3ZnSGVpZ2h0IC0gbWFyZ2luLmN1cnJlbnQuYm90dG9tIC8gMikgKyBcIilcIikuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBBZGRZQXhpc1JpZ2h0KGF4aXM6IFRyZW5EQVAuaVlBeGlzLCBzdmcsIHksIGluZGV4OiBudW1iZXIgPSAwKSB7XHJcbiAgICAgICAgY29uc3Qgc3ZnV2lkdGggPSBwYXJzZUludChzdmcuYXR0cignd2lkdGgnKSk7XHJcbiAgICAgICAgY29uc3Qgc3ZnSGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgY29uc3QgeUF4aXMgPSBzdmcuYXBwZW5kKFwiZ1wiKS5jbGFzc2VkKCd5YXhpcycsIHRydWUpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHN2Z1dpZHRoIC0gbWFyZ2luLmN1cnJlbnQucmlnaHQgKyBpbmRleCAqIDUwKSArIFwiLDApXCIpXHJcbiAgICAgICAgICAgIC5jYWxsKGF4aXNSaWdodCh5KS50aWNrcyhNYXRoLmZsb29yKHN2Z0hlaWdodCAvIDUwKSArIDEpLnRpY2tGb3JtYXQoKHZhbHVlOiBudW1iZXIpID0+IGZvcm1hdChcIn5zXCIpKHZhbHVlKSkpO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0ID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmNsYXNzZWQoJ3lheGlzJywgdHJ1ZSlcclxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcclxuICAgICAgICAgICAgLnRleHQoYXhpcy5Vbml0cyk7XHJcbiAgICAgICAgICAgIHRleHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzdmdXaWR0aCAtIG1hcmdpbi5jdXJyZW50LnJpZ2h0ICsgaW5kZXggKiA1MCkgKyBcIixcIiArIChzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20gLyAyKSArIFwiKVwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gR2V0WFNjYWxlKHNldHRpbmdzOiBUcmVuZCkge1xyXG4gICAgICAgIGxldCBkID0gc2V0dGluZ3MuSlNPTi5TZXJpZXMubWFwKHMgPT4gR2V0RGF0YVNlcmllc0ZvckQzKHMpKVxyXG4gICAgICAgIGxldCBkZCA9IFtdLmNvbmNhdCguLi5kKVxyXG4gICAgICAgIGxldCBkZHggPSBkZC5tYXAoZHAgPT4gbmV3IERhdGUoZHAuVGltZXN0YW1wKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgIGxldCB4TWF4ID0gTWF0aC5tYXgoLi4uZGQubWFwKGRwID0+IGRwWzBdKSk7XHJcbiAgICAgICAgbGV0IHhNaW4gPSBNYXRoLm1pbiguLi5kZC5tYXAoZHAgPT4gZHBbMF0pKTtcclxuICAgICAgICByZXR1cm4gc2NhbGVVdGMoKVxyXG4gICAgICAgICAgICAuZG9tYWluKFt4TWluLCB4TWF4XSkgICAgIC8vIGNhbiB1c2UgdGhpcyBpbnN0ZWFkIG9mIDEwMDAgdG8gaGF2ZSB0aGUgbWF4IG9mIGRhdGE6IGQzLm1heChkYXRhLCBmdW5jdGlvbihkKSB7IHJldHVybiArZC5wcmljZSB9KVxyXG4gICAgICAgICAgICAucmFuZ2UoW21hcmdpbi5jdXJyZW50LmxlZnQsIHNldHRpbmdzLldpZHRoIC0gbWFyZ2luLmN1cnJlbnQucmlnaHRdKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBHZXRZU2NhbGUoc2V0dGluZ3M6IFRyZW5kLHN2Z0hlaWdodDogbnVtYmVyLCBheGlzOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZCA9IHNldHRpbmdzLkpTT04uU2VyaWVzLmZpbHRlcihzID0+IHMuQXhpcyA9PT0gYXhpcykubWFwKHMgPT4gR2V0RGF0YVNlcmllc0ZvckQzKHMpKVxyXG4gICAgICAgIGxldCBkZCA9IFtdLmNvbmNhdCguLi5kKVxyXG4gICAgICAgIGxldCB5TWF4ID0gTWF0aC5tYXgoLi4uZGQubWFwKGRwID0+IGRwWzFdKSk7XHJcbiAgICAgICAgbGV0IHlNaW4gPSBNYXRoLm1pbiguLi5kZC5tYXAoZHAgPT4gZHBbMV0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHNjYWxlTGluZWFyKClcclxuICAgICAgICAgICAgLnJhbmdlKFtzdmdIZWlnaHQgLSBtYXJnaW4uY3VycmVudC5ib3R0b20sIG1hcmdpbi5jdXJyZW50LnRvcF0pXHJcbiAgICAgICAgICAgIC5kb21haW4oW3lNaW4sIHlNYXhdKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEhhbmRsZUhvdmVyVXBkYXRlKGhvdmVyOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoY2hhcnRBY3Rpb25SZWYuY3VycmVudCAhPT0gJ0NsaWNrJykgcmV0dXJuO1xyXG4gICAgICAgIHN2Z3MuY3VycmVudC5mb3JFYWNoKChzdmcsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KHN2Zy5hdHRyKCdoZWlnaHQnKSkgLSBtYXJnaW4uY3VycmVudC50b3AgLSBtYXJnaW4uY3VycmVudC5ib3R0b207XHJcblxyXG4gICAgICAgICAgICBpZiAoaG92ZXIgPj0gbWFyZ2luLmN1cnJlbnQubGVmdCAmJiBob3ZlciA8PSAocHJvcHMuV2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodCkpIHtcclxuICAgICAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJ2cubW91c2Utb3ZlcicpLnJlbW92ZSgpXHJcbiAgICAgICAgICAgICAgICBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCgnbW91c2Utb3ZlcicsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgncGF0aCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQgPT4gYE0gMCAwIFYgJHtoZWlnaHR9YClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7aG92ZXJ9LCR7bWFyZ2luLmN1cnJlbnQudG9wfSlgKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnZ3JheScpXHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEhhbmRsZVJlc2V0KCkge1xyXG4gICAgICAgIHNldFJlY29yZChyZWNvcmQuQ2FsY3VsYXRlQXhpc1JhbmdlKCd4JykpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEhhbmRsZUNoYXJ0QWN0aW9uKGV2dDogTW91c2VFdmVudCwgc3ZnOiBkMy5TZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgdW5rbm93biwgbnVsbCwgdW5kZWZpbmVkPiwgc2NhbGU6IGQzLlNjYWxlVGltZTxudW1iZXIsIG51bWJlcj4pIHtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUludChzdmcuYXR0cignaGVpZ2h0JykpO1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xyXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGlmIChldnQub2Zmc2V0WCA8IG1hcmdpbi5jdXJyZW50LmxlZnQgfHwgZXZ0Lm9mZnNldFggPiB3aWR0aCAtIG1hcmdpbi5jdXJyZW50LnJpZ2h0KSByZXR1cm47XHJcbiAgICAgICAgZWxzZSBpZiAoZXZ0Lm9mZnNldFkgPCBtYXJnaW4uY3VycmVudC50b3AgfHwgZXZ0Lm9mZnNldFkgPmhlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSkgcmV0dXJuO1xyXG4gICAgICAgIGVsc2UgaWYgKGNoYXJ0QWN0aW9uUmVmLmN1cnJlbnQgPT0gJ0NsaWNrJylcclxuICAgICAgICAgICAgT25DbGljayhldnQsIHN2Zywgc2NhbGUpO1xyXG4gICAgICAgIGVsc2UgaWYgKGNoYXJ0QWN0aW9uUmVmLmN1cnJlbnQgPT0gJ1BhbicpXHJcbiAgICAgICAgICAgIE9uUGFuKGV2dCwgc3ZnLCBzY2FsZSlcclxuICAgICAgICBlbHNlIGlmIChjaGFydEFjdGlvblJlZi5jdXJyZW50ID09ICdab29tWCcpXHJcbiAgICAgICAgICAgIE9uWFpvb20oZXZ0LCBzdmcsIHNjYWxlKVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gT25DbGljayhldnQ6IE1vdXNlRXZlbnQsIHN2ZzogZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD4sIHNjYWxlOiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKTtcclxuICAgICAgICBjb25zdCB0b29sdGlwSGVpZ2h0ID0gcmVjb3JkLkpTT04uU2VyaWVzLmxlbmd0aCAqIDE1O1xyXG4gICAgICAgIGlmIChldnQub2Zmc2V0WCA8IG1hcmdpbi5jdXJyZW50LmxlZnQgJiYgZXZ0Lm9mZnNldFggPiAocHJvcHMuV2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy5tb3VzZS1vdmVyMicpLnJlbW92ZSgpXHJcbiAgICAgICAgc3ZnLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5jbGFzc2VkKCdtb3VzZS1vdmVyMicsIHRydWUpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAuYXR0cihcImRcIiwgZCA9PiBgTSAwIDAgViAke2hlaWdodCAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSAtIG1hcmdpbi5jdXJyZW50LnRvcH1gKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7ZXZ0Lm9mZnNldFh9LCR7bWFyZ2luLmN1cnJlbnQudG9wfSlgKVxyXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2dyZXknKVxyXG5cclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnZy5jaGFydHRvb2x0aXAnKS5yZW1vdmUoKTtcclxuICAgICAgICBjb25zdCB0b29sdGlwID0gc3ZnLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdjaGFydHRvb2x0aXAnKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7ZXZ0Lm9mZnNldFggKyAxNX0sJHtldnQub2Zmc2V0WSAtIHRvb2x0aXBIZWlnaHQvMn0pYCk7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IHRvb2x0aXAuYXBwZW5kKCdyZWN0JylcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnZ2FpbnNib3JvJylcclxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHJlY29yZC5KU09OLlNlcmllcy5sZW5ndGggKyAnZW0nKVxyXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCAyMDApXHJcbiAgICAgICAgICAgIC5hdHRyKCd4JywgMClcclxuICAgICAgICAgICAgLmF0dHIoJ3knLDApXHJcbiAgICAgICAgY29uc3QgdGV4dCA9IHRvb2x0aXAuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxyXG4gICAgICAgICAgICAuYXR0cigneScsIDApXHJcblxyXG4gICAgICAgIGxldCB3aWR0aCA9IDIwMDtcclxuICAgICAgICByZWNvcmQuSlNPTi5TZXJpZXMuZm9yRWFjaCgoc2VyaWVzLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICB0b29sdGlwLmFwcGVuZCgncmVjdCcpLmF0dHIoJ3gnLCA1KS5hdHRyKCd5JywgYCR7aW5kZXh9ZW1gKS5hdHRyKCdoZWlnaHQnLCAnMWVtJykuYXR0cignd2lkdGgnLCAnMWVtJykuYXR0cignZmlsbCcsIHNlcmllcy5Db2xvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSByZWNvcmQuRGF0YS5maW5kKGRkID0+IGRkLkRhdGFTb3VyY2UuSUQgPT09IHNlcmllcz8uRGF0YVNvdXJjZUlEID8/IDApXHJcbiAgICAgICAgICAgIGxldCBkcyA9IEdldERhdGFTZXJpZXMoc2VyaWVzKTtcclxuICAgICAgICAgICAgbGV0IGRhdHVtID0gZHM/LkRhdGEgPz8gW107XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmbG9vciA9IE1hdGguZmxvb3IoZGF0dW0ubGVuZ3RoICogZXZ0Lm9mZnNldFggLyBwcm9wcy5XaWR0aCAqIC45NSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNlaWwgPSBNYXRoLmNlaWwoZGF0dW0ubGVuZ3RoICogZXZ0Lm9mZnNldFggLyBwcm9wcy5XaWR0aCAqIDEuMDUpO1xyXG4gICAgICAgICAgICBjb25zdCBzaG9ydGVuZWREYXRhID0gZGF0dW0uc2xpY2UoZmxvb3IsIGNlaWwpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXN0ID0gc2hvcnRlbmVkRGF0YS5tYXAoZCA9PiAoeyBWYWx1ZTogZFtzZXJpZXMuRmllbGRdLCBEaXN0YW5jZTogTWF0aC5hYnMoZXZ0Lm9mZnNldFggLSBzY2FsZShtb21lbnQoZC5UaW1lc3RhbXAsICdZWVlZLU1NLUREVEhIOm1tOnNzLmZmZlonKS50b0RhdGUoKS5nZXRUaW1lKCkpKSB9KSk7XHJcbiAgICAgICAgICAgIGRpc3Quc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGEuRGlzdGFuY2UgPiBiLkRpc3RhbmNlKSByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGEuRGlzdGFuY2UgPT0gYi5EaXN0YW5jZSkgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHJldHVybiAtMTtcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdGVkID0gZm9ybWF0KCcuMmYnKShkaXN0WzBdLlZhbHVlKTtcclxuICAgICAgICAgICAgdGV4dC5hcHBlbmQoJ3RzcGFuJykudGV4dChzZXJpZXMuTGFiZWwgKyAnIC0gJyArIGZvcm1hdGVkKS5hdHRyKCd4JywgJzEuNWVtJykuYXR0cigneScsIGAke2luZGV4KzF9ZW1gKTtcclxuICAgICAgICAgICAgd2lkdGggPSB0ZXh0Lm5vZGUoKS5nZXRCQm94KCkud2lkdGggKyAyNSA+IHdpZHRoID8gdGV4dC5ub2RlKCkuZ2V0QkJveCgpLndpZHRoICsgMjUgIDogd2lkdGg7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVjdC5hdHRyKCd3aWR0aCcsIHdpZHRoKTtcclxuICAgICAgICBpZiAod2lkdGggPiBwcm9wcy5XaWR0aCAtIG1hcmdpbi5jdXJyZW50LnJpZ2h0IC0gZXZ0Lm9mZnNldFgpXHJcbiAgICAgICAgICAgIHRvb2x0aXAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7ZXZ0Lm9mZnNldFggLSAxNSAtIHdpZHRofSwke2V2dC5vZmZzZXRZIC0gdG9vbHRpcEhlaWdodCAvIDJ9KWApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIE9uUGFuKGV2dDogTW91c2VFdmVudCwgc3ZnOiBkMy5TZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgdW5rbm93biwgbnVsbCwgdW5kZWZpbmVkPiwgc2NhbGU6IGQzLlNjYWxlVGltZTxudW1iZXIsIG51bWJlcj4pIHtcclxuICAgICAgICBjb25zdCBzdGFydCA9IGV2dC5jbGllbnRYO1xyXG4gICAgICAgIHN2Zy5vbignbW91c2Vtb3ZlLnBhbicsIChlOiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHJlY29yZC5VcGRhdGVKU09OKCdNaW4nLCBzY2FsZS5pbnZlcnQoc2NhbGUucmFuZ2UoKVswXSArIHN0YXJ0IC0gZS5jbGllbnRYKS5nZXRUaW1lKCkpXHJcbiAgICAgICAgICAgIHNldFJlY29yZChuZXcgVHJlbmQocmVjb3JkLlVwZGF0ZUpTT04oJ01heCcsIHNjYWxlLmludmVydChzY2FsZS5yYW5nZSgpWzFdICsgc3RhcnQgLSBlLmNsaWVudFgpLmdldFRpbWUoKSkpKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN2Zy5vbignbW91c2V1cC5wYW4nLCAoKSA9PiBzdmcub24oJ21vdXNlbW92ZS5wYW4nLCBudWxsKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gT25YWm9vbShldnQ6IE1vdXNlRXZlbnQsIHN2ZzogZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIG51bGwsIHVuZGVmaW5lZD4sIHNjYWxlOiBkMy5TY2FsZVRpbWU8bnVtYmVyLCBudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBldnQub2Zmc2V0WDtcclxuICAgICAgICBjb25zdCBicnVzaCA9IGJydXNoWCgpXHJcbiAgICAgICAgICAgIC5leHRlbnQoW1ttYXJnaW4uY3VycmVudC5sZWZ0LCBtYXJnaW4uY3VycmVudC50b3AgKyAwLjVdLCBbcHJvcHMuV2lkdGggLSBtYXJnaW4uY3VycmVudC5yaWdodCwgcGFyc2VJbnQoc3ZnLmF0dHIoJ2hlaWdodCcpKSAtIG1hcmdpbi5jdXJyZW50LmJvdHRvbSArIDAuNV1dKVxyXG4gICAgICAgIGNvbnN0IGJyID0gc3ZnLmFwcGVuZCgnZycpLmNhbGwoYnJ1c2gpXHJcbiAgICAgICAgYnIuY2FsbChicnVzaC5tb3ZlLCBbc3RhcnQsIHN0YXJ0ICsgMV0pO1xyXG4gICAgICAgIHN2Zy5vbignbW91c2Vtb3ZlLmJydXNoJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgYnIuY2FsbChicnVzaC5tb3ZlLCBbc3RhcnQsIGUub2Zmc2V0WF0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgc3ZnLm9uKCdtb3VzZXVwLmJydXNoJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnQsIGUub2Zmc2V0WCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0LCBlLm9mZnNldFgpO1xyXG4gICAgICAgICAgICByZWNvcmQuVXBkYXRlSlNPTignTWluJywgc2NhbGUuaW52ZXJ0KG1pbikuZ2V0VGltZSgpKVxyXG4gICAgICAgICAgICBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZC5VcGRhdGVKU09OKCdNYXgnLCBzY2FsZS5pbnZlcnQobWF4KS5nZXRUaW1lKCkpKSlcclxuXHJcbiAgICAgICAgICAgIGJyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBzdmcub24oJ21vdXNlbW92ZS5icnVzaCcsIG51bGwpO1xyXG4gICAgICAgICAgICBzdmcub24oJ21vdXNldXAuYnJ1c2gnLCBudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIHN0eWxlPXt7IHdpZHRoOiBwcm9wcy5XaWR0aCwgaGVpZ2h0OiBwcm9wcy5IZWlnaHQgfX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCIgc3R5bGU9e3sgcGFkZGluZzogMCB9fT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJ3aWRnaXQtbGFiZWxcIl19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPntwcm9wcy5MYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYnRuIFwiICsgc3R5bGVzW1wid2lkZ2l0LWNvbnRyb2xzXCJdfSB0aXRsZT0nV2lkZ2V0IFNldHRpbmdzJyBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUodHJ1ZSl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvZ1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgcmVmPXtyZWZ9IHN0eWxlPXt7IHVzZXJTZWxlY3Q6ICdub25lJyB9fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBsZWZ0OiAxMCwgekluZGV4OiAxMDEwIH19PnsvKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1saWdodCcgb25DbGljaz17SGFuZGxlUmVzZXR9PlJlc2V0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5wdXRcIiBjaGVja2VkPXtjaGFydEFjdGlvbiA9PSAnUGFuJ30gb25DaGFuZ2U9eyhldnQpID0+IHNldENoYXJ0QWN0aW9uKCdQYW4nKX0gLz5QYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlubGluZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tY2hlY2stbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbnB1dFwiIGNoZWNrZWQ9e2NoYXJ0QWN0aW9uID09ICdab29tWCd9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDaGFydEFjdGlvbignWm9vbVgnKX0gLz5ab29tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5wdXRcIiBjaGVja2VkPXtjaGFydEFjdGlvbiA9PSAnQ2xpY2snfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0Q2hhcnRBY3Rpb24oJ0NsaWNrJyl9IC8+Q2xpY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKi99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1pbmxpbmVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tY2hlY2stbGFiZWxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlucHV0XCIgY2hlY2tlZD17Y2hhcnRBY3Rpb24gPT0gJ1pvb21ZJ30gb25DaGFuZ2U9eyhldnQpID0+IHNldENoYXJ0QWN0aW9uKCdab29tWScpfSAvPlpvb20gWVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmb3JtLWNoZWNrLWlubGluZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNsYXNzTmFtZT1cImZvcm0tY2hlY2staW5wdXRcIiBjaGVja2VkPXtjaGFydEFjdGlvbiA9PSAnWm9vbVhZJ30gb25DaGFuZ2U9eyhldnQpID0+IHNldENoYXJ0QWN0aW9uKCdab29tWFknKX0gLz5ab29tIFggJiBZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICovfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxXaWRnZXQgey4uLnByb3BzfSBSZWNvcmQ9e3JlY29yZH0gVG9nZ2xlPXt0b2dnbGV9IFNldFRvZ2dsZT17KGJvb2wpID0+IHNldFRvZ2dsZShib29sKX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldD4gRmllbGQ9J0xhYmVsJyBSZWNvcmQ9e3JlY29yZH0gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBUcmVuZChyKSl9IFZhbGlkPXsoZmllbGQpID0+IHRydWV9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbD5XaWR0aDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtyZWNvcmQ/LldpZHRofSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UmVjb3JkKG5ldyBUcmVuZCh7IC4uLnJlY29yZCxXaWR0aDogcGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSl9KSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eyhldnQpID0+IHNldFJlY29yZChuZXcgVHJlbmQoeyAuLi5yZWNvcmQsIFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCAtIDIwMH0pKSB9PkZ1bGwgV2lkdGg8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtMSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+U3BsaXQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2hCdXR0b24gY2hlY2tlZD17cmVjb3JkPy5KU09OPy5TcGxpdCA/PyBmYWxzZX0gb25DaGFuZ2U9eyhjaGVja2VkOiBib29sZWFuKSA9PiBzZXRSZWNvcmQocmVjb3JkLlVwZGF0ZUpTT04oJ1NwbGl0JywgY2hlY2tlZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC0yJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3Q8VHJlbkRBUC5pVGVtcGxhdGFibGVUcmVuZD4gTGFiZWw9J1NwbGl0IE9uJyBGaWVsZD0nU3BsaXRUeXBlJyBSZWNvcmQ9e3JlY29yZD8uSlNPTn0gU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBUcmVuZCh7IC4uLnJlY29yZCwgSlNPTjogciB9KSl9IE9wdGlvbnM9e1t7IFZhbHVlOiAnQXhpcycsIExhYmVsOiAnQXhpcycgfSwgeyBWYWx1ZTogJ1NlcmllcycsIExhYmVsOiAnU2VyaWVzJyB9XX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtMic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TGVnZW5kPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaEJ1dHRvbiBjaGVja2VkPXtyZWNvcmQuSlNPTj8uTGVnZW5kID8/IGZhbHNlfSBvbkNoYW5nZT17KGNoZWNrZWQ6IGJvb2xlYW4pID0+IHNldFJlY29yZChyZWNvcmQuVXBkYXRlSlNPTignTGVnZW5kJywgY2hlY2tlZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ey8qXHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlggQXhpczwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1pbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgdmFsdWU9e21vbWVudChyZWNvcmQuSlNPTi5NaW4pfSBvbkNoYW5nZT17KHZhbHVlKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHsgLi4ucmVjb3JkLCBKU09OOiB7IC4uLnJlY29yZC5KU09OLE1pbjogbW9tZW50KHZhbHVlKS50b0RhdGUoKS5nZXRUaW1lKCl9fSkpfS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1pbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgdmFsdWU9e21vbWVudChyZWNvcmQuSlNPTi5NYXgpfSBvbkNoYW5nZT17KHZhbHVlKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHsgLi4ucmVjb3JkLCBKU09OOiB7IC4uLnJlY29yZC5KU09OLCBNYXg6IG1vbWVudCh2YWx1ZSkudG9EYXRlKCkuZ2V0VGltZSgpIH19KSl9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTJcIiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCBib3R0b206IDE2IH19IHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLkNhbGN1bGF0ZUF4aXNSYW5nZSgneCcsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlY29yZChuZXcgVHJlbmQocmVjb3JkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5Vc2UgRGF0YTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+Ki99XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlkgQXhpczwvaDY+IDxidXR0b24gc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgZmxvYXQ6ICdyaWdodCcsIHRvcDogLTMwfX0gY2xhc3NOYW1lPSdidG4gYnRuLWxpbmsnIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkLkFkZEF4aXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19PntQbHVzfTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJsaXN0LWdyb3VwIGxpc3QtZ3JvdXAtZmx1c2hcIiBzdHlsZT17e21heEhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gNjI1LCBvdmVyZmxvd1k6ICdhdXRvJywgb3ZlcmZsb3dYOiAnaGlkZGVuJywgd2lkdGg6ICcxMDAlJyB9fT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNvcmQuSlNPTi5ZQXhpcy5tYXAoKGF4aXMsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPSdsaXN0LWdyb3VwLWl0ZW0nPjxBeGlzIEF4aXM9e2F4aXN9IEluZGV4PXtpbmRleH0gV2lkZ2V0PXtyZWNvcmR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpIH0vPjwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg2PlNlcmllczwvaDY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImFjY29yZGlvblwiIHN0eWxlPXt7IG92ZXJmbG93WTogJ2F1dG8nLCBtYXhIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAtIDI1MH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVjb3JkLkRhdGEubWFwKChkLCBpKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJjYXJkLWxpbmtcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCIgaHJlZj17XCIjY29sbGFwc2VcIiArIGl9PntkLkRhdGFTb3VyY2UuTmFtZX08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD17XCJjb2xsYXBzZVwiICsgaX0gY2xhc3NOYW1lPVwiY29sbGFwc2Ugc2hvd1wiIGRhdGEtcGFyZW50PVwiI2FjY29yZGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhkLkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLlF1aWNrQWRkVm9sdGFnZVJNUyhkLkRhdGFTb3VyY2UuSUQpKX0+UXVpY2sgQWRkIFZSTVM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLlF1aWNrQWRkQ3VycmVudFJNUyhkLkRhdGFTb3VyY2UuSUQpKX0+UXVpY2sgQWRkIElSTVM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1wcmltYXJ5JyBvbkNsaWNrPXsoKSA9PiBzZXRSZWNvcmQocmVjb3JkLlJlbW92ZUFsbChkLkRhdGFTb3VyY2UuSUQpKX0+UmVtb3ZlIEFsbDwvYnV0dG9uPiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPjogbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcmllc1NlbGVjdCBXaWRnZXQ9e3JlY29yZH0gRGF0YVNvdXJjZUlEPXtkLkRhdGFTb3VyY2UuSUR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImxpc3QtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KHJlY29yZC5KU09OLlNlcmllcykubWFwKChzZXJpZXMsIGluZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcmVjb3JkLkRhdGEuZmluZChkZCA9PiBkZC5EYXRhU291cmNlLklEID09PSBzZXJpZXM/LkRhdGFTb3VyY2VJRCA/PyAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZT8uRGF0YSA/PyBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdHVtID0gR2V0RGF0YVNlcmllcyhzZXJpZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdHVtID09PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aW5kfSBjbGFzc05hbWU9XCJsaXN0LWdyb3VwLWl0ZW1cIj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIFR5cGU9e2RhdGFTb3VyY2UuRGF0YVNvdXJjZS5UeXBlfSBJbmRleD17aW5kfSBTZXJpZXM9e3Nlcmllc30gRGF0YT17ZGF0dW0gYXMgVHJlbkRBUC5pWERBUmV0dXJuRGF0YX0gV2lkZ2V0PXtyZWNvcmR9IENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFRyZW5kKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvV2lkZ2V0PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICk7XHJcblxyXG59IiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEFkZGl0aW9uYWxJbmZvLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9nbG9iYWxcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBZGRpdGlvbmFsSW5mbyhwcm9wczogeyBEYXRhOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuIH0pIHtcclxuICAgIGNvbnN0IGlkID0gXy51bmlxdWVJZCgnZHJvcGRvd24tJyk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2wgZHJvcGRvd24tdG9nZ2xlXCIgdHlwZT1cImJ1dHRvblwiIGlkPXtpZH0gZGF0YS10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+SW5mbzwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIiBhcmlhLWxhYmVsbGVkYnk9e2lkfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPkRldmljZToge3Byb3BzLkRhdGE/LkRldmljZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlNpZ25hbCBSZWZlcmVuY2U6IHtwcm9wcy5EYXRhPy5TaWduYWxSZWZlcmVuY2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5TaWduYWwgVHlwZToge3Byb3BzLkRhdGE/LlNpZ25hbFR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5FbmdpbmVlcmluZyBVbml0czoge3Byb3BzLkRhdGE/LkVuZ2luZWVyaW5nVW5pdHN9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5QaGFzZToge3Byb3BzLkRhdGE/LlBoYXNlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+UGhhc29yIFR5cGU6IHtwcm9wcy5EYXRhPy5QaGFzb3JUeXBlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+RGVzY3JpcHRpb246IHtwcm9wcy5EYXRhPy5EZXNjcmlwdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgU2VyaWVzU2VsZWN0LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0IHsgT3Blbkhpc3RvcmlhbiB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvYXBwbGljYXRpb24tdHlwaW5ncyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2dsb2JhbCc7XHJcblxyXG5pbXBvcnQgeyBIaXN0b2dyYW0sIFN0YXRzLCBUYWJsZSwgVHJlbmQsIFdpZGdldCwgWHZzWSB9IGZyb20gJy4vLi4vLi4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvIGZyb20gJy4vQWRkaXRpb25hbEluZm8nO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VyaWVzU2VsZWN0KHByb3BzOiB7IFdpZGdldDogV2lkZ2V0PFRyZW5EQVAuV2lkZ2V0Q2xhc3M+LCBEYXRhU291cmNlSUQ6IG51bWJlciwgQ2FsbGJhY2s6ICgpID0+IHZvaWQsIEF4aXM/OiAnWCcgfCAnWScgfSkge1xyXG4gICAgY29uc3QgW2RhdGFTb3VyY2UsIHNldERhdGFTb3VyY2VdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pRGF0YVNldFJldHVybj4odW5kZWZpbmVkKVxyXG4gICAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuPih7IElEOiAnMCcgfSBhcyB1bmtub3duIGFzIFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4pO1xyXG4gICAgY29uc3QgW2RlbGltZXRlciwgc2V0RGVsaW1ldGVyXSA9IFJlYWN0LnVzZVN0YXRlPHN0cmluZz4oJycpO1xyXG4gICAgY29uc3QgW3R5cGUsIHNldFR5cGVdID0gUmVhY3QudXNlU3RhdGU8T3Blbkhpc3Rvcmlhbi5UeXBlcy5TaWduYWxUeXBlPignVlBITScpO1xyXG4gICAgY29uc3QgW3BoYXNlLCBzZXRQaGFzZV0gPSBSZWFjdC51c2VTdGF0ZTxPcGVuSGlzdG9yaWFuLlR5cGVzLlBoYXNlPignQScpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHByb3BzLldpZGdldC5EYXRhLmZpbmQoZCA9PiBkLkRhdGFTb3VyY2UuSUQgPT09IHByb3BzLkRhdGFTb3VyY2VJRCk7XHJcbiAgICAgICAgaWYgKGRhdGFTb3VyY2UgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNldERhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3Byb3BzLldpZGdldC5EYXRhXSk7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXt0eXBlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0VHlwZShldnQudGFyZ2V0LnZhbHVlIGFzIGFueSl9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtPcGVuSGlzdG9yaWFuLkxpc3RzLlNpZ25hbFR5cGVzLm1hcCgoYSxpKSA9PiA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2F9PnthfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3BoYXNlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UGhhc2UoZXZ0LnRhcmdldC52YWx1ZSBhcyBhbnkpfT5cclxuICAgICAgICAgICAgICAgICAgICB7T3Blbkhpc3Rvcmlhbi5MaXN0cy5QaGFzZXMubWFwKChhLCBpKSA9PiA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2F9PnthfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eygpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ0hpc3RvZ3JhbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIEhpc3RvZ3JhbSkuQWRkU2VyaWVzT0gocHJvcHMuRGF0YVNvdXJjZUlELCBwaGFzZSwgdHlwZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdUcmVuZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFRyZW5kKS5BZGRTZXJpZXNPSChwcm9wcy5EYXRhU291cmNlSUQsIHBoYXNlLCB0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1N0YXRzJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgU3RhdHMpLlNldFNlcmllc09IKHByb3BzLkRhdGFTb3VyY2VJRCwgcGhhc2UsIHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLldpZGdldC5UeXBlID09PSAnVGFibGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBUYWJsZSkuU2V0U2VyaWVzT0gocHJvcHMuRGF0YVNvdXJjZUlELCBwaGFzZSwgdHlwZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdYdnNZJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgWHZzWSkuU2V0U2VyaWVzT0gocHJvcHMuQXhpcywgcHJvcHMuRGF0YVNvdXJjZUlELCBwaGFzZSwgdHlwZSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfX0+U2VsZWN0PC9idXR0b24gPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBBZGRpdGlvbmFsSW5mby50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDMvMTAvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZ2xvYmFsXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFkZGl0aW9uYWxJbmZvKHByb3BzOiB7IEluZGV4OiBudW1iZXIsIERhdGE6IFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YSB9KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2wgZHJvcGRvd24tdG9nZ2xlXCIgdHlwZT1cImJ1dHRvblwiIGlkPXtcImRyb3Bkb3duTWVudUJ1dHRvblwiICsgcHJvcHMuSW5kZXh9IGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxyXG4gICAgICAgICAgICAgICAgQWRkaXRpb24gSW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCIgYXJpYS1sYWJlbGxlZGJ5PXtcImRyb3Bkb3duTWVudUJ1dHRvblwiICsgcHJvcHMuSW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+TWV0ZXI6IHtwcm9wcy5EYXRhPy5NZXRlcn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPkFzc2V0OiB7cHJvcHMuRGF0YT8uQXNzZXR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5DaGFyYWN0ZXJpc3RpYzoge3Byb3BzLkRhdGE/LkNoYXJhY3RlcmlzdGljfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+VHlwZToge3Byb3BzLkRhdGE/LlR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5TdGF0aW9uOiB7cHJvcHMuRGF0YT8uU3RhdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlBoYXNlOiB7cHJvcHMuRGF0YT8uUGhhc2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5IYXJtb25pYzoge3Byb3BzLkRhdGE/Lkhhcm1vbmljfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgU2VyaWVzU2VsZWN0LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAxMi8xNC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuXHJcbmltcG9ydCB7IE9wZW5YREEgfSBmcm9tICdAZ3BhLWdlbXN0b25lL2FwcGxpY2F0aW9uLXR5cGluZ3MnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRyZW5EQVAgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgeyBIaXN0b2dyYW0sIFN0YXRzLCBUYWJsZSwgVHJlbmQsIFdpZGdldCwgWHZzWSB9IGZyb20gJy4uLy4uL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgRmV0Y2hTYXBwaGlyZSwgU2VsZWN0U2FwcGhpcmUsIFNlbGVjdFNhcHBoaXJlU3RhdHVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vU2FwcGhpcmUvU2FwcGhpcmVTbGljZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUZW1wbGF0ZVNlbGVjdChwcm9wczogeyBXaWRnZXQ6IFdpZGdldDxUcmVuREFQLldpZGdldENsYXNzLCBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGE+LCBEYXRhU291cmNlSUQ6IG51bWJlciwgQ2FsbGJhY2s6ICgpID0+IHZvaWQsIEF4aXM/OiAnWCcgfCAnWScgfSkge1xyXG4gICAgY29uc3QgW21lYXN1cmVtZW50LCBzZXRNZWFzdXJlbWVudF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KCcnKTtcclxuICAgIGNvbnN0IFtwaGFzZSwgc2V0UGhhc2VdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPignJyk7XHJcblxyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG5cclxuICAgIGNvbnN0IG1lYXN1cmVtZW50czogYW55W10gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IFNlbGVjdFNhcHBoaXJlKHN0YXRlLCBwcm9wcy5EYXRhU291cmNlSUQsICdDaGFubmVsR3JvdXBUeXBlJykpO1xyXG4gICAgY29uc3QgbXRTdGF0dXMgPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IFNlbGVjdFNhcHBoaXJlU3RhdHVzKHN0YXRlLCBwcm9wcy5EYXRhU291cmNlSUQsICdDaGFubmVsR3JvdXBUeXBlJykpO1xyXG5cclxuICAgIGNvbnN0IHBoYXNlczogYW55W10gPSB1c2VTZWxlY3Rvcigoc3RhdGUpID0+IFNlbGVjdFNhcHBoaXJlKHN0YXRlLCBwcm9wcy5EYXRhU291cmNlSUQsICdQaGFzZScpKTtcclxuICAgIGNvbnN0IHBoU3RhdHVzID0gdXNlU2VsZWN0b3IoKHN0YXRlKSA9PiBTZWxlY3RTYXBwaGlyZVN0YXR1cyhzdGF0ZSwgcHJvcHMuRGF0YVNvdXJjZUlELCAnUGhhc2UnKSk7XHJcblxyXG4gICAgY29uc3QgW2hhcm1vbmljLCBzZXRIYXJtb25pY10gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDApO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKG10U3RhdHVzICE9ICd1bml0aWF0ZWQnICYmIG10U3RhdHVzICE9ICdjaGFuZ2VkJykgcmV0dXJuO1xyXG4gICAgICAgIGRpc3BhdGNoKEZldGNoU2FwcGhpcmUoeyBkYXRhU291cmNlSUQ6IHByb3BzLkRhdGFTb3VyY2VJRCwgdGFibGU6ICdDaGFubmVsR3JvdXBUeXBlJ30pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9XHJcbiAgICB9LCBbbXRTdGF0dXNdKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChwaFN0YXR1cyAhPSAndW5pdGlhdGVkJyAmJiBwaFN0YXR1cyAhPSAnY2hhbmdlZCcpIHJldHVybjtcclxuICAgICAgICBkaXNwYXRjaChGZXRjaFNhcHBoaXJlKHsgZGF0YVNvdXJjZUlEOiBwcm9wcy5EYXRhU291cmNlSUQsIHRhYmxlOiAnUGhhc2UnIH0pKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9XHJcbiAgICB9LCBbcGhTdGF0dXNdKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17bWVhc3VyZW1lbnR9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRNZWFzdXJlbWVudChldnQudGFyZ2V0LnZhbHVlIGFzIGFueSl9PlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nJz48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIHttZWFzdXJlbWVudHMubWFwKG10cyA9PiA8b3B0aW9uIGtleT17bXRzLklEfSB2YWx1ZT17bXRzLkRlc2NyaXB0aW9ufT57bXRzLkRpc3BsYXlOYW1lfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtwaGFzZX0gb25DaGFuZ2U9eyhldnQpID0+IHNldFBoYXNlKGV2dC50YXJnZXQudmFsdWUgYXMgYW55KX0+XHJcbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPScnPjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAge3BoYXNlcy5tYXAobXRzID0+IDxvcHRpb24ga2V5PXttdHMuSUR9IHZhbHVlPXttdHMuTmFtZX0+e210cy5OYW1lfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wnIHZhbHVlPXtoYXJtb25pY30gdHlwZT0nbnVtYmVyJyBvbkNoYW5nZT17KGV2dCkgPT4gc2V0SGFybW9uaWMocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpIH0gcGxhY2Vob2xkZXI9J2hhcm1vbmljJy8+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ0hpc3RvZ3JhbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgSGlzdG9ncmFtKS5BZGRTZXJpZXNTYXBwaGlyZShwcm9wcy5EYXRhU291cmNlSUQsIHBoYXNlLCBtZWFzdXJlbWVudCwgaGFybW9uaWMpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdUcmVuZCcpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFRyZW5kKS5BZGRTZXJpZXNTYXBwaGlyZShwcm9wcy5EYXRhU291cmNlSUQsIHBoYXNlLCBtZWFzdXJlbWVudCwgaGFybW9uaWMpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdTdGF0cycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgU3RhdHMpLlNldFNlcmllc1NhcHBoaXJlKHByb3BzLkRhdGFTb3VyY2VJRCwgcGhhc2UsIG1lYXN1cmVtZW50LCBoYXJtb25pYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdUYWJsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgVGFibGUpLlNldFNlcmllc1NhcHBoaXJlKHByb3BzLkRhdGFTb3VyY2VJRCwgcGhhc2UsIG1lYXN1cmVtZW50LCBoYXJtb25pYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdYdnNZJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBYdnNZKS5TZXRTZXJpZXNTYXBwaGlyZShwcm9wcy5BeGlzLCBwcm9wcy5EYXRhU291cmNlSUQsIHBoYXNlLCBtZWFzdXJlbWVudCwgaGFybW9uaWMpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9fT5TZWxlY3Q8L2J1dHRvbiA+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuXHJcbn1cclxuXHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBXaWRnZXQudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzE2LzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQIH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgV2lkZ2V0IH0gZnJvbSAnLi4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IFNlcmllc1NlbGVjdFhEQSBmcm9tICcuL1hEQS9TZXJpZXNTZWxlY3QnO1xyXG5pbXBvcnQgU2VyaWVzU2VsZWN0T3Blbkhpc3RvcmlhbiBmcm9tICcuL09wZW5IaXN0b3JpYW4vU2VyaWVzU2VsZWN0JztcclxuaW1wb3J0IFNlcmllc1NlbGVjdFNhcHBoaXJlIGZyb20gJy4vU2FwcGhpcmUvU2VyaWVzU2VsZWN0JztcclxuXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBUcmVuREFQLmlXaWRnZXQge1xyXG4gICAgY2hpbGRyZW46IEpTWC5FbGVtZW50IHwgSlNYLkVsZW1lbnRbXSxcclxuICAgIFJlY29yZDogVHJlbkRBUC5pV2lkZ2V0LFxyXG4gICAgVG9nZ2xlOiBib29sZWFuLFxyXG4gICAgU2V0VG9nZ2xlOiAoYm9vbGVhbikgPT4gdm9pZFxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdpZGdpdChwcm9wczogUHJvcHMpIHtcclxuXHJcbiAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCIgcm9sZT1cImRpYWxvZ1wiIHN0eWxlPXt7IGRpc3BsYXk6IHByb3BzLlRvZ2dsZSA/ICdibG9jaycgOiAnbm9uZScsIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC40KScgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZyBtdy0xMDAgdy03NVwiIHJvbGU9XCJkb2N1bWVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudCBteC1hdXRvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm1vZGFsLWhlYWRlclwifT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9XCJtb2RhbC10aXRsZVwiPntwcm9wcy5MYWJlbH0gU2V0dGluZ3M8L2g1PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPXtcImNsb3NlXCJ9IG9uQ2xpY2s9eygpID0+IHByb3BzLlNldFRvZ2dsZShmYWxzZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtZm9vdGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuVXBkYXRlKHByb3BzLlJlY29yZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuU2V0VG9nZ2xlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PlNhdmUgY2hhbmdlczwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1kYW5nZXJcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuUmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuU2V0VG9nZ2xlKGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+RGVsZXRlIFdpZGdpdDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIiBvbkNsaWNrPXsoKSA9PiBwcm9wcy5TZXRUb2dnbGUoZmFsc2UpfT5DbG9zZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ3aW5kb3dcIikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU2VyaWVzU2VsZWN0KHByb3BzOiB7IFdpZGdldDogV2lkZ2V0PFRyZW5EQVAuV2lkZ2V0Q2xhc3M+LCBEYXRhU291cmNlSUQ6IG51bWJlciwgQ2FsbGJhY2s6ICgpID0+IHZvaWQsIEF4aXM/OiAnWCcgfCAnWScgfSkge1xyXG4gICAgY29uc3QgW2RhdGFTb3VyY2UsIHNldERhdGFTb3VyY2VdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pRGF0YVNldFJldHVybj4odW5kZWZpbmVkKVxyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHByb3BzLldpZGdldC5EYXRhLmZpbmQoZCA9PiBkLkRhdGFTb3VyY2UuSUQgPT09IHByb3BzLkRhdGFTb3VyY2VJRCk7XHJcbiAgICAgICAgaWYgKGRhdGFTb3VyY2UgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNldERhdGFTb3VyY2UoZGF0YVNvdXJjZSk7XHJcbiAgICAgICAgICAgIC8vc2V0U2VsZWN0ZWQoKGRhdGFTb3VyY2U/LkRhdGEgPz8gW3VuZGVmaW5lZF0pWzBdKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbcHJvcHMuV2lkZ2V0LkRhdGFdKTtcclxuXHJcblxyXG4gICAgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1RyZW5EQVBEQicpXHJcbiAgICAgICAgcmV0dXJuIDxTZXJpZXNTZWxlY3RYREEgey4uLnByb3BzfSAvPjtcclxuXHJcbiAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJylcclxuICAgICAgICByZXR1cm4gPFNlcmllc1NlbGVjdE9wZW5IaXN0b3JpYW4gey4uLnByb3BzfSAvPjtcclxuICAgIGVsc2UgaWYgKGRhdGFTb3VyY2U/LkRhdGFTb3VyY2UuVHlwZSA9PT0gJ1NhcHBoaXJlJylcclxuICAgICAgICByZXR1cm4gPFNlcmllc1NlbGVjdFNhcHBoaXJlIHsuLi5wcm9wc30gV2lkZ2V0PXsgcHJvcHMuV2lkZ2V0IGFzIFdpZGdldDxUcmVuREFQLldpZGdldENsYXNzLFRyZW5EQVAuaVNhcHBoaXJlUmV0dXJuRGF0YT59IC8+O1xyXG5cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEFkZGl0aW9uYWxJbmZvLnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0IHsgVHJlbkRBUCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9nbG9iYWxcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWRkaXRpb25hbEluZm8ocHJvcHM6IHsgSW5kZXg6IG51bWJlciwgRGF0YTogVHJlbkRBUC5pWERBUmV0dXJuRGF0YSB9KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd25cIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2wgZHJvcGRvd24tdG9nZ2xlXCIgdHlwZT1cImJ1dHRvblwiIGlkPXtcImRyb3Bkb3duTWVudUJ1dHRvblwiICsgcHJvcHMuSW5kZXh9IGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPlxyXG4gICAgICAgICAgICAgICAgQWRkaXRpb24gSW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCIgYXJpYS1sYWJlbGxlZGJ5PXtcImRyb3Bkb3duTWVudUJ1dHRvblwiICsgcHJvcHMuSW5kZXh9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+TWV0ZXI6IHtwcm9wcy5EYXRhPy5NZXRlcn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPkFzc2V0OiB7cHJvcHMuRGF0YT8uQXNzZXR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5DaGFyYWN0ZXJpc3RpYzoge3Byb3BzLkRhdGE/LkNoYXJhY3RlcmlzdGljfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCI+VHlwZToge3Byb3BzLkRhdGE/LlR5cGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5TdGF0aW9uOiB7cHJvcHMuRGF0YT8uU3RhdGlvbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiPlBoYXNlOiB7cHJvcHMuRGF0YT8uUGhhc2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIj5IYXJtb25pYzoge3Byb3BzLkRhdGE/Lkhhcm1vbmljfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgKTtcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgU2VyaWVzU2VsZWN0LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMC8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0IHsgT3BlblhEQSB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvYXBwbGljYXRpb24tdHlwaW5ncyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUmVkdXgsIFRyZW5EQVAsIE9wZW5YREFFeHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgeyBIaXN0b2dyYW0sIFN0YXRzLCBUYWJsZSwgVHJlbmQsIFdpZGdldCwgWHZzWSB9IGZyb20gJy4vLi4vLi4vSW1wbGVtZW50YXRpb25zJztcclxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xyXG5pbXBvcnQgeyBGZXRjaE9wZW5YREEsIFNlbGVjdE9wZW5YREEsIFNlbGVjdE9wZW5YREFTdGF0dXMgfSBmcm9tICcuLi8uLi8uLi8uLi9PcGVuWERBL09wZW5YREFTbGljZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTZXJpZXNTZWxlY3QocHJvcHM6IHsgV2lkZ2V0OiBXaWRnZXQ8VHJlbkRBUC5XaWRnZXRDbGFzcz4sIERhdGFTb3VyY2VJRDogbnVtYmVyLCBDYWxsYmFjazogKCkgPT4gdm9pZCwgQXhpcz86ICdYJyB8ICdZJyB9KSB7XHJcbiAgICBjb25zdCBbZGF0YVNvdXJjZSwgc2V0RGF0YVNvdXJjZV0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlEYXRhU2V0UmV0dXJuPih1bmRlZmluZWQpXHJcbiAgICBjb25zdCBbcGhhc2UsIHNldFBoYXNlXSA9IFJlYWN0LnVzZVN0YXRlPE9wZW5YREEuVHlwZXMuUGhhc2VOYW1lPignQU4nKTtcclxuICAgIGNvbnN0IFtwaGFzZXMsIHNldFBoYXNlc10gPSBSZWFjdC51c2VTdGF0ZTxPcGVuWERBLlR5cGVzLlBoYXNlTmFtZVtdPihPcGVuWERBLkxpc3RzLlBoYXNlcyk7XHJcbiAgICBjb25zdCBjaGFubmVsR3JvdXBzVHlwZXM6IGFueVtdID0gdXNlU2VsZWN0b3IoKHN0YXRlOiBSZWR1eC5TdG9yZVN0YXRlKSA9PiBTZWxlY3RPcGVuWERBKHN0YXRlLCBwcm9wcy5EYXRhU291cmNlSUQsICdDaGFubmVsR3JvdXBEZXRhaWxzJykpO1xyXG4gICAgY29uc3QgY2d0U3RhdHVzOiBUcmVuREFQLlN0YXR1cyA9IHVzZVNlbGVjdG9yKChzdGF0ZTogUmVkdXguU3RvcmVTdGF0ZSkgPT4gU2VsZWN0T3BlblhEQVN0YXR1cyhzdGF0ZSwgcHJvcHMuRGF0YVNvdXJjZUlELCAnQ2hhbm5lbEdyb3VwRGV0YWlscycpKTtcclxuXHJcbiAgICBjb25zdCBbY2hhbm5lbEdyb3VwVHlwZSwgc2V0Q2hhbm5lbEdyb3VwVHlwZV0gPSBSZWFjdC51c2VTdGF0ZTxPcGVuWERBRXh0LkNoYW5uZWxHcm91cERldGFpbHM+KHVuZGVmaW5lZCk7XHJcbiAgICBjb25zdCBbcmVkdWNlZENoYW5uZWxHcm91cFR5cGVzLCBzZXRSZWR1Y2VkQ2hhbm5lbEdyb3VwVHlwZXNdID0gUmVhY3QudXNlU3RhdGU8T3BlblhEQUV4dC5DaGFubmVsR3JvdXBEZXRhaWxzW10+KFtdKTtcclxuXHJcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoY2d0U3RhdHVzID09PSAndW5pdGlhdGVkJyB8fCBjZ3RTdGF0dXM9PT0gJ2NoYW5nZWQnKVxyXG4gICAgICAgICAgICBkaXNwYXRjaChGZXRjaE9wZW5YREEoeyBkYXRhU291cmNlSUQ6IHByb3BzLkRhdGFTb3VyY2VJRCwgdGFibGU6ICdDaGFubmVsR3JvdXBEZXRhaWxzJyB9KSk7XHJcbiAgICAgICAgZWxzZSBpZiAoY2d0U3RhdHVzID09PSAnaWRsZScpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoKHByb3BzLldpZGdldD8uRGF0YSA/PyBbXSkubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgc2V0UmVkdWNlZENoYW5uZWxHcm91cFR5cGVzKGNoYW5uZWxHcm91cHNUeXBlcyk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoYW5uZWxzID0gcHJvcHMuV2lkZ2V0LkRhdGEuZmluZChkID0+IGQuRGF0YVNvdXJjZS5JRCA9PT0gcHJvcHMuRGF0YVNvdXJjZUlEKS5EYXRhO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlZHVjZWQgPSBjaGFubmVsR3JvdXBzVHlwZXMuZmlsdGVyKGQgPT4gY2hhbm5lbHMuZmluZCgoYzogVHJlbkRBUC5pWERBUmV0dXJuRGF0YSkgPT4gYy5UeXBlID09PSBkLk1lYXN1cmVtZW50VHlwZSAmJiBjLkNoYXJhY3RlcmlzdGljID09PSBkLk1lYXN1cmVtZW50Q2hhcmFjdGVyaXN0aWMpICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgIHNldFJlZHVjZWRDaGFubmVsR3JvdXBUeXBlcyhyZWR1Y2VkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtkaXNwYXRjaCwgY2d0U3RhdHVzXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjb25zdCBkYXRhU291cmNlID0gcHJvcHMuV2lkZ2V0LkRhdGEuZmluZChkID0+IGQuRGF0YVNvdXJjZS5JRCA9PT0gcHJvcHMuRGF0YVNvdXJjZUlEKTtcclxuICAgICAgICBpZiAoZGF0YVNvdXJjZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2V0RGF0YVNvdXJjZShkYXRhU291cmNlKTtcclxuICAgICAgICAgICAgbGV0IHBoID0gcGhhc2VzLmZpbHRlcihwID0+IGRhdGFTb3VyY2UuRGF0YS5maW5kKGQgPT4gZC5QaGFzZSA9PT0gcCkpO1xyXG4gICAgICAgICAgICBzZXRQaGFzZXMocGgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtwcm9wcy5XaWRnZXQuRGF0YV0pO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIiB2YWx1ZT17Y2hhbm5lbEdyb3VwVHlwZT8uRGlzcGxheU5hbWUgPz8gJyd9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRDaGFubmVsR3JvdXBUeXBlKGNoYW5uZWxHcm91cHNUeXBlcy5maW5kKGMgPT4gYy5EaXNwbGF5TmFtZSA9PT0gZXZ0LnRhcmdldC52YWx1ZSkpfT5cclxuICAgICAgICAgICAgICAgICAge3JlZHVjZWRDaGFubmVsR3JvdXBUeXBlcy5tYXAobXRzID0+IDxvcHRpb24ga2V5PXttdHMuRGlzcGxheU5hbWV9IHZhbHVlPXttdHMuRGlzcGxheU5hbWV9PnttdHMuRGlzcGxheU5hbWV9PC9vcHRpb24+KX1cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3BoYXNlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0UGhhc2UoZXZ0LnRhcmdldC52YWx1ZSBhcyBhbnkpfT5cclxuICAgICAgICAgICAgICAgICAge3BoYXNlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPiBiKSByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhID09IGIpIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgLTE7XHJcbiAgICAgICAgICAgICAgICB9KS5tYXAobXRzID0+IDxvcHRpb24ga2V5PXttdHN9IHZhbHVlPXttdHN9PnttdHN9PC9vcHRpb24+KX1cclxuICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ0hpc3RvZ3JhbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgSGlzdG9ncmFtKS5BZGRTZXJpZXNYREEocHJvcHMuRGF0YVNvdXJjZUlELCBwaGFzZSwgY2hhbm5lbEdyb3VwVHlwZS5NZWFzdXJlbWVudFR5cGUsICBjaGFubmVsR3JvdXBUeXBlLk1lYXN1cmVtZW50Q2hhcmFjdGVyaXN0aWMpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdUcmVuZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5XaWRnZXQgYXMgVHJlbmQpLkFkZFNlcmllc1hEQShwcm9wcy5EYXRhU291cmNlSUQsIHBoYXNlLCBjaGFubmVsR3JvdXBUeXBlLk1lYXN1cmVtZW50VHlwZSwgY2hhbm5lbEdyb3VwVHlwZS5NZWFzdXJlbWVudENoYXJhY3RlcmlzdGljKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLldpZGdldC5UeXBlID09PSAnU3RhdHMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuV2lkZ2V0IGFzIFN0YXRzKS5TZXRTZXJpZXNYREEocHJvcHMuRGF0YVNvdXJjZUlELCBwaGFzZSwgY2hhbm5lbEdyb3VwVHlwZS5NZWFzdXJlbWVudFR5cGUsIGNoYW5uZWxHcm91cFR5cGUuTWVhc3VyZW1lbnRDaGFyYWN0ZXJpc3RpYylcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5XaWRnZXQuVHlwZSA9PT0gJ1RhYmxlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBUYWJsZSkuU2V0U2VyaWVzWERBKHByb3BzLkRhdGFTb3VyY2VJRCwgcGhhc2UsIGNoYW5uZWxHcm91cFR5cGUuTWVhc3VyZW1lbnRUeXBlLCBjaGFubmVsR3JvdXBUeXBlLk1lYXN1cmVtZW50Q2hhcmFjdGVyaXN0aWMpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcHMuV2lkZ2V0LlR5cGUgPT09ICdYdnNZJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHByb3BzLldpZGdldCBhcyBYdnNZKS5TZXRTZXJpZXNYREEocHJvcHMuQXhpcywgcHJvcHMuRGF0YVNvdXJjZUlELCBwaGFzZSwgY2hhbm5lbEdyb3VwVHlwZS5NZWFzdXJlbWVudFR5cGUsIGNoYW5uZWxHcm91cFR5cGUuTWVhc3VyZW1lbnRDaGFyYWN0ZXJpc3RpYylcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH19PlNlbGVjdDwvYnV0dG9uID5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG5cclxufVxyXG5cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIFh2c1kudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzE2LzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCwgUmVkdXggfSBmcm9tICcuLi8uLi8uLi9nbG9iYWwnO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4uLy4uLy4uLy4uL1N0eWxlcy9hcHAuc2Nzcyc7XHJcbmltcG9ydCB7IElucHV0LCBDaGVja0JveCB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvcmVhY3QtZm9ybXMnO1xyXG5cclxuaW1wb3J0IFdpZGdldCwgeyBTZXJpZXNTZWxlY3QgfSBmcm9tICcuL1dpZGdldC9XaWRnZXQnO1xyXG5pbXBvcnQgQWRkaXRpb25hbEluZm9YREEgZnJvbSAnLi9XaWRnZXQvWERBL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IEFkZGl0aW9uYWxJbmZvT3Blbkhpc3RvcmlhbiBmcm9tICcuL1dpZGdldC9PcGVuSGlzdG9yaWFuL0FkZGl0aW9uYWxJbmZvJztcclxuaW1wb3J0IHsgQ3Jvc3NNYXJrLCBQbHVzIH0gZnJvbSAnQGdwYS1nZW1zdG9uZS9ncGEtc3ltYm9scyc7XHJcbmltcG9ydCB7IFh2c1kgfSBmcm9tICcuL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IERhdGV0aW1lIGZyb20gJ3JlYWN0LWRhdGV0aW1lJztcclxuaW1wb3J0IFwicmVhY3QtZGF0ZXRpbWUvY3NzL3JlYWN0LWRhdGV0aW1lLmNzc1wiO1xyXG5pbXBvcnQgeyBsaW5lYXJSZWdyZXNzaW9uLCBsaW5lYXJSZWdyZXNzaW9uTGluZSwgclNxdWFyZWQgfSBmcm9tICdzaW1wbGUtc3RhdGlzdGljcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBYdnNZSlNYKHByb3BzOiBUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldDxUcmVuREFQLmlUZW1wbGF0YWJsZVh2c1k+KSB7XHJcbiAgICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW3JlY29yZCwgc2V0UmVjb3JkXSA9IFJlYWN0LnVzZVN0YXRlPFh2c1k+KG5ldyBYdnNZKHByb3BzKSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgSW5pdGlhbGl6ZShyZWNvcmQpXHJcbiAgICB9LCBbcmVjb3JkXSlcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldFJlY29yZChuZXcgWHZzWShwcm9wcykpXHJcbiAgICB9LCBbcHJvcHMuSGVpZ2h0LCBwcm9wcy5EYXRhLCBwcm9wcy5EZXZpY2VdKVxyXG5cclxuICAgIGZ1bmN0aW9uIFppcDxUPihhcnJheTE6IFRbXSwgZmllbGQxOiBrZXlvZiBULCBhcnJheTI6IFRbXSwgZmllbGQyOiBrZXlvZiBULCB6aXBGaWVsZDoga2V5b2YgVCkge1xyXG4gICAgICAgIGxldCByZXR1cm5BcnJheTogeyBaaXBGaWVsZDogVFtrZXlvZiBUXSwgQXJyYXkxOiBUW2tleW9mIFRdLCBBcnJheTI6ICBUW2tleW9mIFRdfVtdPSBbXTtcclxuICAgICAgICBpZiAoYXJyYXkxLmxlbmd0aCA+IGFycmF5Mi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXJyYXkxLmZvckVhY2goKHhkLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheTJQb2ludCA9IGFycmF5Mi5maW5kKHBvaW50ID0+IHBvaW50W3ppcEZpZWxkXSA9PT0geGRbemlwRmllbGRdKVxyXG4gICAgICAgICAgICAgICAgaWYgKGFycmF5MlBvaW50ID09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuQXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgWmlwRmllbGQ6IHhkW3ppcEZpZWxkXSwgQXJyYXkxOiB4ZFtmaWVsZDFdLCBBcnJheTI6IGFycmF5MlBvaW50W2ZpZWxkMl1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFycmF5Mi5mb3JFYWNoKCh4ZCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXkxUG9pbnQgPSBhcnJheTEuZmluZChwb2ludCA9PiBwb2ludFt6aXBGaWVsZF0gPT09IHhkW3ppcEZpZWxkXSlcclxuICAgICAgICAgICAgICAgIGlmIChhcnJheTFQb2ludCA9PSB1bmRlZmluZWQpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHJldHVybkFycmF5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIFppcEZpZWxkOiB4ZFt6aXBGaWVsZF0sIEFycmF5MjogeGRbZmllbGQxXSwgQXJyYXkxOiBhcnJheTFQb2ludFtmaWVsZDJdXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmV0dXJuQXJyYXlcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBJbml0aWFsaXplKHNldHRpbmdzOiBYdnNZKSB7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLkpTT04uWC5TZXJpZXMgPT0gdW5kZWZpbmVkIHx8IHNldHRpbmdzLkpTT04uWS5TZXJpZXMgPT0gdW5kZWZpbmVkIHx8IChzZXR0aW5ncz8uRGF0YS5sZW5ndGggPz8gMCk9PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBzZXR0aW5ncy5EYXRhLmZpbmQoZGQgPT4gZGQuRGF0YVNvdXJjZS5JRCA9PT0gc2V0dGluZ3MuSlNPTi5YLlNlcmllcz8uRGF0YVNvdXJjZUlEID8/IDApXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFTb3VyY2U/LkRhdGEgPz8gW107XHJcblxyXG4gICAgICAgIGxldCB4U2VyaWVzLCB5U2VyaWVzO1xyXG4gICAgICAgIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdPcGVuSGlzdG9yaWFuJykge1xyXG4gICAgICAgICAgICBsZXQgeCA9IHsgLi4uc2V0dGluZ3MuSlNPTi5YLlNlcmllcyB9IGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzT3Blbkhpc3RvcmlhbjtcclxuICAgICAgICAgICAgbGV0IHkgPSB7IC4uLnNldHRpbmdzLkpTT04uWS5TZXJpZXMgfSBhcyBUcmVuREFQLmlUZW1wbGF0ZVNlcmllc09wZW5IaXN0b3JpYW47XHJcbiAgICAgICAgICAgIHhTZXJpZXMgPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlPcGVuSGlzdG9yaWFuUmV0dXJuKSA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5TaWduYWxUeXBlID09PSB4LlR5cGUgJiYgZGQuUGhhc2UgPT09IHguUGhhc2UpO1xyXG4gICAgICAgICAgICB5U2VyaWVzID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pT3Blbkhpc3RvcmlhblJldHVybikgPT4gZGRbcHJvcHMuQnldID09PSBwcm9wcy5EZXZpY2UgJiYgZGQuU2lnbmFsVHlwZSA9PT0geS5UeXBlICYmIGRkLlBoYXNlID09PSB5LlBoYXNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGF0YVNvdXJjZT8uRGF0YVNvdXJjZS5UeXBlID09PSAnVHJlbkRBUERCJykge1xyXG4gICAgICAgICAgICBsZXQgeCA9IHsgLi4uc2V0dGluZ3MuSlNPTi5YLlNlcmllcyB9IGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzWERBO1xyXG4gICAgICAgICAgICBsZXQgeSA9IHsgLi4uc2V0dGluZ3MuSlNPTi5ZLlNlcmllcyB9IGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzWERBO1xyXG5cclxuICAgICAgICAgICAgeFNlcmllcyA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaVhEQVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlR5cGUgPT09IHguVHlwZSAmJiBkZC5QaGFzZSA9PT0geC5QaGFzZSAmJiBkZC5DaGFyYWN0ZXJpc3RpYyA9PT0geC5DaGFyYWN0ZXJpc3RpYyk7XHJcbiAgICAgICAgICAgIHlTZXJpZXMgPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlYREFSZXR1cm5EYXRhKSA9PiBkZFtwcm9wcy5CeV0gPT09IHByb3BzLkRldmljZSAmJiBkZC5UeXBlID09PSB5LlR5cGUgJiYgZGQuUGhhc2UgPT09IHkuUGhhc2UgJiYgZGQuQ2hhcmFjdGVyaXN0aWMgPT09IHkuQ2hhcmFjdGVyaXN0aWMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkYXRhU291cmNlPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgbGV0IHggPSB7IC4uLnNldHRpbmdzLkpTT04uWC5TZXJpZXMgfSBhcyBUcmVuREFQLmlUZW1wbGF0ZVNlcmllc1NhcHBoaXJlO1xyXG4gICAgICAgICAgICBsZXQgeSA9IHsgLi4uc2V0dGluZ3MuSlNPTi5ZLlNlcmllcyB9IGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzU2FwcGhpcmU7XHJcblxyXG4gICAgICAgICAgICB4U2VyaWVzID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKSA9PiBkZC5NZXRlciA9PSBwcm9wcy5EZXZpY2UgJiYgZGQuUGhhc2UgPT09IHguUGhhc2UgJiYgZGQuQ2hhcmFjdGVyaXN0aWMgPT09IHguTWVhc3VyZW1lbnQgJiYgZGQuSGFybW9uaWMgPT09IHguSGFybW9uaWMpO1xyXG4gICAgICAgICAgICB5U2VyaWVzID0gZGF0YS5maW5kKChkZDogVHJlbkRBUC5pU2FwcGhpcmVSZXR1cm5EYXRhKSA9PiBkZC5NZXRlciA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlBoYXNlID09PSB5LlBoYXNlICYmIGRkLkNoYXJhY3RlcmlzdGljID09PSB5Lk1lYXN1cmVtZW50ICYmIGRkLkhhcm1vbmljID09PSB5Lkhhcm1vbmljKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHhTZXJpZXMgPSB7IERhdGE6IFtdIH07XHJcbiAgICAgICAgICAgIHlTZXJpZXMgPSB7IERhdGE6IFtdIH07XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHhNYXggPSAxMDAsIHhNaW4gPSAwLCB5TWF4ID0gMTAwLCB5TWluID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHhTZXJpZXM/LkRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB4TWF4ID0gTWF0aC5tYXgoLi4ueFNlcmllcy5EYXRhLm1hcChkID0+IGRbc2V0dGluZ3MuSlNPTi5YLlNlcmllcy5GaWVsZF0pKTtcclxuICAgICAgICAgICAgeE1pbiA9IE1hdGgubWluKC4uLnhTZXJpZXMuRGF0YS5tYXAoZCA9PiBkW3NldHRpbmdzLkpTT04uWC5TZXJpZXMuRmllbGRdKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoeVNlcmllcz8uRGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHlNYXggPSBNYXRoLm1heCguLi55U2VyaWVzLkRhdGEubWFwKGQgPT4gZFtzZXR0aW5ncy5KU09OLlkuU2VyaWVzLkZpZWxkXSkpO1xyXG4gICAgICAgICAgICB5TWluID0gTWF0aC5taW4oLi4ueVNlcmllcy5EYXRhLm1hcChkID0+IGRbc2V0dGluZ3MuSlNPTi5ZLlNlcmllcy5GaWVsZF0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHsgYm90dG9tOiA1MCwgbGVmdDogNTAsIHRvcDogNDAsIHJpZ2h0OiA1MCB9O1xyXG4gICAgICAgIGNvbnN0IHN2Z0hlaWdodCA9IHByb3BzLkhlaWdodDtcclxuICAgICAgICBkMy5zZWxlY3QocmVmLmN1cnJlbnQpLnNlbGVjdEFsbCgnc3ZnJykucmVtb3ZlKClcclxuICAgICAgICBjb25zdCB4ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgICAuZG9tYWluKFt4TWluLCB4TWF4XSkgICAgIC8vIGNhbiB1c2UgdGhpcyBpbnN0ZWFkIG9mIDEwMDAgdG8gaGF2ZSB0aGUgbWF4IG9mIGRhdGE6IGQzLm1heChkYXRhLCBmdW5jdGlvbihkKSB7IHJldHVybiArZC5wcmljZSB9KVxyXG4gICAgICAgICAgICAucmFuZ2UoWzAsIHNldHRpbmdzLldpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHRdKTtcclxuICAgICAgICBjb25zdCB5ID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgICAucmFuZ2UoW3N2Z0hlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tLCAwXSlcclxuICAgICAgICAgICAgLmRvbWFpbihbeU1pbiwgeU1heF0pOyAgIC8vIGQzLmhpc3QgaGFzIHRvIGJlIGNhbGxlZCBiZWZvcmUgdGhlIFkgYXhpcyBvYnZpb3VzbHlcclxuXHJcbiAgICAgICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHJlZi5jdXJyZW50KVxyXG4gICAgICAgICAgICAuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCBzZXR0aW5ncy5XaWR0aClcclxuICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIHN2Z0hlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHhBeGlzID0gc3ZnLmFwcGVuZChcImdcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgKHN2Z0hlaWdodCAtIG1hcmdpbi5ib3R0b20pICsgXCIpXCIpXHJcbiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHgpKVxyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChzZXR0aW5ncy5XaWR0aCAvIDIpICsgXCIsXCIgKyAoc3ZnSGVpZ2h0IC0gbWFyZ2luLmJvdHRvbSAvIDMpICsgXCIpXCIpXHJcbiAgICAgICAgICAgIC50ZXh0KHNldHRpbmdzLkpTT04uWC5Vbml0cylcclxuXHJcbiAgICAgICAgY29uc3QgeUF4aXMgPSBzdmcuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIChtYXJnaW4ubGVmdCkgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcclxuICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeSkpO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApIHRyYW5zbGF0ZSgtXCIgKyBzdmdIZWlnaHQgLyAyICsgXCIsXCIgKyAobWFyZ2luLmxlZnQgLyAzKSArIFwiKVwiKVxyXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxyXG4gICAgICAgICAgICAudGV4dChzZXR0aW5ncy5KU09OLlkuVW5pdHMpO1xyXG5cclxuICAgICAgICBjb25zdCB4RGF0YTogVHJlbkRBUC5pWERBVHJlbmREYXRhUG9pbnRbXSA9IEdldERhdHVtKCdYJyk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgY29uc3QgeURhdGE6IFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50W10gPSBHZXREYXR1bSgnWScpPy5EYXRhID8/IFtdO1xyXG4gICAgICAgIGNvbnN0IGNvbWJpbmVkRGF0YSA9IFppcCh4RGF0YSwgcmVjb3JkLkpTT04uWC5TZXJpZXMuRmllbGQsIHlEYXRhLCByZWNvcmQuSlNPTi5ZLlNlcmllcy5GaWVsZCwgJ1RpbWVzdGFtcCcpOyBcclxuICAgICAgICAvL2NvbnN0IGNvbWJpbmVkRGF0YSA9IHhEYXRhLm1hcCgoeGQsIGkpID0+ICh7IFRpbWVzdGFtcDogeGQuVGltZXN0YW1wLCBYOiB4ZFtyZWNvcmQuSlNPTi5YU2VyaWVzLkZpZWxkXSwgWTogeURhdGFbaV1bcmVjb3JkLkpTT04uWVNlcmllcy5GaWVsZF0gfSkpXHJcbiAgICAgICAgLy9jb25zdCBmaWx0ZXJlZERhdGEgPSBjb21iaW5lZERhdGEuZmlsdGVyKGQgPT4gbW9tZW50KGQuWmlwRmllbGQpLnRvRGF0ZSgpLmdldFRpbWUoKSA+PSByZWNvcmQuSlNPTi5UaW1lTWluICYmIG1vbWVudChkLlppcEZpZWxkKS50b0RhdGUoKS5nZXRUaW1lKCkgPD0gcmVjb3JkLkpTT04uVGltZU1heCk7XHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbChcImRvdFwiKVxyXG4gICAgICAgICAgICAuZGF0YShjb21iaW5lZERhdGEpXHJcbiAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZChcImNpcmNsZVwiKVxyXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMy41KVxyXG4gICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uIChkKSB7IHJldHVybiB4KGQuQXJyYXkxIGFzIG51bWJlcik7IH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIHkoZC5BcnJheTIgYXMgbnVtYmVyKTsgfSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHJlY29yZC5KU09OLlJlZ3Jlc3Npb25MaW5lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjb21iaW5lZERhdGEubWFwKGQgPT4gW2QuQXJyYXkxIGFzIG51bWJlciwgZC5BcnJheTIgYXMgbnVtYmVyXSlcclxuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSBsaW5lYXJSZWdyZXNzaW9uKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCBsckxpbmUgPSBsaW5lYXJSZWdyZXNzaW9uTGluZShtb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHIyID0gclNxdWFyZWQoZGF0YSwgbHJMaW5lKTtcclxuICAgICAgICAgICAgY29uc3QgbGluZUZ1bmMgPSBkMy5saW5lPG51bWJlcltdPigpLngoZCA9PiB4KGRbMF0pKS55KGQgPT4geShsckxpbmUoZFswXSkpKTtcclxuICAgICAgICAgICAgc3ZnLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ3JlZCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7cHJvcHMuV2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodH0sJHttYXJnaW4udG9wfSlgKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoYFIyIC0gJHtyMi50b0ZpeGVkKDMpfWApO1xyXG5cclxuICAgICAgICAgICAgc3ZnLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgICAgICAgIC5kYXRhKFtkYXRhXSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsICdyZWQnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIChkKSA9PiBsaW5lRnVuYyhkKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgKVxyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBHZXREYXR1bShheGlzOiAnWCcgfCAnWScpIHtcclxuICAgICAgICBpZiAocmVjb3JkLkpTT05bYXhpc10uU2VyaWVzID09IHVuZGVmaW5lZCkgcmV0dXJuIHsgTmFtZTogJycgfSBhcyBhbnk7XHJcbiAgICAgICAgbGV0IGRzID0gcmVjb3JkLkRhdGEuZmluZChkZCA9PiBkZD8uRGF0YVNvdXJjZS5JRCA9PT0gcmVjb3JkLkpTT05bYXhpc10uU2VyaWVzPy5EYXRhU291cmNlSUQgPz8gMClcclxuICAgICAgICBjb25zdCBkYXRhID0gZHM/LkRhdGEgPz8gW107XHJcbiAgICAgICAgbGV0IGRhdHVtO1xyXG4gICAgICAgIGlmIChkcz8uRGF0YVNvdXJjZS5UeXBlID09PSAnT3Blbkhpc3RvcmlhbicpIHtcclxuICAgICAgICAgICAgbGV0IHMgPSByZWNvcmQuSlNPTltheGlzXS5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGVTZXJpZXNPcGVuSGlzdG9yaWFuO1xyXG4gICAgICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaU9wZW5IaXN0b3JpYW5SZXR1cm4pID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlNpZ25hbFR5cGUgPT09IHMuVHlwZSAmJiBkZC5QaGFzZSA9PT0gcy5QaGFzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRzPy5EYXRhU291cmNlLlR5cGUgPT09ICdUcmVuREFQREInKSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gcmVjb3JkLkpTT05bYXhpc10uU2VyaWVzIGFzIFRyZW5EQVAuaVRlbXBsYXRlU2VyaWVzWERBO1xyXG4gICAgICAgICAgICBkYXR1bSA9IGRhdGEuZmluZCgoZGQ6IFRyZW5EQVAuaVhEQVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICYmIGRkLlR5cGUgPT09IHMuVHlwZSAmJiBkZC5QaGFzZSA9PT0gcy5QaGFzZSAmJiBkZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5DaGFyYWN0ZXJpc3RpYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRzPy5EYXRhU291cmNlLlR5cGUgPT09ICdTYXBwaGlyZScpIHtcclxuICAgICAgICAgICAgbGV0IHMgPSByZWNvcmQuSlNPTltheGlzXS5TZXJpZXMgYXMgVHJlbkRBUC5pVGVtcGxhdGVTZXJpZXNTYXBwaGlyZTtcclxuICAgICAgICAgICAgZGF0dW0gPSBkYXRhLmZpbmQoKGRkOiBUcmVuREFQLmlTYXBwaGlyZVJldHVybkRhdGEpID0+IGRkW3Byb3BzLkJ5XSA9PT0gcHJvcHMuRGV2aWNlICAmJiBkZC5QaGFzZSA9PT0gcy5QaGFzZSAmJiBkZC5DaGFyYWN0ZXJpc3RpYyA9PT0gcy5NZWFzdXJlbWVudCAmJiBkZC5IYXJtb25pYyA9PT0gcy5IYXJtb25pYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZGF0dW0gPSB7IE5hbWU6ICcnIH07XHJcblxyXG4gICAgICAgIHJldHVybiBkYXR1bTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIHN0eWxlPXt7IHdpZHRoOiBwcm9wcy5XaWR0aCwgaGVpZ2h0OiBwcm9wcy5IZWlnaHQgfX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCIgc3R5bGU9e3sgcGFkZGluZzogMCB9fT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXNbXCJ3aWRnaXQtbGFiZWxcIl19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPntwcm9wcy5MYWJlbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYnRuIFwiICsgc3R5bGVzW1wid2lkZ2l0LWNvbnRyb2xzXCJdfSB0aXRsZT0nV2lkZ2V0IFNldHRpbmdzJyBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUodHJ1ZSl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvZ1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgcmVmPXtyZWZ9PjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxXaWRnZXQgey4uLnByb3BzfSBSZWNvcmQ9e3JlY29yZH0gVG9nZ2xlPXt0b2dnbGV9IFNldFRvZ2dsZT17KGJvb2wpID0+IHNldFRvZ2dsZShib29sKX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dDxUcmVuREFQLmlUZW1wbGF0YWJsZVdpZGdldD4gRmllbGQ9J0xhYmVsJyBSZWNvcmQ9e3JlY29yZH0gVHlwZT0ndGV4dCcgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHIpKX0gVmFsaWQ9eyhmaWVsZCkgPT4gdHJ1ZX0gLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPldpZHRoPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e3JlY29yZD8uV2lkdGh9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRSZWNvcmQobmV3IFh2c1koeyAuLi5yZWNvcmQsIFdpZHRoOiBwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSB9KSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLW91dGxpbmUtc2Vjb25kYXJ5XCIgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9eyhldnQpID0+IHNldFJlY29yZChuZXcgWHZzWSh7IC4uLnJlY29yZCwgV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoIC0gMjAwIH0pKX0+RnVsbCBXaWR0aDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj57LypcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1pbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgdmFsdWU9e21vbWVudChyZWNvcmQuSlNPTi5UaW1lTWluKX0gb25DaGFuZ2U9eyh2YWx1ZSkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZC5VcGRhdGVKU09OKCdUaW1lTWluJywgbW9tZW50KHZhbHVlKS50b0RhdGUoKS5nZXRUaW1lKCkpKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPk1pbjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgdmFsdWU9e21vbWVudChyZWNvcmQuSlNPTi5UaW1lTWF4KX0gb25DaGFuZ2U9eyh2YWx1ZSkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZC5VcGRhdGVKU09OKCdUaW1lTWF4JywgbW9tZW50KHZhbHVlKS50b0RhdGUoKS5nZXRUaW1lKCkpKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0yXCIgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgYm90dG9tOiAxNiB9fSB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KCkgPT4gc2V0UmVjb3JkKHJlY29yZC5DYWxjdWxhdGVSYW5nZSgndGltZScpKX0+VXNlIERhdGE8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiovfVxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q2hlY2tCb3g8VHJlbkRBUC5pVGVtcGxhdGFibGVYdnNZPiBSZWNvcmQ9e3JlY29yZC5KU09OfSBGaWVsZD0nUmVncmVzc2lvbkxpbmUnIExhYmVsPSdBZGQgUmVncmVzc2lvbicgU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZC5VcGRhdGVKU09OKCdSZWdyZXNzaW9uTGluZScsIHIuUmVncmVzc2lvbkxpbmUpKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxici8+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQ8VHJlbkRBUC5pQXhpcz4gUmVjb3JkPXtyZWNvcmQuSlNPTi5YfSBGaWVsZD0nVW5pdHMnIExhYmVsPSdYIEF4aXMgVW5pdHMnIFZhbGlkPXsoKSA9PiB0cnVlfSBTZXR0ZXI9eyhyKSA9PiBzZXRSZWNvcmQocmVjb3JkLlNldEF4aXMoJ3gnLCAnVW5pdHMnLCByLlVuaXRzKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0PFRyZW5EQVAuaUF4aXM+IFJlY29yZD17cmVjb3JkLkpTT04uWX0gRmllbGQ9J1VuaXRzJyBMYWJlbD0nWSBBeGlzIFVuaXRzJyBWYWxpZD17KCkgPT4gdHJ1ZX0gU2V0dGVyPXsocikgPT4gc2V0UmVjb3JkKHJlY29yZC5TZXRBeGlzKCd5JywgJ1VuaXRzJywgci5Vbml0cykpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDY+U2VyaWVzPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYWNjb3JkaW9uXCIgc3R5bGU9e3sgb3ZlcmZsb3dZOiAnYXV0bycsIG1heEhlaWdodDogd2luZG93LmlubmVySGVpZ2h0IC0gMzAwLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCAvIDIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtyZWNvcmQuRGF0YS5tYXAoKGQsIGkpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PXtpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImNhcmQtbGlua1wiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiBocmVmPXtcIiNjb2xsYXBzZVwiICsgaX0+e2QuRGF0YVNvdXJjZS5OYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPXtcImNvbGxhcHNlXCIgKyBpfSBjbGFzc05hbWU9XCJjb2xsYXBzZSBzaG93XCIgZGF0YS1wYXJlbnQ9XCIjYWNjb3JkaW9uXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDY+WCBTZXJpZXM8L2g2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZXJpZXNTZWxlY3QgV2lkZ2V0PXtyZWNvcmR9IERhdGFTb3VyY2VJRD17ZC5EYXRhU291cmNlLklEfSBBeGlzPSdYJyBDYWxsYmFjaz17KCkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZCkpfSAgIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7KHJlY29yZC5KU09OLlguU2VyaWVzICE9IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPntHZXREYXR1bSgnWCcpPy5OYW1lID8/ICcnfTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWRkaXRpb25hbEluZm9YREEgSW5kZXg9e2l9IERhdGE9e0dldERhdHVtKCdYJyl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VyaWVzUGlja2VyIEF4aXM9J3gnIFNlcmllcz17cmVjb3JkLkpTT04uWC5TZXJpZXN9IFdpZGdldD17cmVjb3JkfSBDYWxsYmFjaz17KCkgPT4gc2V0UmVjb3JkKG5ldyBYdnNZKHJlY29yZCkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiA6IG51bGwpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PlkgU2VyaWVzPC9oNj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcmllc1NlbGVjdCBXaWRnZXQ9e3JlY29yZH0gRGF0YVNvdXJjZUlEPXtkLkRhdGFTb3VyY2UuSUR9IEF4aXM9J1knIENhbGxiYWNrPXsoKSA9PiBzZXRSZWNvcmQobmV3IFh2c1kocmVjb3JkKSl9ICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhyZWNvcmQuSlNPTi5ZLlNlcmllcyAhPSB1bmRlZmluZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLTNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57R2V0RGF0dW0oJ1knKT8uTmFtZSA/PyAnJ308L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFkZGl0aW9uYWxJbmZvWERBIEluZGV4PXtpfSBEYXRhPXtHZXREYXR1bSgnWScpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlcmllc1BpY2tlciBBeGlzPSd5JyBTZXJpZXM9e3JlY29yZC5KU09OLlkuU2VyaWVzfSBXaWRnZXQ9e3JlY29yZH0gQ2FsbGJhY2s9eygpID0+IHNldFJlY29yZChuZXcgWHZzWShyZWNvcmQpKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gOiBudWxsKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvV2lkZ2V0PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICk7XHJcblxyXG59XHJcblxyXG5jb25zdCBTZXJpZXNQaWNrZXIgPSAocHJvcHM6IHsgQXhpczogJ3gnfCd5JywgU2VyaWVzOiBUcmVuREFQLmlUZW1wbGF0ZVNlcmllcywgV2lkZ2V0OiBYdnNZLCBDYWxsYmFjazogKCkgPT4gdm9pZCB9KSA9PiB7XHJcbiAgICBjb25zdCBbdHlwZSwgc2V0VHlwZV0gPSBSZWFjdC51c2VTdGF0ZTxUcmVuREFQLmlYREFUcmVuZERhdGFQb2ludEZpZWxkPihwcm9wcy5TZXJpZXMuRmllbGQpO1xyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgcHJvcHMuV2lkZ2V0LlVwZGF0ZVNlcmllcyhwcm9wcy5BeGlzLCBcIkZpZWxkXCIsIHR5cGUpO1xyXG4gICAgICAgIHByb3BzLkNhbGxiYWNrKCk7XHJcbiAgICB9LCBbdHlwZV0pO1xyXG5cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbFwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImZvcm0tbGFiZWxcIj5GaWVsZDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXt0eXBlfSBvbkNoYW5nZT17KGV2dCkgPT4gc2V0VHlwZShldnQudGFyZ2V0LnZhbHVlIGFzIFRyZW5EQVAuaVhEQVRyZW5kRGF0YVBvaW50RmllbGQpfT5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiQXZlcmFnZVwiPkF2Zzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJNaW5pbXVtXCI+TWluPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk1heGltdW1cIj5NYXg8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtMVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLWxpbmtcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuV2lkZ2V0LlJlbW92ZVNlcmllcyhwcm9wcy5BeGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfX0+e0Nyb3NzTWFya308L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC8+XHJcblxyXG4gICAgKTtcclxufVxyXG5cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEVkaXRvci50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDMvMTIvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQLCBSZWR1eCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IFJvdyBmcm9tICcuL1Jvdyc7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgVXBkYXRlV29ya1NwYWNlIH0gZnJvbSAnLi8uLi9Xb3JrU3BhY2VzU2xpY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWRpdG9yKHByb3BzOiB7IFdvcmtTcGFjZTogVHJlbkRBUC5pV29ya1NwYWNlLCBEYXRhOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuW10gfSkge1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG4gICAgY29uc3Qgd29ya1NwYWNlSlNPTiA9IEpTT04ucGFyc2UocHJvcHMuV29ya1NwYWNlLkpTT05TdHJpbmcpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzW1widGFiLWNvbnRlbnRcIl19PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB3b3JrU3BhY2VKU09OLlJvd3MubWFwKChyb3csIGluZGV4KSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3cga2V5PXtpbmRleH0gV29ya1NwYWNlPXtwcm9wcy5Xb3JrU3BhY2V9IERhdGE9e3Byb3BzLkRhdGF9IFdpZGdldHM9e3Jvdy5XaWRnZXRzfSBIZWlnaHQ9e3Jvdy5IZWlnaHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZT17KHJlY29yZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSB7IC4uLndvcmtTcGFjZUpTT04gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93c1tpbmRleF0uSGVpZ2h0ID0gcmVjb3JkLkhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93c1tpbmRleF0uV2lkZ2V0cyA9IHJlY29yZC5XaWRnZXRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5Sb3dzW2luZGV4XS5Xb3JrU3BhY2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLlJvd3NbaW5kZXhdLkRhdGEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChVcGRhdGVXb3JrU3BhY2UoeyAuLi5wcm9wcy5Xb3JrU3BhY2UsIEpTT05TdHJpbmc6IEpTT04uc3RyaW5naWZ5KGpzb24pIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlUm93PXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IHsgLi4ud29ya1NwYWNlSlNPTiB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5Sb3dzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChVcGRhdGVXb3JrU3BhY2UoeyAuLi5wcm9wcy5Xb3JrU3BhY2UsIEpTT05TdHJpbmc6IEpTT04uc3RyaW5naWZ5KGpzb24pIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgTW92ZVVwPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCAtIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0geyAuLi53b3JrU3BhY2VKU09OIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0ganNvbi5Sb3dzW25ld0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSBqc29uLlJvd3NbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5Sb3dzW25ld0luZGV4XSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLlJvd3NbaW5kZXhdID0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFVwZGF0ZVdvcmtTcGFjZSh7IC4uLnByb3BzLldvcmtTcGFjZSwgSlNPTlN0cmluZzogSlNPTi5zdHJpbmdpZnkoanNvbikgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNb3ZlRG93bj17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSB7IC4uLndvcmtTcGFjZUpTT04gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBqc29uLlJvd3MubGVuZ3RoKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJbmRleCA9IGluZGV4ICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGpzb24uUm93c1tuZXdJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiID0ganNvbi5Sb3dzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93c1tuZXdJbmRleF0gPSBiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5Sb3dzW2luZGV4XSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChVcGRhdGVXb3JrU3BhY2UoeyAuLi5wcm9wcy5Xb3JrU3BhY2UsIEpTT05TdHJpbmc6IEpTT04uc3RyaW5naWZ5KGpzb24pIH0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgUm93LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMi8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQLCBSZWR1eCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IHsgQ3Jvc3NNYXJrLCBVcEFycm93LCBEb3duQXJyb3cgfSBmcm9tICdAZ3BhLWdlbXN0b25lL2dwYS1zeW1ib2xzJztcclxuaW1wb3J0IEhpc3RvZ3JhbSBmcm9tICcuLi8uLi9XaWRnZXRzL1JlZ3VsYXIvSGlzdG9ncmFtJztcclxuaW1wb3J0IFByb2ZpbGUgZnJvbSAnLi4vLi4vV2lkZ2V0cy9SZWd1bGFyL1Byb2ZpbGUnO1xyXG5pbXBvcnQgU3RhdHMgZnJvbSAnLi4vLi4vV2lkZ2V0cy9SZWd1bGFyL1N0YXRzJztcclxuaW1wb3J0IFRhYmxlIGZyb20gJy4uLy4uL1dpZGdldHMvUmVndWxhci9UYWJsZSc7XHJcbmltcG9ydCBUZXh0IGZyb20gJy4uLy4uL1dpZGdldHMvUmVndWxhci9UZXh0JztcclxuaW1wb3J0IFRyZW5kIGZyb20gJy4uLy4uL1dpZGdldHMvUmVndWxhci9UcmVuZC9UcmVuZCc7XHJcbmltcG9ydCBYdnNZIGZyb20gJy4uLy4uL1dpZGdldHMvUmVndWxhci9YdnNZJztcclxuaW1wb3J0IHsgQ3JlYXRlV2lkZ2V0IH0gZnJvbSAnLi4vLi4vV2lkZ2V0cy9SZWd1bGFyL0ltcGxlbWVudGF0aW9ucyc7XHJcbmNvbnN0IE5hdk1hcmdpbiA9IDg1O1xyXG5jb25zdCBOYXZXaWR0aCA9IDIwMDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJvdyhwcm9wczogVHJlbkRBUC5pUm93KSB7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW2hlaWdodCwgc2V0SGVpZ2h0XSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4ocHJvcHMuSGVpZ2h0KTtcclxuXHJcbiAgICBmdW5jdGlvbiBIYW5kbGVBZGRPYmplY3QodHlwZTogVHJlbkRBUC5XaWRnZXRUeXBlKSB7XHJcbiAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMsIFVwZGF0ZTogdW5kZWZpbmVkLCBXb3JrU3BhY2U6IHVuZGVmaW5lZCwgUmVtb3ZlUm93OiB1bmRlZmluZWQgfSBhcyBUcmVuREFQLmlSb3c7XHJcbiAgICAgICAgcm93LldpZGdldHMucHVzaChDcmVhdGVXaWRnZXQodHlwZSwgMTAwLCAod2luZG93LmlubmVyV2lkdGggLSBOYXZXaWR0aCkgLyAyKSlcclxuICAgICAgICBwcm9wcy5VcGRhdGUocm93KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiIHN0eWxlPXt7IGhlaWdodDogcHJvcHMuSGVpZ2h0LCBkaXNwbGF5OiAnZ3JpZCcgfX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZC1ib2R5XCIgc3R5bGU9e3sgcGFkZGluZzogMCwgekluZGV4OiAwIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3N0eWxlcy50cmlhbmdsZX1gfT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7c3R5bGVzW1wicm93LWNvbnRyb2xzXCJdfWB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiB0aXRsZT0nQWRkIE9iamVjdCcgZGF0YS10b2dnbGU9J2Ryb3Bkb3duJyBhcmlhLWhhc3BvcHVwPSd0cnVlJyBhcmlhLWV4cGFuZGVkPSdmYWxzZSc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtcGx1c1wiID48L2k+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17KCkgPT4gSGFuZGxlQWRkT2JqZWN0KCdIaXN0b2dyYW0nKX0+SGlzdG9ncmFtPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17KCkgPT4gSGFuZGxlQWRkT2JqZWN0KCdQcm9maWxlJyl9PlByb2ZpbGU8L2J1dHRvbj4qL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBvbkNsaWNrPXsoKSA9PiBIYW5kbGVBZGRPYmplY3QoJ1N0YXRzJyl9PlN0YXRzPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17KCkgPT4gSGFuZGxlQWRkT2JqZWN0KCdUYWJsZScpfT5UYWJsZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnVGV4dCcpfT5UZXh0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17KCkgPT4gSGFuZGxlQWRkT2JqZWN0KCdUcmVuZCcpfT5UcmVuZDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnWHZzWScpfT5YIHZzIFk8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiB0aXRsZT0nUmVtb3ZlIFJvdycgb25DbGljaz17KCkgPT4gcHJvcHMuUmVtb3ZlUm93KCl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLW1pbnVzXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIHRpdGxlPSdSb3cgU2V0dGluZ3MnIG9uQ2xpY2s9eygpID0+IHNldFRvZ2dsZSh0cnVlKX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtY29nXCI+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZ3JpZC1jb250YWluZXInIHN0eWxlPXt7IGRpc3BsYXk6ICdpbmxpbmUtZmxleCcgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgeyhwcm9wcy5XaWRnZXRzIGFzIGFueVtdKS5tYXAoKHdpZGdldCwgaW5kZXgpID0+IDxXaWRnZXQgey4uLntcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ud2lkZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIZWlnaHQ6IHByb3BzLkhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgV29ya1NwYWNlOiBwcm9wcy5Xb3JrU3BhY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERhdGE6IHByb3BzLkRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZTogKG5ld1JlY29yZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB3aWRnZXQgPSB7IC4uLm5ld1JlY29yZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkZ2V0LldvcmtTcGFjZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldC5EYXRhID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LldpZGdldHNbaW5kZXhdID0gd2lkZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuVXBkYXRlKHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5XaWRnZXRzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5VcGRhdGUocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH19IGtleT17aW5kZXh9IC8+KX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbFwiIHJvbGU9XCJkaWFsb2dcIiBzdHlsZT17eyBkaXNwbGF5OiB0b2dnbGUgPyAnYmxvY2snIDogJ25vbmUnLCBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuNCknIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2dcIiByb2xlPVwiZG9jdW1lbnRcIiBzdHlsZT17eyBtYXhXaWR0aDogNTI1IH19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT1cIm1vZGFsLXRpdGxlXCI+Um93IFNldHRpbmdzPC9oNT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImNsb3NlXCIgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKGZhbHNlKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+SGVpZ2h0PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiIHZhbHVlPXtoZWlnaHQgIT0gbnVsbCA/IGhlaWdodCA6IDB9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRIZWlnaHQocGFyc2VJbnQoZXZ0LnRhcmdldC52YWx1ZSkpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtZ3JvdXAtcHJlcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tb3V0bGluZS1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17KGV2dCkgPT4gc2V0SGVpZ2h0KHdpbmRvdy5pbm5lckhlaWdodCAtIE5hdk1hcmdpbil9PkZ1bGwgSGVpZ2h0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+V2lkZ2V0cyAoTWF4IFdpZHRoIDoge3dpbmRvdy5pbm5lcldpZHRoIC0gMjAwfSBweCwgV2lkdGggVXNlZDogeyhwcm9wcy5XaWRnZXRzLmxlbmd0aCA9PSAwID8gMCA6IChwcm9wcy5XaWRnZXRzIGFzIGFueVtdKS5tYXAodyA9PiB3LldpZHRoKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiKSl9cHgpPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J2xpc3QtZ3JvdXAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsocHJvcHMuV2lkZ2V0cyBhcyBhbnlbXSkubWFwKCh3aWRnZXQsIGkpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2xpc3QtZ3JvdXAtaXRlbScga2V5PXtpfT57d2lkZ2V0LkxhYmVsfSAtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncHVsbC1yaWdodCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPldpZHRoOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHZhbHVlPXt3aWRnZXQuV2lkdGh9IHR5cGU9J251bWJlcicgb25DaGFuZ2U9eyhldnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LldpZGdldHNbaV0uV2lkdGggPSBwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuVXBkYXRlKHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nYnRuIGJ0bi1saW5rJyBkaXNhYmxlZD17aSA8PSAwfSBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSB7IC4uLnByb3BzIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDw9IDApIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHJvdy5XaWRnZXRzW25ld0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IHJvdy5XaWRnZXRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuV2lkZ2V0c1tuZXdJbmRleF0gPSBiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuV2lkZ2V0c1tpXSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlVwZGF0ZShyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PntVcEFycm93fTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWxpbmsnIGRpc2FibGVkPXtpID49IHByb3BzLldpZGdldHMubGVuZ3RoIC0gMX0gb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0geyAuLi5wcm9wcyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSByb3cuV2lkZ2V0cy5sZW5ndGggLSAxKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSByb3cuV2lkZ2V0c1tuZXdJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGIgPSByb3cuV2lkZ2V0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LldpZGdldHNbbmV3SW5kZXhdID0gYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LldpZGdldHNbaV0gPSBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5VcGRhdGUocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT57RG93bkFycm93fTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWxpbmsnIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LldpZGdldHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5VcGRhdGUocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT57Q3Jvc3NNYXJrfTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLk1vdmVVcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5Nb3ZlIFJvdyBVcDwvYnV0dG9uPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5Nb3ZlRG93bigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5Nb3ZlIFJvdyBEb3duPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuVXBkYXRlKHsgLi4ucHJvcHMsIEhlaWdodDogaGVpZ2h0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5TYXZlIGNoYW5nZXM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tc2Vjb25kYXJ5XCIgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKGZhbHNlKX0+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59XHJcblxyXG5jb25zdCBXaWRnZXQ6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFRyZW5EQVAuaVdpZGdldD4gPSAocHJvcHMpID0+IHtcclxuICAgIGlmIChwcm9wcy5UeXBlID09ICdIaXN0b2dyYW0nKVxyXG4gICAgICAgIHJldHVybiA8SGlzdG9ncmFtIHsuLi5wcm9wc30gLz47XHJcbiAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09ICdQcm9maWxlJylcclxuICAgICAgICByZXR1cm4gPFByb2ZpbGUgey4uLnByb3BzfSAvPjtcclxuICAgIGVsc2UgaWYgKHByb3BzLlR5cGUgPT0gJ1N0YXRzJylcclxuICAgICAgICByZXR1cm4gPFN0YXRzIHsuLi5wcm9wc30gLz47XHJcbiAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09ICdUYWJsZScpXHJcbiAgICAgICAgcmV0dXJuIDxUYWJsZSB7Li4ucHJvcHN9IC8+O1xyXG4gICAgZWxzZSBpZiAocHJvcHMuVHlwZSA9PSAnVGV4dCcpXHJcbiAgICAgICAgcmV0dXJuIDxUZXh0IHsuLi5wcm9wc30gLz47XHJcbiAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09ICdUcmVuZCcpXHJcbiAgICAgICAgcmV0dXJuIDxUcmVuZCB7Li4ucHJvcHN9IC8+O1xyXG4gICAgZWxzZSBpZiAocHJvcHMuVHlwZSA9PSAnWHZzWScpXHJcbiAgICAgICAgcmV0dXJuIDxYdnNZIHsuLi5wcm9wc30gLz47XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIDxzcGFuPk5vdCBhIHdpZGdldC48L3NwYW4+O1xyXG59XHJcblxyXG5cclxuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuLy8gIEVkaXRvci50c3ggLSBHYnRjXHJcbi8vXHJcbi8vICBDb3B5cmlnaHQgwqkgMjAyMSwgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlLiAgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLy9cclxuLy8gIExpY2Vuc2VkIHRvIHRoZSBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UgKEdQQSkgdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWVcclxuLy8gIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC5cclxuLy8gIFRoZSBHUEEgbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHRoZSBcIkxpY2Vuc2VcIjsgeW91IG1heSBub3QgdXNlIHRoaXNcclxuLy8gIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OlxyXG4vL1xyXG4vLyAgICAgIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcclxuLy9cclxuLy8gIFVubGVzcyBhZ3JlZWQgdG8gaW4gd3JpdGluZywgdGhlIHN1YmplY3Qgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cclxuLy8gIFwiQVMtSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFJlZmVyIHRvIHRoZVxyXG4vLyAgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMuXHJcbi8vXHJcbi8vICBDb2RlIE1vZGlmaWNhdGlvbiBIaXN0b3J5OlxyXG4vLyAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyAgMDMvMTIvMjAyMSAtIEJpbGx5IEVybmVzdFxyXG4vLyAgICAgICBHZW5lcmF0ZWQgb3JpZ2luYWwgdmVyc2lvbiBvZiBzb3VyY2UgY29kZS5cclxuLy9cclxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQLCBSZWR1eCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbCc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vLi4vLi4vU3R5bGVzL2FwcC5zY3NzJztcclxuaW1wb3J0IFJvdyBmcm9tICcuL1Jvdyc7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgVXBkYXRlV29ya1NwYWNlIH0gZnJvbSAnLi8uLi9Xb3JrU3BhY2VzU2xpY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWRpdG9yKHByb3BzOiB7IFdvcmtTcGFjZTogVHJlbkRBUC5pV29ya1NwYWNlLCBEYXRhOiBUcmVuREFQLmlEYXRhU2V0UmV0dXJuPFRyZW5EQVAuaURhdGFTZXRSZXR1cm5UeXBlPltdIH0pIHtcclxuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICAgIGNvbnN0IHdvcmtTcGFjZUpTT046IFRyZW5EQVAuV29ya1NwYWNlSlNPTiA9IEpTT04ucGFyc2UocHJvcHMuV29ya1NwYWNlLkpTT05TdHJpbmcpO1xyXG4gICAgY29uc3QgW29wdGlvbnMsIHNldE9wdGlvbnNdID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcclxuXHJcbiAgICBjb25zdCBbc2VsZWN0aW9uLCBzZXRTZWxlY3Rpb25dID0gUmVhY3QudXNlU3RhdGU8c3RyaW5nPignJyk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAocHJvcHMuRGF0YT8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhU2V0ID0gcHJvcHMuRGF0YS5maW5kKGQgPT4gZC5EYXRhU291cmNlLlR5cGUgPT09IHdvcmtTcGFjZUpTT04uVHlwZSk/LkRhdGEgPz8gW107XHJcbiAgICAgICAgICAgIHNldE9wdGlvbnMoWy4uLm5ldyBTZXQoZGF0YVNldC5tYXAoZHMgPT4gZHNbd29ya1NwYWNlSlNPTi5CeV0pKV0uc29ydCgpKVxyXG4gICAgICAgIH1cclxuICAgIH0sIFtwcm9wcy5EYXRhLmxlbmd0aF0pXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlc1tcInRhYi1jb250ZW50XCJdfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jvdyc+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sJz5cclxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT0ncHVsbC1yaWdodCBmb3JtLWNvbnRyb2wnIHZhbHVlPXtzZWxlY3Rpb259IHN0eWxlPXt7IHdpZHRoOiAzMDAgfX0gb25DaGFuZ2U9eyhldnQpID0+IHNldFNlbGVjdGlvbihldnQudGFyZ2V0LnZhbHVlKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5tYXAoKG9wdGlvbixpICkgPT4gPG9wdGlvbiBrZXk9e2kgfSB2YWx1ZT17b3B0aW9ufT57b3B0aW9ufTwvb3B0aW9uPikgXHJcbiAgICAgICAgICAgICAgICAgICAgfTwvc2VsZWN0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J3B1bGwtcmlnaHQnIHN0eWxlPXt7IHBhZGRpbmc6IDcgfX0+e3dvcmtTcGFjZUpTT04uQnkgfTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAod29ya1NwYWNlSlNPTi5Sb3dzIGFzIFRyZW5EQVAuaVRlbXBsYXRhYmxlUm93W10pLm1hcCgocm93LCBpbmRleCkgPT5cclxuICAgICAgICAgICAgICAgICAgICA8Um93IGtleT17aW5kZXh9IFdvcmtTcGFjZT17cHJvcHMuV29ya1NwYWNlfSBEYXRhPXtwcm9wcy5EYXRhfSBXaWRnZXRzPXtyb3cuV2lkZ2V0c30gSGVpZ2h0PXtyb3cuSGVpZ2h0fSBCeT17d29ya1NwYWNlSlNPTi5CeX0gRGV2aWNlPXtzZWxlY3Rpb24gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGU9eyhyZWNvcmQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0geyAuLi53b3JrU3BhY2VKU09OIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLlJvd3NbaW5kZXhdLkhlaWdodCA9IHJlY29yZC5IZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLlJvd3NbaW5kZXhdLldpZGdldHMgPSByZWNvcmQuV2lkZ2V0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93c1tpbmRleF0uV29ya1NwYWNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5Sb3dzW2luZGV4XS5EYXRhID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goVXBkYXRlV29ya1NwYWNlKHsgLi4ucHJvcHMuV29ya1NwYWNlLCBKU09OU3RyaW5nOiBKU09OLnN0cmluZ2lmeShqc29uKSB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZVJvdz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGpzb24gPSB7IC4uLndvcmtTcGFjZUpTT04gfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goVXBkYXRlV29ya1NwYWNlKHsgLi4ucHJvcHMuV29ya1NwYWNlLCBKU09OU3RyaW5nOiBKU09OLnN0cmluZ2lmeShqc29uKSB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1vdmVVcD17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDw9IDApIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggLSAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbiA9IHsgLi4ud29ya1NwYWNlSlNPTiB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGpzb24uUm93c1tuZXdJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiID0ganNvbi5Sb3dzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93c1tuZXdJbmRleF0gPSBiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbi5Sb3dzW2luZGV4XSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChVcGRhdGVXb3JrU3BhY2UoeyAuLi5wcm9wcy5Xb3JrU3BhY2UsIEpTT05TdHJpbmc6IEpTT04uc3RyaW5naWZ5KGpzb24pIH0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgTW92ZURvd249eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBqc29uID0geyAuLi53b3JrU3BhY2VKU09OIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0ganNvbi5Sb3dzLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpbmRleCArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBqc29uLlJvd3NbbmV3SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IGpzb24uUm93c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uLlJvd3NbbmV3SW5kZXhdID0gYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb24uUm93c1tpbmRleF0gPSBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goVXBkYXRlV29ya1NwYWNlKHsgLi4ucHJvcHMuV29ya1NwYWNlLCBKU09OU3RyaW5nOiBKU09OLnN0cmluZ2lmeShqc29uKSB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9kaXY+XHJcbilcclxufVxyXG4iLCIvLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4vLyAgUm93LnRzeCAtIEdidGNcclxuLy9cclxuLy8gIENvcHlyaWdodCDCqSAyMDIxLCBHcmlkIFByb3RlY3Rpb24gQWxsaWFuY2UuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vL1xyXG4vLyAgTGljZW5zZWQgdG8gdGhlIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZSAoR1BBKSB1bmRlciBvbmUgb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuIFNlZVxyXG4vLyAgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLlxyXG4vLyAgVGhlIEdQQSBsaWNlbnNlcyB0aGlzIGZpbGUgdG8geW91IHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgdGhlIFwiTGljZW5zZVwiOyB5b3UgbWF5IG5vdCB1c2UgdGhpc1xyXG4vLyAgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQ6XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxyXG4vL1xyXG4vLyAgVW5sZXNzIGFncmVlZCB0byBpbiB3cml0aW5nLCB0aGUgc3ViamVjdCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxyXG4vLyAgXCJBUy1JU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gUmVmZXIgdG8gdGhlXHJcbi8vICBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucy5cclxuLy9cclxuLy8gIENvZGUgTW9kaWZpY2F0aW9uIEhpc3Rvcnk6XHJcbi8vICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vICAwMy8xMi8yMDIxIC0gQmlsbHkgRXJuZXN0XHJcbi8vICAgICAgIEdlbmVyYXRlZCBvcmlnaW5hbCB2ZXJzaW9uIG9mIHNvdXJjZSBjb2RlLlxyXG4vL1xyXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUcmVuREFQLCBSZWR1eCB9IGZyb20gJy4vLi4vLi4vLi4vZ2xvYmFsJztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgeyBDcm9zc01hcmssIFVwQXJyb3csIERvd25BcnJvdyB9IGZyb20gJ0BncGEtZ2Vtc3RvbmUvZ3BhLXN5bWJvbHMnO1xyXG5pbXBvcnQgSGlzdG9ncmFtIGZyb20gJy4uLy4uL1dpZGdldHMvVGVtcGxhdGFibGUvSGlzdG9ncmFtJztcclxuaW1wb3J0IFByb2ZpbGUgZnJvbSAnLi4vLi4vV2lkZ2V0cy9UZW1wbGF0YWJsZS9Qcm9maWxlJztcclxuaW1wb3J0IFN0YXRzIGZyb20gJy4uLy4uL1dpZGdldHMvVGVtcGxhdGFibGUvU3RhdHMnO1xyXG5pbXBvcnQgVGFibGUgZnJvbSAnLi4vLi4vV2lkZ2V0cy9UZW1wbGF0YWJsZS9UYWJsZSc7XHJcbmltcG9ydCBUZXh0IGZyb20gJy4uLy4uL1dpZGdldHMvVGVtcGxhdGFibGUvVGV4dCc7XHJcbmltcG9ydCBUcmVuZCBmcm9tICcuLi8uLi9XaWRnZXRzL1RlbXBsYXRhYmxlL1RyZW5kL1RyZW5kJztcclxuaW1wb3J0IFh2c1kgZnJvbSAnLi4vLi4vV2lkZ2V0cy9UZW1wbGF0YWJsZS9YdnNZJztcclxuaW1wb3J0IHsgQ3JlYXRlV2lkZ2V0IH0gZnJvbSAnLi4vLi4vV2lkZ2V0cy9UZW1wbGF0YWJsZS9JbXBsZW1lbnRhdGlvbnMnO1xyXG5jb25zdCBOYXZNYXJnaW4gPSA4NTtcclxuY29uc3QgTmF2V2lkdGggPSAyMDA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSb3cocHJvcHM6IFRyZW5EQVAuaVRlbXBsYXRhYmxlUm93KSB7XHJcbiAgICBjb25zdCBbdG9nZ2xlLCBzZXRUb2dnbGVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gICAgY29uc3QgW2hlaWdodCwgc2V0SGVpZ2h0XSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4ocHJvcHMuSGVpZ2h0KTtcclxuXHJcbiAgICBmdW5jdGlvbiBIYW5kbGVBZGRPYmplY3QodHlwZTogVHJlbkRBUC5XaWRnZXRUeXBlKSB7XHJcbiAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMsIFVwZGF0ZTogdW5kZWZpbmVkLCBXb3JrU3BhY2U6IHVuZGVmaW5lZCwgUmVtb3ZlUm93OiB1bmRlZmluZWQgfSBhcyBUcmVuREFQLmlUZW1wbGF0YWJsZVJvdztcclxuICAgICAgICByb3cuV2lkZ2V0cy5wdXNoKENyZWF0ZVdpZGdldCh0eXBlLCBwcm9wcy5CeSwgcHJvcHMuRGV2aWNlLCAxMDAsKHdpbmRvdy5pbm5lcldpZHRoIC0gTmF2V2lkdGgpIC8gMikpXHJcbiAgICAgICAgcHJvcHMuVXBkYXRlKHJvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmRcIiBzdHlsZT17eyBoZWlnaHQ6IHByb3BzLkhlaWdodCwgZGlzcGxheTogJ2dyaWQnIH19PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiIHN0eWxlPXt7IHBhZGRpbmc6IDAsIHpJbmRleDogMCB9fT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtzdHlsZXMudHJpYW5nbGV9YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake3N0eWxlc1tcInJvdy1jb250cm9sc1wiXX1gfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgdGl0bGU9J0FkZCBPYmplY3QnIGRhdGEtdG9nZ2xlPSdkcm9wZG93bicgYXJpYS1oYXNwb3B1cD0ndHJ1ZScgYXJpYS1leHBhbmRlZD0nZmFsc2UnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiA+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnSGlzdG9ncmFtJyl9Pkhpc3RvZ3JhbTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKjxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnUHJvZmlsZScpfT5Qcm9maWxlPC9idXR0b24+Ki99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17KCkgPT4gSGFuZGxlQWRkT2JqZWN0KCdTdGF0cycpfT5TdGF0czwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnVGFibGUnKX0+VGFibGU8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBvbkNsaWNrPXsoKSA9PiBIYW5kbGVBZGRPYmplY3QoJ1RleHQnKX0+VGV4dDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnVHJlbmQnKX0+VHJlbmQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBvbkNsaWNrPXsoKSA9PiBIYW5kbGVBZGRPYmplY3QoJ1h2c1knKX0+WCB2cyBZPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgdGl0bGU9J1JlbW92ZSBSb3cnIG9uQ2xpY2s9eygpID0+IHByb3BzLlJlbW92ZVJvdygpfT48aSBjbGFzc05hbWU9XCJmYSBmYS1taW51c1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiB0aXRsZT0nUm93IFNldHRpbmdzJyBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUodHJ1ZSl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvZ1wiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQtY29udGFpbmVyJyBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lLWZsZXgnIH19PlxyXG4gICAgICAgICAgICAgICAgICAgIHsocHJvcHMuV2lkZ2V0cyBhcyBhbnlbXSkubWFwKCh3aWRnZXQsIGluZGV4KSA9PiA8V2lkZ2V0IHsuLi57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLndpZGdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSGVpZ2h0OiBwcm9wcy5IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFdvcmtTcGFjZTogcHJvcHMuV29ya1NwYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEYXRhOiBwcm9wcy5EYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBCeTogcHJvcHMuQnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERldmljZTogcHJvcHMuRGV2aWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGU6IChuZXdSZWNvcmQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSB7IC4uLnByb3BzIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgd2lkZ2V0ID0geyAuLi5uZXdSZWNvcmQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZGdldC5Xb3JrU3BhY2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWRnZXQuRGF0YSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5XaWRnZXRzW2luZGV4XSA9IHdpZGdldCBhcyBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5VcGRhdGUocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0geyAuLi5wcm9wcyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LldpZGdldHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlVwZGF0ZShyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfX0ga2V5PXtpbmRleH0gLz4pfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCIgcm9sZT1cImRpYWxvZ1wiIHN0eWxlPXt7IGRpc3BsYXk6IHRvZ2dsZSA/ICdibG9jaycgOiAnbm9uZScsIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC40KScgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiIHN0eWxlPXt7IG1heFdpZHRoOiA1MjUgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibW9kYWwtdGl0bGVcIj5Sb3cgU2V0dGluZ3M8L2g1PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUoZmFsc2UpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5IZWlnaHQ8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIgdmFsdWU9e2hlaWdodCAhPSBudWxsID8gaGVpZ2h0IDogMH0gb25DaGFuZ2U9eyhldnQpID0+IHNldEhlaWdodChwYXJzZUludChldnQudGFyZ2V0LnZhbHVlKSl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbnB1dC1ncm91cC1wcmVwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuIGJ0bi1vdXRsaW5lLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoZXZ0KSA9PiBzZXRIZWlnaHQod2luZG93LmlubmVySGVpZ2h0IC0gTmF2TWFyZ2luKX0+RnVsbCBIZWlnaHQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5XaWRnZXRzIChNYXggV2lkdGggOiB7d2luZG93LmlubmVyV2lkdGggLSAyMDB9IHB4LCBXaWR0aCBVc2VkOiB7KHByb3BzLldpZGdldHMubGVuZ3RoID09IDAgPyAwIDogKHByb3BzLldpZGdldHMgYXMgYW55W10pLm1hcCh3ID0+IHcuV2lkdGgpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIpKX1weCk8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT0nbGlzdC1ncm91cCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhwcm9wcy5XaWRnZXRzIGFzIGFueVtdKS5tYXAoKHdpZGdldCwgaSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nbGlzdC1ncm91cC1pdGVtJyBrZXk9e2l9Pnt3aWRnZXQuTGFiZWx9IC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwdWxsLXJpZ2h0Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+V2lkdGg6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdmFsdWU9e3dpZGdldC5XaWR0aH0gdHlwZT0nbnVtYmVyJyBvbkNoYW5nZT17KGV2dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0geyAuLi5wcm9wcyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuV2lkZ2V0c1tpXS5XaWR0aCA9IHBhcnNlSW50KGV2dC50YXJnZXQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5VcGRhdGUocm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdidG4gYnRuLWxpbmsnIGRpc2FibGVkPXtpIDw9IDB9IG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IHsgLi4ucHJvcHMgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPD0gMCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJbmRleCA9IGkgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gcm93LldpZGdldHNbbmV3SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiID0gcm93LldpZGdldHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5XaWRnZXRzW25ld0luZGV4XSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5XaWRnZXRzW2ldID0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuVXBkYXRlKHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+e1VwQXJyb3d9PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tbGluaycgZGlzYWJsZWQ9e2kgPj0gcHJvcHMuV2lkZ2V0cy5sZW5ndGggLSAxfSBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSB7IC4uLnByb3BzIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID49IHJvdy5XaWRnZXRzLmxlbmd0aCAtIDEpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SW5kZXggPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHJvdy5XaWRnZXRzW25ld0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IHJvdy5XaWRnZXRzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuV2lkZ2V0c1tuZXdJbmRleF0gPSBiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuV2lkZ2V0c1tpXSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlVwZGF0ZShyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PntEb3duQXJyb3d9PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J2J0biBidG4tbGluaycgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0geyAuLi5wcm9wcyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuV2lkZ2V0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLlVwZGF0ZShyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PntDcm9zc01hcmt9PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtZm9vdGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9XCJidG4gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuTW92ZVVwKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VG9nZ2xlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19Pk1vdmUgUm93IFVwPC9idXR0b24+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLk1vdmVEb3duKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VG9nZ2xlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19Pk1vdmUgUm93IERvd248L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5VcGRhdGUoeyAuLi5wcm9wcywgSGVpZ2h0OiBoZWlnaHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VG9nZ2xlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19PlNhdmUgY2hhbmdlczwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUoZmFsc2UpfT5DbG9zZTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn1cclxuXHJcbmNvbnN0IFdpZGdldDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8VHJlbkRBUC5pVGVtcGxhdGFibGVXaWRnZXQ+ID0gKHByb3BzKSA9PiB7XHJcbiAgICBpZiAocHJvcHMuVHlwZSA9PSAnSGlzdG9ncmFtJylcclxuICAgICAgICByZXR1cm4gPEhpc3RvZ3JhbSB7Li4ucHJvcHN9IC8+O1xyXG4gICAgZWxzZSBpZiAocHJvcHMuVHlwZSA9PSAnUHJvZmlsZScpXHJcbiAgICAgICAgcmV0dXJuIDxQcm9maWxlIHsuLi5wcm9wc30gLz47XHJcbiAgICBlbHNlIGlmIChwcm9wcy5UeXBlID09ICdTdGF0cycpXHJcbiAgICAgICAgcmV0dXJuIDxTdGF0cyB7Li4ucHJvcHN9IC8+O1xyXG4gICAgZWxzZSBpZiAocHJvcHMuVHlwZSA9PSAnVGFibGUnKVxyXG4gICAgICAgIHJldHVybiA8VGFibGUgey4uLnByb3BzfSAvPjtcclxuICAgIGVsc2UgaWYgKHByb3BzLlR5cGUgPT0gJ1RleHQnKVxyXG4gICAgICAgIHJldHVybiA8VGV4dCB7Li4ucHJvcHN9IC8+O1xyXG4gICAgZWxzZSBpZiAocHJvcHMuVHlwZSA9PSAnVHJlbmQnKVxyXG4gICAgICAgIHJldHVybiA8VHJlbmQgey4uLnByb3BzfSAvPjtcclxuICAgIGVsc2UgaWYgKHByb3BzLlR5cGUgPT0gJ1h2c1knKVxyXG4gICAgICAgIHJldHVybiA8WHZzWSB7Li4ucHJvcHN9IC8+O1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiA8c3Bhbj5Ob3QgYSB3aWRnZXQuPC9zcGFuPjtcclxufVxyXG5cclxuXHJcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbi8vICBXb3JrU3BhY2VFZGl0b3IudHN4IC0gR2J0Y1xyXG4vL1xyXG4vLyAgQ29weXJpZ2h0IMKpIDIwMjAsIEdyaWQgUHJvdGVjdGlvbiBBbGxpYW5jZS4gIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vICBMaWNlbnNlZCB0byB0aGUgR3JpZCBQcm90ZWN0aW9uIEFsbGlhbmNlIChHUEEpIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlXHJcbi8vICB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuXHJcbi8vICBUaGUgR1BBIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCB0aGUgXCJMaWNlbnNlXCI7IHlvdSBtYXkgbm90IHVzZSB0aGlzXHJcbi8vICBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdDpcclxuLy9cclxuLy8gICAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXHJcbi8vXHJcbi8vICBVbmxlc3MgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHRoZSBzdWJqZWN0IHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXHJcbi8vICBcIkFTLUlTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBSZWZlciB0byB0aGVcclxuLy8gIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zLlxyXG4vL1xyXG4vLyAgQ29kZSBNb2RpZmljYXRpb24gSGlzdG9yeTpcclxuLy8gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gIDExLzEwLzIwMjAgLSBCaWxseSBFcm5lc3RcclxuLy8gICAgICAgR2VuZXJhdGVkIG9yaWdpbmFsIHZlcnNpb24gb2Ygc291cmNlIGNvZGUuXHJcbi8vXHJcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG5cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVHJlbkRBUCwgUmVkdXggfSBmcm9tICcuLi8uLi9nbG9iYWwnO1xyXG5cclxuaW1wb3J0IHsgdXNlUGFyYW1zLCBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuLi8uLi8uLi9TdHlsZXMvYXBwLnNjc3MnO1xyXG5pbXBvcnQgeyBTZWxlY3RXb3JrU3BhY2VCeUlELCBVcGRhdGVXb3JrU3BhY2UsIFNlbGVjdFdvcmtTcGFjZXNTdGF0dXMsIEZldGNoV29ya1NwYWNlcyB9IGZyb20gJy4vV29ya1NwYWNlc1NsaWNlJztcclxuaW1wb3J0IHsgU2VsZWN0RGF0YVNldHMsIEZldGNoRGF0YVNldHMsIFNlbGVjdERhdGFTZXRzU3RhdHVzLCBHZXREYXRhU2V0RGF0YUZyb21JREIsIFNlbGVjdERhdGFTZXRCeUlEIH0gZnJvbSAnLi4vRGF0YVNldHMvRGF0YVNldHNTbGljZSc7XHJcbmltcG9ydCBEYXRhU2V0RGF0YSBmcm9tICcuLi9EYXRhU2V0cy9EYXRhU2V0RGF0YSc7XHJcblxyXG5pbXBvcnQgeyBDcmVhdGVXaWRnZXQgYXMgQ3JlYXRlUmVndWxhcldpZGdldCB9IGZyb20gJy4vLi4vV2lkZ2V0cy9SZWd1bGFyL0ltcGxlbWVudGF0aW9ucyc7XHJcbmltcG9ydCB7IENyZWF0ZVdpZGdldCBhcyBDcmVhdGVUZW1wbGF0YWJsZVdpZGdldCB9IGZyb20gJy4vLi4vV2lkZ2V0cy9UZW1wbGF0YWJsZS9JbXBsZW1lbnRhdGlvbnMnO1xyXG5cclxuaW1wb3J0IFJlZ3VsYXJFZGl0b3IgZnJvbSAnLi9SZWd1bGFyL0VkaXRvcic7XHJcbmltcG9ydCBUZW1wbGF0YWJsZUVkaXRvciBmcm9tICcuL1RlbXBsYXRhYmxlL0VkaXRvcic7XHJcblxyXG5jb25zdCBOYXZNYXJnaW4gPSA4NTtcclxuY29uc3QgTmF2V2lkdGggPSAyMDA7XHJcblxyXG5jb25zdCBXb3JrU3BhY2VFZGl0b3I6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PHt9PiA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgW2RhdGEsIHNldERhdGFdID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5pRGF0YVNldFJldHVybjxUcmVuREFQLmlEYXRhU2V0UmV0dXJuVHlwZT5bXT4oW10pO1xyXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG4gICAgY29uc3QgeyBpZCB9ID0gdXNlUGFyYW1zPHsgaWQgfT4oKTtcclxuICAgIGNvbnN0IHdvcmtTcGFjZSA9IHVzZVNlbGVjdG9yKChzdGF0ZTogUmVkdXguU3RvcmVTdGF0ZSkgPT4gU2VsZWN0V29ya1NwYWNlQnlJRChzdGF0ZSwgcGFyc2VJbnQoaWQpKSk7XHJcbiAgICBjb25zdCBkYXRhU2V0ID0gdXNlU2VsZWN0b3IoKHN0YXRlOiBSZWR1eC5TdG9yZVN0YXRlKSA9PiBTZWxlY3REYXRhU2V0QnlJRChzdGF0ZSwgd29ya1NwYWNlPy5EYXRhU2V0SUQgPz8gMCkpO1xyXG4gICAgY29uc3Qgd3NTdGF0dXMgPSB1c2VTZWxlY3RvcihTZWxlY3RXb3JrU3BhY2VzU3RhdHVzKTtcclxuICAgIGNvbnN0IGRzU3RhdHVzID0gdXNlU2VsZWN0b3IoU2VsZWN0RGF0YVNldHNTdGF0dXMpO1xyXG4gICAgY29uc3QgW3dvcmtTcGFjZUpTT04sIHNldFdvcmtTcGFjZUpTT05dID0gUmVhY3QudXNlU3RhdGU8VHJlbkRBUC5Xb3JrU3BhY2VKU09OPih7IFJvd3M6IFtdLCBCeTogJ01ldGVyJyB9KTtcclxuICAgIGNvbnN0IFt0b2dnbGUsIHNldFRvZ2dsZV0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcblxyXG5cclxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHdvcmtTcGFjZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZSh3b3JrU3BhY2UuSlNPTlN0cmluZykgYXMgVHJlbkRBUC5Xb3JrU3BhY2VKU09OO1xyXG4gICAgICAgIHNldFdvcmtTcGFjZUpTT04oanNvbik7XHJcblxyXG4gICAgICAgIEdldERhdGFTZXREYXRhRnJvbUlEQih3b3JrU3BhY2UuRGF0YVNldElEKS50aGVuKGQgPT4ge1xyXG4gICAgICAgICAgICBzZXREYXRhKGQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0sIFt3b3JrU3BhY2VdKTtcclxuXHJcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICh3c1N0YXR1cyA9PSAndW5pdGlhdGVkJyB8fCB3c1N0YXR1cyA9PSAnY2hhbmdlZCcpXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKEZldGNoV29ya1NwYWNlcygpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9XHJcbiAgICB9LCBbZGlzcGF0Y2gsIHdzU3RhdHVzXSk7XHJcblxyXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoZHNTdGF0dXMgPT0gJ3VuaXRpYXRlZCcgIHx8IGRzU3RhdHVzID09PSAnY2hhbmdlZCcpXHJcbiAgICAgICAgICAgIGRpc3BhdGNoKEZldGNoRGF0YVNldHMoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2Rpc3BhdGNoLCBkc1N0YXR1c10pO1xyXG5cclxuICAgIGZ1bmN0aW9uIEhhbmRsZUFkZE9iamVjdCh0eXBlOiBUcmVuREFQLldpZGdldFR5cGUgfCAnUm93Jykge1xyXG4gICAgICAgIGlmICh0eXBlID09PSAnUm93Jykge1xyXG4gICAgICAgICAgICBkaXNwYXRjaChVcGRhdGVXb3JrU3BhY2UoeyAuLi53b3JrU3BhY2UsIEpTT05TdHJpbmc6IEpTT04uc3RyaW5naWZ5KHsgLi4ud29ya1NwYWNlSlNPTiwgUm93czogWy4uLndvcmtTcGFjZUpTT04uUm93cywgeyBIZWlnaHQ6IDUwMCwgV2lkZ2V0czogW10gfV0gfSkgfSkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgZGlzcGF0Y2goVXBkYXRlV29ya1NwYWNlKHtcclxuICAgICAgICAgICAgICAgIC4uLndvcmtTcGFjZSwgSlNPTlN0cmluZzogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLndvcmtTcGFjZUpTT04sIFJvd3M6IFsuLi53b3JrU3BhY2VKU09OLlJvd3MsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgLSBOYXZNYXJnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFdpZGdldHM6IFt3b3JrU3BhY2UuVHlwZSA9PT0gJ1JlZ3VsYXInID8gQ3JlYXRlUmVndWxhcldpZGdldCh0eXBlLCB3aW5kb3cuaW5uZXJIZWlnaHQgLSBOYXZNYXJnaW4sIHdpbmRvdy5pbm5lcldpZHRoIC0gTmF2V2lkdGgpIDogQ3JlYXRlVGVtcGxhdGFibGVXaWRnZXQodHlwZSwgd29ya1NwYWNlSlNPTi5CeSwgd29ya1NwYWNlSlNPTi5UeXBlLCB3aW5kb3cuaW5uZXJIZWlnaHQgLSBOYXZNYXJnaW4sIHdpbmRvdy5pbm5lcldpZHRoIC0gTmF2V2lkdGgpXVxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICB9KSB9KSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgaWYgKHdvcmtTcGFjZSA9PSB1bmRlZmluZWQpIHJldHVybiBudWxsO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNDIgfX0+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5uYXZiYXJidXR0b25zfT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3sgcGFkZGluZzogJzZweCAxMnB4JywgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+RGF0YSBTZXQ6IDxMaW5rIHRvPXtgJHtob21lUGF0aH1FZGl0RGF0YVNldC8ke2RhdGFTZXQ/LklEfWB9PntkYXRhU2V0Py5OYW1lfTwvTGluaz48RGF0YVNldERhdGEgey4uLmRhdGFTZXR9IC8+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgdGl0bGU9J0FkZCBPYmplY3QnIGRhdGEtdG9nZ2xlPSdkcm9wZG93bicgYXJpYS1oYXNwb3B1cD0ndHJ1ZScgYXJpYS1leHBhbmRlZD0nZmFsc2UnPjxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiA+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBvbkNsaWNrPXsoZSkgPT4gSGFuZGxlQWRkT2JqZWN0KCdSb3cnKX0+Um93PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLWRpdmlkZXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnSGlzdG9ncmFtJyl9Pkhpc3RvZ3JhbTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey8qPGJ1dHRvbiBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgb25DbGljaz17KCkgPT4gSGFuZGxlQWRkT2JqZWN0KCdQcm9maWxlJyl9PlByb2ZpbGU8L2J1dHRvbj4qL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnU3RhdHMnKX0+U3RhdHM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnVGFibGUnKX0+VGFibGU8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbVwiIG9uQ2xpY2s9eygpID0+IEhhbmRsZUFkZE9iamVjdCgnVGV4dCcpfT5UZXh0PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBvbkNsaWNrPXsoKSA9PiBIYW5kbGVBZGRPYmplY3QoJ1RyZW5kJyl9PlRyZW5kPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBvbkNsaWNrPXsoKSA9PiBIYW5kbGVBZGRPYmplY3QoJ1h2c1knKX0+WCB2cyBZPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIHRpdGxlPSdFeHBvcnQgQ3VycmVudCBEYXRhIFNldCcgZGF0YS10b2dnbGU9J2Ryb3Bkb3duJyBhcmlhLWhhc3BvcHVwPSd0cnVlJyBhcmlhLWV4cGFuZGVkPSdmYWxzZSc+PGkgY2xhc3NOYW1lPVwiZmEgZmEtZG93bmxvYWRcIiA+PC9pPjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duLW1lbnVcIiA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIj5QREY8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJkcm9wZG93bi1pdGVtXCIgaHJlZj1cIiNcIj5DU1Y8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgdGl0bGU9J1NhdmUgY3VycmVudCB3b3Jrc3BhY2UuLi4nIG9uQ2xpY2s9eyhlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goVXBkYXRlV29ya1NwYWNlKHsgLi4ud29ya1NwYWNlLCBKU09OU3RyaW5nOiBKU09OLnN0cmluZ2lmeSh3b3JrU3BhY2VKU09OKSB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtc2F2ZVwiPjwvaT48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIHRpdGxlPSdXb3Jrc3BhY2UgU2V0dGluZ3MnIG9uQ2xpY2s9eygpID0+IHNldFRvZ2dsZSh0cnVlKSB9PjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvZ1wiPjwvaT48L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3twYWRkaW5nOiAnNnB4IDEycHgnfX0+V29ya3NwYWNlOiB7d29ya1NwYWNlPy5OYW1lID8/ICcnfTwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgeyB3b3JrU3BhY2UuVHlwZSA9PT0gJ1JlZ3VsYXInID9cclxuICAgICAgICAgICAgICAgIDxSZWd1bGFyRWRpdG9yIFdvcmtTcGFjZT17d29ya1NwYWNlfSBEYXRhPXtkYXRhfSAvPiA6IFxyXG4gICAgICAgICAgICAgICAgPFRlbXBsYXRhYmxlRWRpdG9yIFdvcmtTcGFjZT17d29ya1NwYWNlfSBEYXRhPXtkYXRhfSAvPlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsXCIgcm9sZT1cImRpYWxvZ1wiIHN0eWxlPXt7IGRpc3BsYXk6IHRvZ2dsZSA/ICdibG9jaycgOiAnbm9uZScsIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC40KScgfX0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiIHN0eWxlPXt7IG1heFdpZHRoOiA1MjUgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwibW9kYWwtdGl0bGVcIj5Xb3Jrc3BhY2UgU2V0dGluZ3M8L2g1PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiY2xvc2VcIiBvbkNsaWNrPXsoKSA9PiBzZXRUb2dnbGUoZmFsc2UpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj4mdGltZXM7PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWJvZHlcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt3b3JrU3BhY2UuVHlwZSA9PT0gJ1RlbXBsYXRhYmxlJyA/IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VGVtcGxhdGUgVHlwZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPSdmb3JtLWNvbnRyb2wnIHZhbHVlPXt3b3JrU3BhY2VKU09OLlR5cGV9IG9uQ2hhbmdlPXsoZXZ0KSA9PiBzZXRXb3JrU3BhY2VKU09OKHsgLi4ud29ya1NwYWNlSlNPTiwgVHlwZTogZXZ0LnRhcmdldC52YWx1ZSBhcyBUcmVuREFQLkRhdGFTb3VyY2VUeXBlIH0pfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+IDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nVHJlbkRBUERCJz5UcmVuREFQREI8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J1NhcHBoaXJlJz5TYXBwaGlyZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nT3Blbkhpc3Rvcmlhbic+T3Blbkhpc3Rvcmlhbjwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VGVtcGxhdGUgQnk8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT0nZm9ybS1jb250cm9sJyB2YWx1ZT17d29ya1NwYWNlSlNPTi5CeX0gb25DaGFuZ2U9eyhldnQpID0+IHNldFdvcmtTcGFjZUpTT04oeyAuLi53b3JrU3BhY2VKU09OLCBCeTogZXZ0LnRhcmdldC52YWx1ZSBhcyBUcmVuREFQLlRlbXBsYXRlQnkgfSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0nJz4gPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdNZXRlcicgaGlkZGVuPXt3b3JrU3BhY2VKU09OLlR5cGUgIT09ICdUcmVuREFQREInIH0+TWV0ZXI8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J0Fzc2V0JyBoaWRkZW49e3dvcmtTcGFjZUpTT04uVHlwZSAhPT0gJ1RyZW5EQVBEQid9PkFzc2V0PC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdEZXZpY2UnIGhpZGRlbj17d29ya1NwYWNlSlNPTi5UeXBlICE9PSAnT3Blbkhpc3Rvcmlhbid9PkRldmljZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvPjogbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWZvb3RlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFVwZGF0ZVdvcmtTcGFjZSh7IC4uLndvcmtTcGFjZSwgSlNPTlN0cmluZzogSlNPTi5zdHJpbmdpZnkod29ya1NwYWNlSlNPTikgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRvZ2dsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT5TYXZlIGNoYW5nZXM8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tc2Vjb25kYXJ5XCIgb25DbGljaz17KCkgPT4gc2V0VG9nZ2xlKGZhbHNlKX0+Q2xvc2U8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgV29ya1NwYWNlRWRpdG9yOyJdLCJzb3VyY2VSb290IjoiIn0=