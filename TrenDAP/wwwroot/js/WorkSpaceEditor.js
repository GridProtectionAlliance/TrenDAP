(self["webpackChunktrendap"] = self["webpackChunktrendap"] || []).push([["WorkSpaceEditor"],{

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Histogram.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Histogram.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HistogramJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
//******************************************************************************************************
//  Histogram.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};









var SvgStyle = {
    fill: 'none',
    shapeRendering: 'crispEdges',
    userSelect: 'none',
    WebkitTouchCallout: 'none',
    WebkitUserSelect: 'none',
    KhtmlUserSelect: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none'
};
function HistogramJSX(props) {
    var _a;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _b[0], setToggle = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(props)), 2), record = _c[0], setRecord = _c[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
    }, [toggle, props.JSON]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { Height: props.Height })));
    }, [props.Height]);
    function Initialize(settings) {
        var _a, _b;
        var profile = settings.JSON.Series.map(function (series) { return series.Profile; }).reduce(function (prev, curr) { return prev || curr; }, false);
        var margin = { bottom: 50, left: 50, top: 40, right: (profile ? 70 : 20) };
        var svgHeight = record.Height - margin.top - margin.bottom;
        var extent = d3__WEBPACK_IMPORTED_MODULE_0__.extent([].concat.apply([], __spreadArray([], __read(settings.JSON.Series.map(function (series) { var _a, _b, _c, _d; return ((_d = (_c = ((_b = (_a = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (d) { return d.ID.toString() === series.ID; })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).map(function (d) { return d[series.Field]; }); })))));
        //// set the parameters for the histogram
        var histograms = ((_b = (_a = settings.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series) {
            var _a, _b, _c, _d;
            var dataSource = (_b = (_a = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var datum = (_d = (_c = dataSource.find(function (d) { return d.ID.toString() === series.ID; })) === null || _c === void 0 ? void 0 : _c.Data.map(function (d) { return d[series.Field]; })) !== null && _d !== void 0 ? _d : [];
            var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                .value(function (d) { return d; }) // I need to give the vector of value
                .domain(extent) // then the domain of the graphic
                .thresholds(settings.JSON.BinCount); // then the numbers of bins
            // And apply this function to data to get the bins
            return histogram(datum);
        });
        var yMax = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.length; }))));
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', settings.Height);
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([settings.JSON.Min, settings.JSON.Max]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (settings.Height - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (settings.Height - margin.bottom / 3) + ")")
            .text(record.JSON.Units);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([settings.Height - margin.top - margin.bottom, 0])
            .domain([0, yMax]); // d3.hist has to be called before the Y axis obviously
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + margin.left / 3 + ")")
            .style("text-anchor", "middle")
            .text("Counts");
        var binWidth = Math.max.apply(Math, __spreadArray([], __read(histograms.map(function (histogram) { return Math.max.apply(Math, __spreadArray([], __read(histogram.map(function (a) { return x(a.x1) - x(a.x0); })))); }))));
        //svg.selectAll("g.bins").remove();
        svg.selectAll("g.bins")
            .data(settings.JSON.Series)
            .enter()
            .append('g').attr('class', 'bins').attr("fill", function (series) { return series.Color; })
            .attr('transform', function (d, index) { return "translate(" + (margin.left + index * binWidth / settings.JSON.Series.length) + "," + margin.top + ")"; })
            //.attr("opacity", 0.3)
            .selectAll('rect')
            .data(function (series, index) { return histograms[index]; })
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function (d, i, g) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
            .attr("width", function (d) { return (x(d.x1) - x(d.x0) > 2 ? (x(d.x1) - x(d.x0)) / settings.JSON.Series.length : 2) - 1; })
            .attr("height", function (d) { return svgHeight - y(d.length); });
        if (profile) {
            var profiles = record.JSON.Series.filter(function (series) { return series.Profile; }).map(function (series, index) {
                var _a, _b, _c, _d;
                var dataSource = (_b = (_a = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
                var datum = (_d = (_c = dataSource.find(function (d) { return d.ID.toString() === series.ID; })) === null || _c === void 0 ? void 0 : _c.Data.map(function (d) { return d[series.Field]; })) !== null && _d !== void 0 ? _d : [];
                var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                    .value(function (d) { return d; }) // I need to give the vector of value
                    .domain(d3__WEBPACK_IMPORTED_MODULE_0__.extent(datum)) // then the domain of the graphic
                    .thresholds(settings.JSON.BinCount)(datum); // then the numbers of bins
                return { Color: series.ProfileColor, Profile: histogram.map((function (sum) { return function (value) { return sum += value.length; }; })(0)).map(function (prof, i) { return ({ Bin: histogram[i].x0, Value: prof }); }) };
            });
            //const profiles = histograms.map(hist => hist.map((sum => value => sum += value.length)(0)).map((prof, i) => ({ Bin: hist[i].x0, Value: prof })));
            var pyMax = Math.max.apply(Math, __spreadArray([], __read(profiles.map(function (pr) { return pr.Profile; }).reduce(function (prev, curr) { return prev.concat(curr); }, []).map(function (p) { return p.Value; }))));
            var py_1 = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
                .range([settings.Height - margin.top - margin.bottom, 0])
                .domain([0, pyMax]); // d3.hist has to be called before the Y axis obviously
            var pyAxis = svg.append("g")
                .attr("transform", "translate(" + (settings.Width - margin.right) + "," + margin.top + ")")
                .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(py_1));
            svg.append("text")
                .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + (settings.Width - margin.right / 3) + ")")
                .style("text-anchor", "middle")
                .text("Profile");
            //const filteredData = profile.find(ds => ds.ID === series.ID)?.Data ?? []).filter(ds => moment(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[field] >= axis.Min && ds[field] <= axis.Max)
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd.Bin); }).y(function (dd) { return py_1(dd.Value); });
            svg.append("path")
                .data(profiles)
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", function (d) { return d.Color; })
                .attr("d", function (d) { return lineFunc_1(d.Profile); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-4" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: (_a = record === null || record === void 0 ? void 0 : record.Width) !== null && _a !== void 0 ? _a : 0, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Units', Record: record.JSON, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'BinCount', Label: 'Bins', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Min', Label: 'Min', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(__assign(__assign({}, record), { JSON: r })); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Max', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(__assign(__assign({}, record), { JSON: r })); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateAxisRange()); } }, "Use Data")))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" },
                                    (d.DataSource.Type === 'TrenDAPDB' ? ((_b = (_a = record.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                        if (datum === undefined)
                                            return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum, Index: i })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null),
                                    (d.DataSource.Type === 'OpenHistorian' ? ((_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Series) !== null && _d !== void 0 ? _d : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                        if (datum === undefined)
                                            return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum.Device + ' - ' + datum.Description),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null)))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Color), 2), color = _a[0], setColor = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _b[0], setType = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Profile), 2), profile = _c[0], setProfile = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.ProfileColor), 2), pColor = _d[0], setPColor = _d[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Color", color)); }, [color]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Field", type)); }, [type]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Profile", profile)); }, [profile]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "ProfileColor", pColor)); }, [pColor]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "checkbox", className: "form-control", style: { width: 20 }, value: profile === null || profile === void 0 ? void 0 : profile.toString(), checked: profile, onChange: function (evt) { return setProfile(evt.target.checked); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: pColor, onChange: function (evt) { return setPColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () { return props.Callback(props.Widget.RemoveSeries(props.Index)); } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_7__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts":
/*!************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Widget": () => (/* binding */ Widget),
/* harmony export */   "Histogram": () => (/* binding */ Histogram),
/* harmony export */   "Trend": () => (/* binding */ Trend),
/* harmony export */   "Stats": () => (/* binding */ Stats),
/* harmony export */   "Table": () => (/* binding */ Table),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "XvsY": () => (/* binding */ XvsY),
/* harmony export */   "CreateWidget": () => (/* binding */ CreateWidget)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/helper-functions */ "./node_modules/@gpa-gemstone/helper-functions/lib/index.js");
/* harmony import */ var stats_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stats-lite */ "./node_modules/stats-lite/stats.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "./node_modules/console-browserify/index.js");
//******************************************************************************************************
//  Implementations.ts - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/27/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};



var Widget = /** @class */ (function () {
    function Widget(props) {
        var _this = this;
        this.SetLabel = function (label) {
            _this.Label = label;
        };
        this.SetHeight = function (height) { return _this.Height = height; };
        this.SetWidth = function (width) { return _this.Width = width; };
        this.SetJSON = function (json) { return _this.JSON = json; };
        this.AvailableSeries = function () { return _this.Data.map(function (dd) { return (__assign(__assign({}, dd), { DataSourceID: dd.DataSource.ID, DataSource: dd.DataSource })).Data.map(function (ddd) { return (__assign(__assign({}, ddd), { Data: [], DataSource: dd.DataSource.Name, DataSourceID: dd.DataSource.ID })); }); }).reduce(function (acc, val) { return acc.concat(val); }, []); };
        this.UpdateJSON = function (field, value) {
            _this.JSON[field] = value;
            return _this;
        };
        this.Height = props.Height;
        this.Width = props.Width;
        this.Type = props.Type;
        this.Label = props.Label;
        this.JSON = props.JSON;
        if (props.Data == undefined)
            this.Data = [];
        else
            this.Data = props.Data;
    }
    return Widget;
}());

var Histogram = /** @class */ (function (_super) {
    __extends(Histogram, _super);
    function Histogram(props) {
        var _this = _super.call(this, props) || this;
        _this.AddSeries = function (id, dataSourceID, label) {
            _this.JSON.Series.push({ ID: id.toString(), DataSourceID: dataSourceID, Field: "Average", Color: GetColor(), Profile: false, ProfileColor: GetColor(label) });
            return new Histogram(_this);
        };
        _this.RemoveSeries = function (index) {
            _this.JSON.Series.splice(index, 1);
            return new Histogram(_this);
        };
        _this.UpdateSeries = function (index, field, value) {
            _this.JSON.Series[index][field] = value;
            return new Histogram(_this);
        };
        _this.CalculateAxisRange = function () {
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() === series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
            var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
            _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
            _this.JSON.Max = _this.JSON.Max + buffer;
            _this.JSON.Min = _this.JSON.Min - buffer;
            return new Histogram(_this);
        };
        _this.Type = "Histogram";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Units: '', Series: [], BinCount: 10 };
        return _this;
    }
    return Histogram;
}(Widget));

var Trend = /** @class */ (function (_super) {
    __extends(Trend, _super);
    function Trend(props) {
        var _this = _super.call(this, props) || this;
        _this.AddAxis = function () { return _this.JSON.YAxis.push({ Max: 10, Min: 0, Position: 'left', Units: '' }); };
        _this.RemoveAxis = function (index) {
            if (_this.JSON.YAxis.length == 1)
                return;
            _this.JSON.YAxis.splice(index, 1);
            _this.JSON.Series.forEach(function (series) {
                if (series.Axis >= index)
                    series.Axis = (index > 0 ? series.Axis - 1 : 0);
            });
        };
        _this.UpdateAxis = function (index, field, value) { _this.JSON.YAxis[index][field] = value; };
        _this.CalculateAxisRange = function (type, index) {
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            if (type === 'x') {
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() == series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return moment__WEBPACK_IMPORTED_MODULE_2___default()(d.Timestamp).toDate().getTime(); }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            }
            else {
                if (index == undefined) {
                    var _loop_1 = function (index_1) {
                        var ss = _this.JSON.Series.filter(function (series) { return series.Axis === index_1; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() == series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                        var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                        _this.JSON.YAxis[index_1]['Max'] = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                        _this.JSON.YAxis[index_1]['Min'] = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                        var buffer = (_this.JSON.YAxis[index_1]['Max'] - _this.JSON.YAxis[index_1]['Min']) * .10;
                        _this.JSON.YAxis[index_1]['Max'] = _this.JSON.YAxis[index_1]['Max'] + buffer;
                        _this.JSON.YAxis[index_1]['Min'] = _this.JSON.YAxis[index_1]['Min'] - buffer;
                    };
                    for (var index_1 = 0; index_1 < _this.JSON.YAxis.length; index_1++) {
                        _loop_1(index_1);
                    }
                }
                else {
                    var ss = _this.JSON.Series.filter(function (series) { return series.Axis === index; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d.ID.toString() == series.ID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                    var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                    _this.JSON.YAxis[index]['Max'] = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                    _this.JSON.YAxis[index]['Min'] = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                    var buffer = (_this.JSON.YAxis[index]['Max'] - _this.JSON.YAxis[index]['Min']) * .10;
                    _this.JSON.YAxis[index]['Max'] = _this.JSON.YAxis[index]['Max'] + buffer;
                    _this.JSON.YAxis[index]['Min'] = _this.JSON.YAxis[index]['Min'] - buffer;
                }
            }
            return new Trend(_this);
        };
        _this.AddSeries = function (id, dataSourceID, label) {
            if (_this.JSON.Series.find(function (series) { return series.ID === id.toString() && series.DataSourceID === dataSourceID; }) !== undefined)
                return;
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            var series = dd.find(function (d) { return d.ID.toString() === id.toString(); });
            console.log(series);
            var axisIndex = _this.JSON.YAxis.findIndex(function (a) { return a.Units === series.Unit; });
            if (axisIndex === -1) {
                axisIndex = _this.JSON.YAxis.push({ Units: series.Unit, Min: 0, Max: 100, Position: 'left' }) - 1;
            }
            _this.JSON.Series.push({ ID: id.toString(), DataSourceID: dataSourceID, Axis: axisIndex, Field: "Average", Color: GetColor(label), Label: label, ShowEvents: false });
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddVoltageRMS = function (dataSourceID) {
            var _a;
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'V'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'V', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            (_a = _this.JSON.Series).push.apply(_a, __spreadArray([], __read(_this.Data.find(function (datum) { return datum.DataSource.ID === dataSourceID; }).Data.filter(function (datum) { return datum.Type === 'Voltage' && datum.Characteristic === 'RMS'; }).map(function (datum) { return ({ ID: datum.ID.toString(), DataSourceID: dataSourceID, Axis: axis, Field: 'Average', Color: GetColor("V" + datum.Phase + " - " + datum.Meter), Label: datum.Name, ShowEvents: false }); }))));
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddCurrentRMS = function (dataSourceID) {
            var _a;
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'A'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'A', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            (_a = _this.JSON.Series).push.apply(_a, __spreadArray([], __read(_this.Data.find(function (datum) { return datum.DataSource.ID === dataSourceID; }).Data.filter(function (datum) { return datum.Type === 'Current' && datum.Characteristic === 'RMS'; }).map(function (datum) { return ({ ID: datum.ID.toString(), DataSourceID: dataSourceID, Axis: axis, Field: 'Average', Color: GetColor("I" + datum.Phase + " - " + datum.Meter), Label: datum.Name, ShowEvents: false }); }))));
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.RemoveSeries = function (index) { return _this.JSON.Series.splice(index, 1); };
        _this.RemoveAll = function (dataSourceID) {
            _this.JSON.Series = _this.JSON.Series.filter(function (series) { return series.DataSourceID != dataSourceID; });
            return new Trend(_this);
        };
        _this.UpdateSeries = function (index, field, value) { _this.JSON.Series[index][field] = value; };
        _this.Pan = function (value) {
            _this.JSON.Max = _this.JSON.Max + value;
            _this.JSON.Min = _this.JSON.Min + value;
            return new Trend(_this);
        };
        _this.Type = "Trend";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Legend: false, Split: false, SplitType: 'Axis', YAxis: [{ Max: 10, Min: 0, Position: 'left', Units: '' }], Series: [] };
        return _this;
    }
    return Trend;
}(Widget));

//export class Profile extends Widget<TrenDAP.iProfile> {
//    constructor(height: number, width: number, json?: TrenDAP.iTrend) {
//        super("Profile", height, width, json);
//        if (json === undefined)
//            this.JSON = {  };
//    }
//}
var Stats = /** @class */ (function (_super) {
    __extends(Stats, _super);
    function Stats(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeries = function (id, dsID) { return _this.JSON.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        _this.Stats = function () {
            var _a, _b, _c, _d;
            var series = _this.JSON.Series;
            if (series == null)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            var dataSourceData = (_b = (_a = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var dataSeries = (_d = (_c = dataSourceData.find(function (d) { return d.ID.toString() === series.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
            var data = dataSeries.map(function (d) { return d[series.Field]; });
            if (data.length == 0)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            return {
                Mean: stats_lite__WEBPACK_IMPORTED_MODULE_1__.mean(data).toFixed(_this.JSON.Precision),
                Median: stats_lite__WEBPACK_IMPORTED_MODULE_1__.median(data).toFixed(_this.JSON.Precision),
                //Mode: stats.mode(data)/*.toPrecision(this.JSON.Precision)*/,
                Variance: stats_lite__WEBPACK_IMPORTED_MODULE_1__.variance(data).toFixed(_this.JSON.Precision),
                StdDev: stats_lite__WEBPACK_IMPORTED_MODULE_1__.stdev(data).toFixed(_this.JSON.Precision),
                Percentile: {
                    10: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.10).toFixed(_this.JSON.Precision),
                    25: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.25).toFixed(_this.JSON.Precision),
                    50: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.50).toFixed(_this.JSON.Precision),
                    75: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.75).toFixed(_this.JSON.Precision),
                    90: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.90).toFixed(_this.JSON.Precision),
                }
            };
        };
        _this.Type = "Stats";
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Stats;
}(Widget));

var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeries = function (id, dsID) { return _this.JSON.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Table;
}(Widget));

var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(props) {
        var _this = _super.call(this, props) || this;
        if (_this.JSON === undefined)
            _this.JSON = { Text: '' };
        return _this;
    }
    return Text;
}(Widget));

var XvsY = /** @class */ (function (_super) {
    __extends(XvsY, _super);
    function XvsY(props) {
        var _this = _super.call(this, props) || this;
        _this.CalculateRange = function (type) {
            var _a, _b, _c, _d, _e, _f;
            if (type === 'x') {
                var dd = (_b = (_a = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === _this.JSON.X.Series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
                var ss = dd.find(function (d) { return d.ID.toString() === _this.JSON.X.Series.ID.toString(); }).Data.map(function (d) { return d[_this.JSON.X.Series.Field]; });
                _this.JSON.X.Max = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.X.Min = Math.min.apply(Math, __spreadArray([], __read(ss)));
                var buffer = (_this.JSON.X.Max - _this.JSON.X.Min) * .10;
                _this.JSON.X.Max = _this.JSON.X.Max + buffer;
                _this.JSON.X.Min = _this.JSON.X.Min - buffer;
            }
            else if (type === 'y') {
                var dd = (_d = (_c = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === _this.JSON.Y.Series.DataSourceID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
                var ss = dd.find(function (d) { return d.ID.toString() === _this.JSON.Y.Series.ID.toString(); }).Data.map(function (d) { return d[_this.JSON.Y.Series.Field]; });
                _this.JSON.Y.Max = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.Y.Min = Math.min.apply(Math, __spreadArray([], __read(ss)));
                var buffer = (_this.JSON.Y.Max - _this.JSON.Y.Min) * .10;
                _this.JSON.Y.Max = _this.JSON.Y.Max + buffer;
                _this.JSON.Y.Min = _this.JSON.Y.Min - buffer;
            }
            else {
                var dd = (_f = (_e = _this.Data.find(function (ds) { return ds.DataSource.ID.toString() === _this.JSON.X.Series.DataSourceID.toString(); })) === null || _e === void 0 ? void 0 : _e.Data) !== null && _f !== void 0 ? _f : [];
                var ss = dd.find(function (d) { return d.ID.toString() === _this.JSON.X.Series.ID.toString(); }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                _this.JSON.TimeMax = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.TimeMin = Math.min.apply(Math, __spreadArray([], __read(ss)));
            }
            return new XvsY(_this);
        };
        _this.SetAxis = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X[field] = value;
            else
                _this.JSON.Y[field] = value;
            return new XvsY(_this);
        };
        _this.SetSeries = function (axis, id, dsID) {
            if (axis === 'x')
                _this.JSON.X.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' };
            else
                _this.JSON.Y.Series = { ID: id.toString(), DataSourceID: dsID, Field: 'Average' };
            return new XvsY(_this);
        };
        _this.UpdateSeries = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X.Series[field] = value;
            else
                _this.JSON.Y.Series[field] = value;
            return new XvsY(_this);
        };
        _this.RemoveSeries = function (axis) {
            if (axis === 'x')
                _this.JSON.X.Series = null;
            else
                _this.JSON.Y.Series = null;
            return new XvsY(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = {
                Y: { Min: 0, Max: 100, Units: '', Series: null },
                X: { Min: 0, Max: 100, Units: '', Series: null },
                TimeMin: null, TimeMax: null, RegressionLine: false
            };
        if (_this.JSON.X == undefined)
            _this.JSON.X = { Min: 0, Max: 100, Units: '', Series: null };
        if (_this.JSON.Y == undefined)
            _this.JSON.Y = { Min: 0, Max: 100, Units: '', Series: null };
        return _this;
    }
    return XvsY;
}(Widget));

function CreateWidget(type, height, width) {
    if (type == 'Histogram')
        return new Histogram({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    //else if (type == 'Profile')
    //    return new Profile(height, width);
    else if (type == 'Stats')
        return new Stats({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    else if (type == 'Table')
        return new Table({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    else if (type == 'Text')
        return new Text({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    else if (type == 'Trend')
        return new Trend({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
    if (type == 'XvsY')
        return new XvsY({ Height: height, Width: width, Label: type, Type: type, JSON: undefined });
}
function GetColor(label) {
    if (label == undefined)
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
    else if (label.indexOf('Voltage A') >= 0)
        return '#A30000';
    else if (label.indexOf('Voltage B') >= 0)
        return '#0029A3';
    else if (label.indexOf('Voltage C') >= 0)
        return '#007A29';
    else if (label.indexOf('Voltage N') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('Current A') >= 0)
        return '#FF0000';
    else if (label.indexOf('Current B') >= 0)
        return '#0066CC';
    else if (label.indexOf('Current C') >= 0)
        return '#33CC33';
    else if (label.indexOf('AN') >= 0)
        return '#FF0000';
    else if (label.indexOf('BN') >= 0)
        return '#0066CC';
    else if (label.indexOf('CN') >= 0)
        return '#33CC33';
    else if (label.indexOf('NG') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('RES') >= 0)
        return '#ffc107';
    else if (label.indexOf('Average') >= 0)
        return '#9A52A4';
    else if (label.indexOf('Total') >= 0)
        return '#9A52A4';
    else if (label.indexOf('S0') >= 0)
        return '#A30000';
    else if (label.indexOf('S2') >= 0)
        return '#007A29';
    else if (label.indexOf('S1') >= 0)
        return '#0029A3';
    else
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Profile.tsx":
/*!*****************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Profile.tsx ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Profile)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  Widgit.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function Profile(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "Profile");
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Stats.tsx":
/*!***************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Stats.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StatsJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Stats.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};







function StatsJSX(props) {
    var _a, _b;
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _c[0], setToggle = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(props)), 2), record = _d[0], setRecord = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    var stats = record.Stats();
    var dataSource = (_b = (_a = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID.toString())) !== null && _b !== void 0 ? _b : 0; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
    var datum = dataSource.find(function (dd) { var _a, _b; return (_b = dd.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.ID.toString())) !== null && _b !== void 0 ? _b : 0; });
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { className: 'table' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("thead", null,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", null,
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Category"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Statistic"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", null, Object.keys(stats).map(function (key) {
                    if (key !== 'Percentile')
                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, key),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats[key]));
                    else
                        return Object.keys(stats.Percentile).map(function (pkey) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key + pkey },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null,
                                    pkey,
                                    "th Percentile"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats.Percentile[pkey]));
                        });
                })))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_6__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_a = datum) === null || _a === void 0 ? void 0 : _a.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__.default, { Index: i, Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = datum) === null || _b === void 0 ? void 0 : _b.Description),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Table.tsx":
/*!***************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Table.tsx ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TableJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/react-table */ "./node_modules/@gpa-gemstone/react-table/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_8__);
//******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};









function TableJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(props)), 2), record = _b[0], setRecord = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState('Timestamp'), 2), sortField = _c[0], setSortField = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(true), 2), ascending = _d[0], setAscending = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), data = _e[0], setData = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({}), 2), info = _f[0], setInfo = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a, _b;
        var dataSource = (_b = (_a = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID.toString())) !== null && _b !== void 0 ? _b : 0; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
        var datum = dataSource.find(function (dd) { var _a, _b; return (_b = dd.ID.toString() === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.ID.toString())) !== null && _b !== void 0 ? _b : 0; });
        if (datum == undefined)
            setInfo({});
        else
            setInfo(datum);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a;
        var ordered = lodash__WEBPACK_IMPORTED_MODULE_8___default().orderBy((_a = info === null || info === void 0 ? void 0 : info.Data) !== null && _a !== void 0 ? _a : [], [sortField], [ascending ? 'asc' : 'desc']);
        setData(ordered);
    }, [ascending, sortField, info]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__.default, { tableClass: 'table', cols: [
                    { key: 'Timestamp', field: 'Timestamp', label: 'Timestamp' },
                    { key: 'Minimum', field: 'Minimum', label: 'Min', content: function (item, key, style) { return item.Minimum.toFixed(record.JSON.Precision); } },
                    { key: 'Average', field: 'Average', label: 'Avg', content: function (item, key, style) { return item.Average.toFixed(record.JSON.Precision); } },
                    { key: 'Maximum', field: 'Maximum', label: 'Max', content: function (item, key, style) { return item.Maximum.toFixed(record.JSON.Precision); } },
                ], data: data, sortKey: sortField, onClick: function (data) { }, ascending: ascending, onSort: function (data) {
                    if (data.colField === sortField)
                        setAscending(!ascending);
                    else {
                        setSortField(data.colField);
                        setAscending(true);
                    }
                } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = (_a = info) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: record.JSON.Series.ID, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_d = (_c = info) === null || _c === void 0 ? void 0 : _c.Description) !== null && _d !== void 0 ? _d : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Text.tsx":
/*!**************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Text.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Text.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function TextJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(props)), 2), record = _b[0], setRecord = _b[1];
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { style: { position: 'relative', top: 30 } }, props.JSON.Text)),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.TextArea, { Record: record.JSON, Field: "Text", Rows: 10, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { JSON: __assign({}, r) }))); }, Valid: function (field) { return true; } })))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Axis.tsx":
/*!********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Axis.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Axis)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
//******************************************************************************************************
//  Axis.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function Axis(props) {
    var firstRender = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        firstRender.current = false;
    }, []);
    //const [bins, setBins] = React.useState<number>(props.Series?.BinCount ?? 10);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Units), 2), units = _a[0], setUnits = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Position), 2), position = _b[0], setPosition = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Min), 2), min = _c[0], setMin = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Max), 2), max = _d[0], setMax = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Units", units);
            props.Callback();
        }
    }, [units]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Position", position);
            props.Callback();
        }
    }, [position]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Max", max);
            props.Callback();
        }
    }, [max]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Min", min);
            props.Callback();
        }
    }, [min]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Position"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: position, onChange: function (evt) { return setPosition(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "left" }, "Left"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "right" }, "Right"))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Units', Record: props.Axis, Type: 'text', Setter: function (r) { return setUnits(r.Units); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Min', Label: 'Min', Record: props.Axis, Type: 'number', Setter: function (r) { return setMin(r.Min); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Max', Record: props.Axis, Type: 'number', Setter: function (r) { return setMax(r.Max); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2", style: { position: 'relative' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () {
                    props.Widget.CalculateAxisRange('y', props.Index);
                    props.Callback();
                } }, "Use Data")),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", style: { top: 30 }, onClick: function () {
                    props.Widget.RemoveAxis(props.Index);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/SeriesPicker.tsx":
/*!****************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Trend/SeriesPicker.tsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesPicker)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
//******************************************************************************************************
//  SeriesPicker.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};






function SeriesPicker(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Axis), 2), axis = _a[0], setAxis = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Color), 2), color = _b[0], setColor = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Field), 2), type = _c[0], setType = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.ShowEvents), 2), showEvents = _d[0], setShowEvents = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Color", color);
        props.Callback();
    }, [color]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Field", type);
        props.Callback();
    }, [type]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "ShowEvents", showEvents);
        props.Callback();
    }, [showEvents]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Axis", axis);
        props.Widget.CalculateAxisRange('y');
        props.Widget.CalculateAxisRange('x');
        props.Callback();
    }, [axis]);
    function ShowAdditionInfo() {
        if (props.Type === 'TrenDAPDB')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__.default, { Index: props.Index, Data: props.Data });
        else if (props.Type === 'OpenHistorian')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__.default, { Data: props.Data });
        return null;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, props.Series.Label),
                ShowAdditionInfo()),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "YAxis"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: axis, onChange: function (evt) { return setAxis(parseInt(evt.target.value)); } }, props.Widget.JSON.YAxis.map(function (axis, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: index, key: index }, axis.Units); }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Color"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", onClick: function () {
                        props.Widget.RemoveSeries(props.Index);
                        props.Callback();
                    } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_4__.CrossMark))),
        (props.Type === 'TrenDAPDB' && props.Data.Events.length > 0 ?
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.CheckBox, { Record: props.Series, Field: 'ShowEvents', Label: 'Show Events', Setter: function (r) { return setShowEvents(!showEvents); } })))
            : null)));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Trend.tsx":
/*!*********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Trend.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TrendJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../Constants */ "./wwwroot/TypeScript/Constants.ts");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-datetime */ "./node_modules/react-datetime/dist/react-datetime.cjs.js");
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_datetime__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! bootstrap-switch-button-react */ "./node_modules/bootstrap-switch-button-react/lib/bootstrap-switch-button-react.js");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Axis */ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Axis.tsx");
/* harmony import */ var _SeriesPicker__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./SeriesPicker */ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/SeriesPicker.tsx");
/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "./node_modules/console-browserify/index.js");
//******************************************************************************************************
//  Trend.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/13/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};













function TrendJSX(props) {
    var _a, _b, _c, _d;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _e[0], setToggle = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props)), 2), record = _f[0], setRecord = _f[1];
    var hover = react__WEBPACK_IMPORTED_MODULE_1__.useRef(-10);
    var svgs = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);
    var margin = react__WEBPACK_IMPORTED_MODULE_1__.useRef({ bottom: 50, left: 50, top: 40, right: 50 });
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('Pan'), 2), chartAction = _g[0], setChartAction = _g[1];
    var chartActionRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef('Pan');
    var setHover = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function (value) {
        HandleHoverUpdate(value);
    }, []);
    try {
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props));
        }, [props]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            chartActionRef.current = chartAction;
        }, [chartAction]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            Initialize(record);
        }, [record]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Height: props.Height })));
        }, [props.Height]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Data: props.Data })));
        }, [props.Data]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            return function () { d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove(); };
        }, []);
    }
    catch (ex) {
        console.log(ex);
    }
    function Initialize(settings) {
        var svgCount = 1;
        if (settings.JSON.Split && settings.JSON.SplitType === 'Axis') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.YAxis.length;
        }
        else if (settings.JSON.Split && settings.JSON.SplitType === 'Series') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.Series.length;
        }
        else
            margin.current = {
                bottom: 50,
                left: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length * 50),
                top: 40,
                right: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length * 50)
            };
        if (settings.JSON.Legend)
            margin.current.right = margin.current.right + 200;
        var svgHeight = props.Height / svgCount;
        if (svgs.current.length !== svgCount) {
            svgs.current = [];
            d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
            for (var i = 0; i < svgCount; i++) {
                var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
                    .append('svg')
                    .attr('width', settings.Width)
                    .attr('height', svgHeight);
                svgs.current.push(svg);
            }
        }
        var x = GetXScale(settings);
        svgs.current.forEach(function (svg, i) {
            if (settings.JSON.Split && settings.JSON.SplitType === 'Axis')
                return InitializeSplitOnAxis(settings, svg, x, i);
            if (settings.JSON.Split && settings.JSON.SplitType === 'Series')
                return InitializeSplitOnSeries(settings, svg, x, i);
            else
                return InitializeNotSplit(settings, svg, x);
        });
    }
    function InitializeSplitOnSeries(settings, svg, x, i) {
        var _a, _b, _c, _d;
        var svgHeight = parseInt(svg.attr('height'));
        var series = settings.JSON.Series[i];
        var axis = settings.JSON.YAxis[series.Axis];
        var field = series.Field;
        AddXAxis(svg, x);
        var y = GetYScale(svgHeight, axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        var filteredData = ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === series.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).filter(function (ds) { return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[field] >= axis.Min && ds[field] <= axis.Max; });
        var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(moment__WEBPACK_IMPORTED_MODULE_7___default()(dd.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ')); }).y(function (dd) { return y(dd[series.Field]); });
        svg.selectAll("g.line").remove();
        svg.selectAll('g.line')
            .data([filteredData])
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", series.Color)
            .attr("d", function (d) {
            return lineFunc(d);
        });
        if (series.ShowEvents) {
            AddEventLine(series, svg, x);
        }
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, [series]);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeSplitOnAxis(settings, svg, x, i) {
        var svgHeight = parseInt(svg.attr('height'));
        var axis = settings.JSON.YAxis[i];
        var series = settings.JSON.Series.filter(function (s) { return s.Axis === i; }).map(function (s) {
            var _a, _b, _c, _d;
            return (__assign(__assign({}, s), { Data: ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === s.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === s.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).filter(function (ds) { return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[s.Field] >= axis.Min && ds[s.Field] <= axis.Max; }).map(function (point) { return [point.Timestamp, point[s.Field]]; }) }));
        });
        AddXAxis(svg, x);
        var y = GetYScale(svgHeight, axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(moment__WEBPACK_IMPORTED_MODULE_7___default()(dd[0], 'YYYY-MM-DDTHH:mm:ss.fffZ')); }).y(function (dd) { return y(dd[1]); });
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(series)
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (s) { return s.Color; })
            .attr("d", function (s) { return lineFunc(s.Data); });
        series.forEach(function (s) { return AddEventLine(s, svg, x); });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, series);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeNotSplit(settings, svg, x) {
        AddXAxis(svg, x);
        var y = settings.JSON.YAxis.map(function (axis) { return GetYScale(settings.Height, axis); });
        svg.selectAll('g.yaxis').remove();
        var yAxis = settings.JSON.YAxis.map(function (axis, index) {
            var a;
            if (axis.Position === 'left') {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisLeft(axis, svg, y[index], false, ind);
            }
            else {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisRight(axis, svg, y[index], ind);
            }
            return a;
        });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, settings.JSON.Series);
        }
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(settings.JSON.Series)
            .enter()
            .append("g")
            .classed("line", true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (d) { return d.Color; })
            .attr("d", function (d) {
            var _a, _b, _c, _d;
            var yScale = y[d.Axis];
            var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(moment__WEBPACK_IMPORTED_MODULE_7___default()(dd.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ')); }).y(function (dd) { return yScale(dd[d.Field]); });
            var filteredData = ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === d.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === d.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).filter(function (ds) { var _a, _b; return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[d.Field] >= ((_a = settings.JSON.YAxis[d.Axis]) === null || _a === void 0 ? void 0 : _a.Min) && ds[d.Field] <= ((_b = settings.JSON.YAxis[d.Axis]) === null || _b === void 0 ? void 0 : _b.Max); });
            return lineFunc(filteredData);
        });
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
        settings.JSON.Series.filter(function (series) { return series.ShowEvents; }).forEach(function (series) { return AddEventLine(series, svg, x); });
    }
    function AddLegend(svg, series) {
        var svgHeight = parseInt(svg.attr('height'));
        var svgWidth = parseInt(svg.attr('width'));
        var legend = svg.selectAll('g.legend')
            .data([series])
            .enter()
            .append('g')
            .attr('class', 'legend')
            .attr('transform', "translate(" + (svgWidth - 200) + "," + margin.current.top + ")");
        var legendRows = legend.selectAll('g.legendRow')
            .data(function (d) { return d; })
            .enter()
            .append('g')
            .attr('class', 'legendrow')
            .attr('transform', function (d, i) { return "translate(10," + i * 30 + ")"; });
        legendRows.append('rect').attr('height', 20).attr('width', 20).attr('fill', function (d) { return d.Color; });
        legendRows.append('text').attr('x', 30).attr('y', 15)
            .text(function (d) {
            if (d.Label.length > 15)
                return d.Label.slice(0, 15) + '...';
            else
                return d.Label;
        });
        legendRows.append('title').text(function (d) { return d.Label; });
    }
    function AddEventLine(series, svg, x) {
        var _a, _b, _c, _d;
        var svgHeight = parseInt(svg.attr('height'));
        var data = ((_d = (_c = ((_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).find(function (ds) { return ds.ID.toString() === series.ID.toString(); })) === null || _c === void 0 ? void 0 : _c.Events) !== null && _d !== void 0 ? _d : []);
        svg.selectAll('g.event-line').remove();
        var g = svg.selectAll('g.event-line')
            .data(data)
            .enter()
            .append('g')
            .classed('event-line', true);
        g.append('path')
            .attr('stroke-width', '2px')
            .attr("d", function (d) { return "M0," + (svgHeight - margin.current.bottom - margin.current.top) + "L-10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + ",L10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + "L0," + (svgHeight - margin.current.bottom - margin.current.top) + "Z"; })
            .attr("transform", function (d) { return "translate(" + x(moment__WEBPACK_IMPORTED_MODULE_7___default()(d.StartTime, 'YYYY-MM-DDTHH:mm:ss.fff')) + "," + margin.current.top + ")"; })
            .attr('stroke', 'red')
            .attr('fill', 'red')
            .style('cursor', 'pointer')
            .on('click', function (e, d) {
            window.open(record.Data.find(function (ds) { return ds.DataSource.ID.toString() === series.DataSourceID.toString(); }).DataSource.OpenSEE + '?eventID=' + d.ID);
        });
    }
    function AddXAxis(svg, x) {
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        svg.selectAll('g.xaxis').remove();
        var xAxis = svg.append("g").classed('xaxis', true)
            .attr("transform", "translate(0," + (svgHeight - margin.current.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("g").classed('xaxis', true).append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (svgWidth / 2) + "," + (svgHeight - margin.current.bottom / 3) + ")")
            .text("Time");
    }
    function AddYAxisLeft(axis, svg, y, rotate, index) {
        if (rotate === void 0) { rotate = true; }
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (margin.current.left - index * 50) + ",0)")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return d3__WEBPACK_IMPORTED_MODULE_0__.format("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        if (rotate)
            text.attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + ((margin.current.left - index * 50) / 3) + ")").style("text-anchor", "middle");
        else
            text.attr("transform", "translate(" + (margin.current.left - index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "end");
    }
    function AddYAxisRight(axis, svg, y, index) {
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + ",0)")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return d3__WEBPACK_IMPORTED_MODULE_0__.format("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        text.attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "start");
    }
    function GetXScale(settings) {
        return d3__WEBPACK_IMPORTED_MODULE_0__.scaleUtc()
            .domain([settings.JSON.Min, settings.JSON.Max]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([margin.current.left, settings.Width - margin.current.right]);
    }
    function GetYScale(svgHeight, axis) {
        return d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.current.bottom, margin.current.top])
            .domain([axis.Min, axis.Max]);
    }
    function HandleHoverUpdate(hover) {
        if (chartActionRef.current !== 'Click')
            return;
        svgs.current.forEach(function (svg, index) {
            var height = parseInt(svg.attr('height')) - margin.current.top - margin.current.bottom;
            if (hover >= margin.current.left && hover <= (props.Width - margin.current.right)) {
                svg.selectAll('g.mouse-over').remove();
                svg.append('g')
                    .classed('mouse-over', true)
                    .append('path')
                    .attr("d", function (d) { return "M 0 0 V " + height; })
                    .attr("transform", "translate(" + hover + "," + margin.current.top + ")")
                    .attr('stroke', 'gray');
            }
        });
    }
    function HandleReset() {
        setRecord(record.CalculateAxisRange('x'));
    }
    function HandleChartAction(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var width = parseInt(svg.attr('width'));
        evt.preventDefault();
        if (evt.offsetX < margin.current.left || evt.offsetX > width - margin.current.right)
            return;
        else if (evt.offsetY < margin.current.top || evt.offsetY > height - margin.current.bottom)
            return;
        else if (chartActionRef.current == 'Click')
            OnClick(evt, svg, scale);
        else if (chartActionRef.current == 'Pan')
            OnPan(evt, svg, scale);
        else if (chartActionRef.current == 'ZoomX')
            OnXZoom(evt, svg, scale);
    }
    function OnClick(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var tooltipHeight = record.JSON.Series.length * 15;
        if (evt.offsetX < margin.current.left && evt.offsetX > (props.Width - margin.current.right))
            return;
        svg.selectAll('g.mouse-over2').remove();
        svg.append('g')
            .classed('mouse-over2', true)
            .append('path')
            .attr("d", function (d) { return "M 0 0 V " + (height - margin.current.bottom - margin.current.top); })
            .attr("transform", "translate(" + evt.offsetX + "," + margin.current.top + ")")
            .attr('stroke', 'grey');
        svg.selectAll('g.charttooltip').remove();
        var tooltip = svg.append('g')
            .attr('class', 'charttooltip')
            .attr("transform", "translate(" + (evt.offsetX + 15) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
        var rect = tooltip.append('rect')
            .attr('fill', 'gainsboro')
            .attr('height', record.JSON.Series.length + 'em')
            .attr('width', 200)
            .attr('x', 0)
            .attr('y', 0);
        var text = tooltip.append('text')
            .attr('x', 0)
            .attr('y', 0);
        var width = 200;
        record.JSON.Series.forEach(function (series, index) {
            var _a, _b, _c, _d;
            tooltip.append('rect').attr('x', 5).attr('y', index + "em").attr('height', '1em').attr('width', '1em').attr('fill', series.Color);
            var dataSource = (_b = (_a = record.Data.find(function (ds) { return ds.DataSource.ID == series.DataSourceID; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var data = (_d = (_c = dataSource.find(function (ds) { return ds.ID == series.ID; })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
            var floor = Math.floor(data.length * evt.offsetX / props.Width * .95);
            var ceil = Math.ceil(data.length * evt.offsetX / props.Width * 1.05);
            var shortenedData = data.slice(floor, ceil);
            var dist = shortenedData.map(function (datum) { return ({ Value: datum[series.Field], Distance: Math.abs(evt.offsetX - scale(moment__WEBPACK_IMPORTED_MODULE_7___default()(datum.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ').toDate().getTime())) }); });
            dist.sort(function (a, b) {
                if (a.Distance > b.Distance)
                    return 1;
                else if (a.Distance == b.Distance)
                    return 0;
                else
                    return -1;
            });
            var datum = d3__WEBPACK_IMPORTED_MODULE_0__.format('.2f')(dist[0].Value);
            text.append('tspan').text(series.Label + ' - ' + datum).attr('x', '1.5em').attr('y', index + 1 + "em");
            width = text.node().getBBox().width + 25 > width ? text.node().getBBox().width + 25 : width;
        });
        rect.attr('width', width);
        if (width > props.Width - margin.current.right - evt.offsetX)
            tooltip.attr("transform", "translate(" + (evt.offsetX - 15 - width) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
    }
    function OnPan(evt, svg, scale) {
        var start = evt.clientX;
        svg.on('mousemove.pan', function (e) {
            record.UpdateJSON('Min', scale.invert(scale.range()[0] + start - e.clientX).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(scale.range()[1] + start - e.clientX).getTime())));
        });
        svg.on('mouseup.pan', function () { return svg.on('mousemove.pan', null); });
    }
    function OnXZoom(evt, svg, scale) {
        var start = evt.offsetX;
        var brush = d3__WEBPACK_IMPORTED_MODULE_0__.brushX()
            .extent([[margin.current.left, margin.current.top + 0.5], [props.Width - margin.current.right, parseInt(svg.attr('height')) - margin.current.bottom + 0.5]]);
        var br = svg.append('g').call(brush);
        br.call(brush.move, [start, start + 1]);
        svg.on('mousemove.brush', function (e) {
            br.call(brush.move, [start, e.offsetX]);
        });
        svg.on('mouseup.brush', function (e) {
            var min = Math.min(start, e.offsetX);
            var max = Math.max(start, e.offsetX);
            record.UpdateJSON('Min', scale.invert(min).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(max).getTime())));
            br.remove();
            svg.on('mousemove.brush', null);
            svg.on('mouseup.brush', null);
        });
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref, style: { userSelect: 'none' } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { style: { position: 'absolute', left: 10, zIndex: 1010 } },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-light', onClick: HandleReset }, "Reset"),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "form-check-inline" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-check-label" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "radio", className: "form-check-input", checked: chartAction == 'Pan', onChange: function (evt) { return setChartAction('Pan'); } }),
                            "Pan")),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "form-check-inline" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-check-label" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "radio", className: "form-check-input", checked: chartAction == 'ZoomX', onChange: function (evt) { return setChartAction('ZoomX'); } }),
                            "Zoom")),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "form-check-inline" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-check-label" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "radio", className: "form-check-input", checked: chartAction == 'Click', onChange: function (evt) { return setChartAction('Click'); } }),
                            "Click"))))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-1' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Split"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10___default()), { checked: (_b = (_a = record === null || record === void 0 ? void 0 : record.JSON) === null || _a === void 0 ? void 0 : _a.Split) !== null && _b !== void 0 ? _b : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Split', checked)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Select, { Label: 'Split On', Field: 'SplitType', Record: record === null || record === void 0 ? void 0 : record.JSON, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: r }))); }, Options: [{ Value: 'Axis', Label: 'Axis' }, { Value: 'Series', Label: 'Series' }] })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Legend"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_10___default()), { checked: (_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Legend) !== null && _d !== void 0 ? _d : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Legend', checked)); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Axis"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_8___default()), { value: moment__WEBPACK_IMPORTED_MODULE_7___default()(record.JSON.Min), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: __assign(__assign({}, record.JSON), { Min: moment__WEBPACK_IMPORTED_MODULE_7___default()(value).toDate().getTime() }) }))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_8___default()), { value: moment__WEBPACK_IMPORTED_MODULE_7___default()(record.JSON.Max), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: __assign(__assign({}, record.JSON), { Max: moment__WEBPACK_IMPORTED_MODULE_7___default()(value).toDate().getTime() }) }))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () {
                                record.CalculateAxisRange('x', 0);
                                setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record));
                            } }, "Use Data"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Axis"),
                " ",
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { style: { position: 'relative', float: 'right', top: -30 }, className: 'btn btn-link', onClick: function () {
                        record.AddAxis();
                        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record));
                    } }, _Constants__WEBPACK_IMPORTED_MODULE_5__.Plus),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group list-group-flush", style: { maxHeight: window.innerHeight - 625, overflowY: 'auto', overflowX: 'hidden', width: '100%' } }, record.JSON.YAxis.map(function (axis, index) { return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: index, className: 'list-group-item' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Axis__WEBPACK_IMPORTED_MODULE_11__.default, { Axis: axis, Index: index, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }))); }))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 250 } }, record.Data.map(function (d, i) {
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                (d.DataSource.Type === 'TrenDAPDB' ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddVoltageRMS(d.DataSource.ID)); } }, "Quick Add VRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddCurrentRMS(d.DataSource.ID)); } }, "Quick Add IRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.RemoveAll(d.DataSource.ID)); } }, "Remove All")) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" }, record.JSON.Series.map(function (series, ind) {
                                    var datum = d.Data.find(function (dd) { return dd.ID.toString() === series.ID; });
                                    if (datum === undefined)
                                        return null;
                                    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: series.ID, className: "list-group-item" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_SeriesPicker__WEBPACK_IMPORTED_MODULE_12__.default, { Type: d.DataSource.Type, Index: ind, Series: series, Data: datum, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } })));
                                })))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx":
/*!*********************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************


function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    var id = lodash__WEBPACK_IMPORTED_MODULE_1___default().uniqueId('dropdown-');
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: id, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": id },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Device: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Device),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Reference: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.SignalReference),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Type: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.SignalType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Engineering Units: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.EngineeringUnits),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phasor Type: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.PhasorType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Description: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Description))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/SeriesSelect.tsx":
/*!*******************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/SeriesSelect.tsx ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _AdditionalInfo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/AdditionalInfo.tsx");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};


function SeriesSelect(props) {
    var _a, _b, _c;
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _d[0], setDataSource = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ ID: '0' }), 2), selected = _e[0], setSelected = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), delimeter = _f[0], setDelimeter = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: delimeter, onChange: function (evt) { return setDelimeter(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            ((_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return d.Device; }).filter(function (x, i, a) { return a.indexOf(x) === i; }).map(function (d, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: d }, d); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: (_b = selected === null || selected === void 0 ? void 0 : selected.ID) !== null && _b !== void 0 ? _b : '0', onChange: function (evt) { return setSelected(dataSource.Data.find(function (datum) { return datum.ID === evt.target.value; })); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '0' }),
            ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _c !== void 0 ? _c : []).filter(function (d) { return d.Device.indexOf(delimeter) >= 0; }).map(function (datum, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: index, value: datum.ID }, datum.Description); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_AdditionalInfo__WEBPACK_IMPORTED_MODULE_1__.default, { Data: selected }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    var label = selected.Description;
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeries((selected).ID, props.DataSourceID, label);
                    else if (props.Widget.Type === 'Trend')
                        props.Widget.AddSeries((selected).ID, props.DataSourceID, label);
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeries((selected).ID, props.DataSourceID);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeries((selected).ID, props.DataSourceID);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeries(props.Axis, (selected).ID, props.DataSourceID);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx":
/*!***********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Widgit),
/* harmony export */   "SeriesSelect": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XDA/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/SeriesSelect.tsx");
/* harmony import */ var _OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OpenHistorian/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/OpenHistorian/SeriesSelect.tsx");
//******************************************************************************************************
//  Widget.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};




function Widgit(props) {
    return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: props.Toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog mw-100 w-75", role: "document" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content mx-auto" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" },
                        props.Label,
                        " Settings"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return props.SetToggle(false); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" }, props.children)),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                            props.Update(props.Record);
                            props.SetToggle(false);
                        } }, "Save changes"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-danger", onClick: function () {
                            props.Remove();
                            props.SetToggle(false);
                        } }, "Delete Widgit"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return props.SetToggle(false); } }, "Close"))))), document.getElementById("window"));
}
function SeriesSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _a[0], setDataSource = _a[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
            //setSelected((dataSource?.Data ?? [undefined])[0]);
        }
    }, [props.Widget.Data]);
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__.default, __assign({}, props));
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else
        return null;
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx":
/*!***********************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: "dropdownMenuButton" + props.Index, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Addition Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" + props.Index },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Meter: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Meter),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Asset: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.Asset),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Characteristic: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.Characteristic),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Type: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.Type),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Station: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Station),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Harmonic: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Harmonic))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/SeriesSelect.tsx":
/*!*********************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/SeriesSelect.tsx ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

function SeriesSelect(props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var _l = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _l[0], setDataSource = _l[1];
    var _m = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ ID: 0 }), 2), selected = _m[0], setSelected = _m[1];
    var _o = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState('Meter'), 2), type = _o[0], setType = _o[1];
    var _p = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(''), 2), delimeter = _p[0], setDelimeter = _p[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Meter' }, "Meter"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Asset' }, "Asset")),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: delimeter, onChange: function (evt) { return setDelimeter(evt.target.value); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }),
            ((_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : []).map(function (d) { return d[type]; }).filter(function (x, i, a) { return a.indexOf(x) === i; }).map(function (d, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: d }, d); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: (_b = selected === null || selected === void 0 ? void 0 : selected.ID) !== null && _b !== void 0 ? _b : '0', onChange: function (evt) { return setSelected(dataSource.Data.find(function (datum) { return datum.ID === parseInt(evt.target.value); })); } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '0' }),
            ((_c = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _c !== void 0 ? _c : []).filter(function (datum) { return datum[type].indexOf(delimeter) >= 0; }).map(function (datum, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: index, value: datum.ID }, datum.Name); })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary dropdown-toggle", type: "button", id: "dropdownMenuButton", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "dropdownMenuButton" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Meter: ", (_d = selected) === null || _d === void 0 ? void 0 :
                    _d.Meter),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Asset: ", (_e = selected) === null || _e === void 0 ? void 0 :
                    _e.Asset),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Characteristic: ", (_f = selected) === null || _f === void 0 ? void 0 :
                    _f.Characteristic),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Type: ", (_g = selected) === null || _g === void 0 ? void 0 :
                    _g.Type),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Station: ", (_h = selected) === null || _h === void 0 ? void 0 :
                    _h.Station),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Phase: ", (_j = selected) === null || _j === void 0 ? void 0 :
                    _j.Phase),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                    "Harmonic: ", (_k = selected) === null || _k === void 0 ? void 0 :
                    _k.Harmonic)),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeries(selected.ID, props.DataSourceID, selected.Type + ' ' + selected.Phase);
                    else if (props.Widget.Type === 'Trend') {
                        var label = '';
                        if (selected.Characteristic === 'Frequency')
                            label = 'Freq - ' + selected.Meter;
                        else if (selected.Type === 'Voltage' && selected.Characteristic === 'RMS')
                            label = "V" + selected.Phase + " - " + selected.Meter;
                        else if (selected.Type === 'Voltage')
                            label = "V" + selected.Phase + " " + selected.Characteristic + " - " + selected.Meter;
                        else if (selected.Type === 'Current' && selected.Characteristic === 'RMS')
                            label = "I" + selected.Phase + " - " + selected.Meter;
                        else if (selected.Type === 'Current')
                            label = "I" + selected.Phase + " " + selected.Characteristic + " - " + selected.Meter;
                        else
                            label = selected.Name;
                        props.Widget.AddSeries(selected.ID, props.DataSourceID, label);
                    }
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeries(selected.ID, props.DataSourceID);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeries(selected.ID, props.DataSourceID);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeries(props.Axis, selected.ID, props.DataSourceID);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Regular/XvsY.tsx":
/*!**************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Regular/XvsY.tsx ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ XvsYJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Regular/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-datetime */ "./node_modules/react-datetime/dist/react-datetime.cjs.js");
/* harmony import */ var react_datetime__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react_datetime__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var simple_statistics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! simple-statistics */ "./node_modules/simple-statistics/dist/simple-statistics.mjs");
//******************************************************************************************************
//  XvsY.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};












function XvsYJSX(props) {
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(props)), 2), record = _b[0], setRecord = _b[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        //record.current = new Trend(props);
    }, [toggle, props.JSON]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Height: props.Height })));
    }, [props.Height]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Data: props.Data })));
    }, [props.Data]);
    function Zip(array1, field1, array2, field2, zipField) {
        var returnArray = [];
        if (array1.length > array2.length) {
            array1.forEach(function (xd, i) {
                var array2Point = array2.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array2Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array1: xd[field1], Array2: array2Point[field2]
                });
            });
        }
        else {
            array2.forEach(function (xd, i) {
                var array1Point = array1.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array1Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array2: xd[field1], Array1: array1Point[field2]
                });
            });
        }
        return returnArray;
    }
    function Initialize(settings) {
        var _a, _b, _c, _d;
        if (settings.JSON.X.Series == undefined || settings.JSON.Y.Series == undefined)
            return;
        var margin = { bottom: 50, left: 50, top: 40, right: 50 };
        var svgHeight = props.Height;
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([settings.JSON.X.Min, settings.JSON.X.Max]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.top - margin.bottom, 0])
            .domain([settings.JSON.Y.Min, settings.JSON.Y.Max]); // d3.hist has to be called before the Y axis obviously
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', svgHeight);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (svgHeight - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (svgHeight - margin.bottom / 3) + ")")
            .text(settings.JSON.X.Units);
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + (margin.left) + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + (margin.left / 3) + ")")
            .style("text-anchor", "middle")
            .text(settings.JSON.Y.Units);
        var xData = (_b = (_a = GetDatum('x')) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
        var yData = (_d = (_c = GetDatum('y')) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
        var combinedData = Zip(xData, record.JSON.X.Series.Field, yData, record.JSON.Y.Series.Field, 'Timestamp');
        //const combinedData = xData.map((xd, i) => ({ Timestamp: xd.Timestamp, X: xd[record.JSON.XSeries.Field], Y: yData[i][record.JSON.YSeries.Field] }))
        var filteredData = combinedData.filter(function (d) { return moment__WEBPACK_IMPORTED_MODULE_8___default()(d.ZipField).toDate().getTime() >= record.JSON.TimeMin && moment__WEBPACK_IMPORTED_MODULE_8___default()(d.ZipField).toDate().getTime() <= record.JSON.TimeMax; });
        svg.selectAll("dot")
            .data(filteredData)
            .enter().append("circle")
            .attr("r", 3.5)
            .attr("cx", function (d) { return x(d.Array1); })
            .attr("cy", function (d) { return y(d.Array2); })
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (record.JSON.RegressionLine) {
            var data = filteredData.map(function (d) { return [d.Array1, d.Array2]; });
            var model = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_11__.linearRegression)(data);
            var lrLine_1 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_11__.linearRegressionLine)(model);
            var r2 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_11__.rSquared)(data, lrLine_1);
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (d) { return x(d[0]); }).y(function (d) { return y(lrLine_1(d[0])); });
            svg.append('text')
                .attr('stroke', 'red')
                .attr("transform", "translate(" + (props.Width - margin.left - margin.right) + "," + margin.top + ")")
                .text("R2 - " + r2.toFixed(3));
            svg.append("path")
                .data([data])
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", 'red')
                .attr("d", function (d) { return lineFunc_1(d); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    function GetDatum(axis) {
        var _a, _b, _c, _d;
        if (axis === 'x') {
            if (record.JSON.X.Series == undefined)
                return { Name: '' };
            var dataSource = (_b = (_a = record.Data.find(function (d) { return d.DataSource.ID.toString() === record.JSON.X.Series.DataSourceID.toString(); })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
            var datum = dataSource.find(function (ds) { return ds.ID.toString() === record.JSON.X.Series.ID.toString(); });
            return datum;
        }
        else {
            if (record.JSON.Y.Series == undefined)
                return { Name: '' };
            var dataSource = (_d = (_c = record.Data.find(function (d) { return d.DataSource.ID.toString() === record.JSON.Y.Series.DataSourceID.toString(); })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
            var datum = dataSource.find(function (ds) { return ds.ID.toString() === record.JSON.Y.Series.ID.toString(); });
            return datum;
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_9___default()), { value: moment__WEBPACK_IMPORTED_MODULE_8___default()(record.JSON.TimeMin), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('TimeMin', moment__WEBPACK_IMPORTED_MODULE_8___default()(value).toDate().getTime()))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Min"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((react_datetime__WEBPACK_IMPORTED_MODULE_9___default()), { value: moment__WEBPACK_IMPORTED_MODULE_8___default()(record.JSON.TimeMax), onChange: function (value) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('TimeMax', moment__WEBPACK_IMPORTED_MODULE_8___default()(value).toDate().getTime()))); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateRange('time')); } }, "Use Data"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.CheckBox, { Record: record.JSON, Field: 'RegressionLine', Label: 'Add Regression', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('RegressionLine', r.RegressionLine))); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Axis"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Units', r.Units)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Min', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Min', r.Min)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Max', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Max', r.Max)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateRange('x')); } }, "Use Data"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Axis"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Units', r.Units)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Min', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Min', r.Min)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Max', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Max', r.Max)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2", style: { position: 'relative' } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () { return setRecord(record.CalculateRange('y')); } }, "Use Data")))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'x', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.X.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_b = (_a = GetDatum('x')) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('x') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'x', Series: record.JSON.X.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'y', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.Y.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_d = (_c = GetDatum('y')) === null || _c === void 0 ? void 0 : _c.Name) !== null && _d !== void 0 ? _d : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('y') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'y', Series: record.JSON.Y.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _a[0], setType = _a[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        props.Widget.UpdateSeries(props.Axis, "Field", type);
        props.Callback();
    }, [type]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-label" }, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () {
                    props.Widget.RemoveSeries(props.Axis);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Histogram.tsx":
/*!***********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Histogram.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HistogramJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
//******************************************************************************************************
//  Histogram.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};









var SvgStyle = {
    fill: 'none',
    shapeRendering: 'crispEdges',
    userSelect: 'none',
    WebkitTouchCallout: 'none',
    WebkitUserSelect: 'none',
    KhtmlUserSelect: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none'
};
function HistogramJSX(props) {
    var _a;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _b[0], setToggle = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(props)), 2), record = _c[0], setRecord = _c[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
    }, [toggle, props.JSON]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(props));
    }, [props.Data, props.Height, props.Device]);
    function Initialize(settings) {
        var _a, _b;
        var profile = settings.JSON.Series.map(function (series) { return series.Profile; }).reduce(function (prev, curr) { return prev || curr; }, false);
        var margin = { bottom: 50, left: 50, top: 40, right: (profile ? 70 : 20) };
        var svgHeight = record.Height - margin.top - margin.bottom;
        var extent = d3__WEBPACK_IMPORTED_MODULE_0__.extent([].concat.apply([], __spreadArray([], __read(settings.JSON.Series.map(function (series) {
            var _a, _b, _c, _d, _e;
            var dataSource = settings.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum;
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
                datum = (_c = (_b = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; })) === null || _b === void 0 ? void 0 : _b.Data) !== null && _c !== void 0 ? _c : [];
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
                datum = (_e = (_d = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; })) === null || _d === void 0 ? void 0 : _d.Data) !== null && _e !== void 0 ? _e : [];
            else
                datum = [];
            return datum.map(function (d) { return d[series.Field]; });
        })))));
        //// set the parameters for the histogram
        var histograms = ((_b = (_a = settings.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series) {
            var _a, _b;
            var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum;
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
            else
                datum = { Data: [] };
            datum = (_b = datum === null || datum === void 0 ? void 0 : datum.Data.map(function (d) { return d[series.Field]; })) !== null && _b !== void 0 ? _b : [];
            var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                .value(function (d) { return d; }) // I need to give the vector of value
                .domain(extent) // then the domain of the graphic
                .thresholds(settings.JSON.BinCount); // then the numbers of bins
            // And apply this function to data to get the bins
            return histogram(datum);
        });
        var yMax = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.length; }))));
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', settings.Height);
        var xMin = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.x0; }))));
        var xMax = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(histograms))).map(function (b) { return b.x1; }))));
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([xMin, xMax]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (settings.Height - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (settings.Height - margin.bottom / 3) + ")")
            .text(record.JSON.Units);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([settings.Height - margin.top - margin.bottom, 0])
            .domain([0, yMax]); // d3.hist has to be called before the Y axis obviously
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + margin.left / 3 + ")")
            .style("text-anchor", "middle")
            .text("Counts");
        var binWidth = Math.max.apply(Math, __spreadArray([], __read(histograms.map(function (histogram) { return Math.max.apply(Math, __spreadArray([], __read(histogram.map(function (a) { return x(a.x1) - x(a.x0); })))); }))));
        //svg.selectAll("g.bins").remove();
        svg.selectAll("g.bins")
            .data(settings.JSON.Series)
            .enter()
            .append('g').attr('class', 'bins').attr("fill", function (series) { return series.Color; })
            .attr('transform', function (d, index) { return "translate(" + (margin.left + index * binWidth / settings.JSON.Series.length) + "," + margin.top + ")"; })
            //.attr("opacity", 0.3)
            .selectAll('rect')
            .data(function (series, index) { return histograms[index]; })
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function (d, i, g) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
            .attr("width", function (d) { return (x(d.x1) - x(d.x0) > 2 ? (x(d.x1) - x(d.x0)) / settings.JSON.Series.length : 2) - 1; })
            .attr("height", function (d) { return svgHeight - y(d.length); });
        if (profile) {
            var profiles = settings.JSON.Series.filter(function (series) { return series.Profile; }).map(function (series, index) {
                var _a, _b;
                var dataSource = settings.Data.find(function (d) { return d.DataSource.ID === series.DataSourceID; });
                var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
                var datum;
                if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
                    datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
                if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
                    datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
                else
                    datum = { Data: [] };
                datum = (_b = datum === null || datum === void 0 ? void 0 : datum.Data.map(function (d) { return d[series.Field]; })) !== null && _b !== void 0 ? _b : [];
                var histogram = d3__WEBPACK_IMPORTED_MODULE_0__.histogram()
                    .value(function (d) { return d; }) // I need to give the vector of value
                    .domain(d3__WEBPACK_IMPORTED_MODULE_0__.extent(datum)) // then the domain of the graphic
                    .thresholds(settings.JSON.BinCount)(datum); // then the numbers of bins
                return { Color: series.ProfileColor, Profile: histogram.map((function (sum) { return function (value) { return sum += value.length; }; })(0)).map(function (prof, i) { return ({ Bin: histogram[i].x0, Value: prof }); }) };
            });
            //const profiles = histograms.map(hist => hist.map((sum => value => sum += value.length)(0)).map((prof, i) => ({ Bin: hist[i].x0, Value: prof })));
            var pyMax = Math.max.apply(Math, __spreadArray([], __read(profiles.map(function (pr) { return pr.Profile; }).reduce(function (prev, curr) { return prev.concat(curr); }, []).map(function (p) { return p.Value; }))));
            var py_1 = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
                .range([settings.Height - margin.top - margin.bottom, 0])
                .domain([0, pyMax]); // d3.hist has to be called before the Y axis obviously
            var pyAxis = svg.append("g")
                .attr("transform", "translate(" + (settings.Width - margin.right) + "," + margin.top + ")")
                .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(py_1));
            svg.append("text")
                .attr("transform", "rotate(-90) translate(-" + settings.Height / 2 + "," + (settings.Width - margin.right / 3) + ")")
                .style("text-anchor", "middle")
                .text("Profile");
            //const filteredData = profile.find(ds => ds.ID === series.ID)?.Data ?? []).filter(ds => moment(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[field] >= axis.Min && ds[field] <= axis.Max)
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd.Bin); }).y(function (dd) { return py_1(dd.Value); });
            svg.append("path")
                .data(profiles)
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", function (d) { return d.Color; })
                .attr("d", function (d) { return lineFunc_1(d.Profile); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-4" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: (_a = record === null || record === void 0 ? void 0 : record.Width) !== null && _a !== void 0 ? _a : 0, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Units', Record: record.JSON, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'BinCount', Label: 'Bins', Record: record.JSON, Type: 'number', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(__assign(__assign({}, record), { JSON: r }))); }, Valid: function (field) { return true; } })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_8__.Histogram(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" },
                                    (d.DataSource.Type === 'TrenDAPDB' ? ((_b = (_a = record.JSON) === null || _a === void 0 ? void 0 : _a.Series) !== null && _b !== void 0 ? _b : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
                                        //if (datum === undefined) return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, datum === null || datum === void 0 ? void 0 : datum.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum, Index: i })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null),
                                    (d.DataSource.Type === 'OpenHistorian' ? ((_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Series) !== null && _d !== void 0 ? _d : []).map(function (series, ind) {
                                        var datum = d.Data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
                                        //if (datum === undefined) return null;
                                        return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (datum === null || datum === void 0 ? void 0 : datum.Device) + ' - ' + (datum === null || datum === void 0 ? void 0 : datum.Description)),
                                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Index: ind, Series: series, Widget: record, Callback: function (widget) { return setRecord(widget); } }))));
                                    }) : null)))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Color), 2), color = _a[0], setColor = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _b[0], setType = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Profile), 2), profile = _c[0], setProfile = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.ProfileColor), 2), pColor = _d[0], setPColor = _d[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Color", color)); }, [color]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Field", type)); }, [type]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "Profile", profile)); }, [profile]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () { return props.Callback(props.Widget.UpdateSeries(props.Index, "ProfileColor", pColor)); }, [pColor]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "checkbox", className: "form-control", style: { width: 20 }, value: profile === null || profile === void 0 ? void 0 : profile.toString(), checked: profile, onChange: function (evt) { return setProfile(evt.target.checked); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Profile Color"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "color", className: "form-control", value: pColor, onChange: function (evt) { return setPColor(evt.target.value); } })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () { return props.Callback(props.Widget.RemoveSeries(props.Index)); } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_7__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts":
/*!****************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Widget": () => (/* binding */ Widget),
/* harmony export */   "Histogram": () => (/* binding */ Histogram),
/* harmony export */   "Trend": () => (/* binding */ Trend),
/* harmony export */   "Stats": () => (/* binding */ Stats),
/* harmony export */   "Table": () => (/* binding */ Table),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "XvsY": () => (/* binding */ XvsY),
/* harmony export */   "CreateWidget": () => (/* binding */ CreateWidget)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/helper-functions */ "./node_modules/@gpa-gemstone/helper-functions/lib/index.js");
/* harmony import */ var stats_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stats-lite */ "./node_modules/stats-lite/stats.js");
//******************************************************************************************************
//  Implementations.ts - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/27/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};


var Widget = /** @class */ (function () {
    function Widget(props) {
        var _this = this;
        this.SetLabel = function (label) {
            _this.Label = label;
        };
        this.SetHeight = function (height) { return _this.Height = height; };
        this.SetWidth = function (width) { return _this.Width = width; };
        this.SetJSON = function (json) { return _this.JSON = json; };
        //public AvailableSeries = () => this.Data.map(dd => ({ ...dd, DataSourceID: dd.DataSource.ID, DataSource: dd.DataSource }).Data.map(ddd => ({ ...ddd, Data: [], DataSource: dd.DataSource.Name, DataSourceID: dd.DataSource.ID } as TrenDAP.iXDAReturnWithDataSource))).reduce((acc, val) => acc.concat(val), []);
        this.UpdateJSON = function (field, value) {
            _this.JSON[field] = value;
            return _this;
        };
        this.Height = props.Height;
        this.Width = props.Width;
        this.Type = props.Type;
        this.Label = props.Label;
        this.JSON = props.JSON;
        this.By = props.By;
        this.Device = props.Device;
        if (props.Data == undefined)
            this.Data = [];
        else
            this.Data = props.Data;
    }
    return Widget;
}());

var Histogram = /** @class */ (function (_super) {
    __extends(Histogram, _super);
    function Histogram(props) {
        var _this = _super.call(this, props) || this;
        _this.AddSeriesXDA = function (dataSourceID, phase, type, characteristic) {
            var label = type + " " + phase + " " + characteristic;
            var series = {
                Phase: phase,
                Type: type,
                Characteristic: characteristic,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(),
                Profile: false,
                ProfileColor: GetColor(label)
            };
            _this.JSON.Series.push(series);
            return new Histogram(_this);
        };
        _this.AddSeriesOH = function (dataSourceID, phase, type) {
            var label = type + " " + phase;
            var series = {
                Phase: phase,
                Type: type,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(),
                Profile: false,
                ProfileColor: GetColor(label)
            };
            _this.JSON.Series.push(series);
            return new Histogram(_this);
        };
        _this.RemoveSeries = function (index) {
            _this.JSON.Series.splice(index, 1);
            return new Histogram(_this);
        };
        _this.UpdateSeries = function (index, field, value) {
            _this.JSON.Series[index][field] = value;
            return new Histogram(_this);
        };
        _this.CalculateAxisRange = function () {
            var ds = _this.Data.find(function (ds) { return ds.DataSource.ID === _this.JSON.Series[0].DataSourceID; });
            if (ds.DataSource.Type === 'TrenDAPDB') {
                var dd_1 = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd_1.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Characteristic === series.Characteristic && d.Type === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
                _this.JSON.Max = _this.JSON.Max + buffer;
                _this.JSON.Min = _this.JSON.Min - buffer;
            }
            else if (ds.DataSource.Type === 'OpenHistorian') {
                var dd_2 = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
                var ss = _this.JSON.Series.map(function (series) { var _a, _b; return ((_b = (_a = dd_2.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.SignalType === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                var buffer = (_this.JSON.Max - _this.JSON.Min) * .10;
                _this.JSON.Max = _this.JSON.Max + buffer;
                _this.JSON.Min = _this.JSON.Min - buffer;
            }
            else { }
            return new Histogram(_this);
        };
        _this.Type = "Histogram";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Units: '', Series: [], BinCount: 10 };
        return _this;
    }
    return Histogram;
}(Widget));

var Trend = /** @class */ (function (_super) {
    __extends(Trend, _super);
    function Trend(props) {
        var _this = _super.call(this, props) || this;
        _this.AddAxis = function () { return _this.JSON.YAxis.push({ Max: 10, Min: 0, Position: 'left', Units: '' }); };
        _this.RemoveAxis = function (index) {
            if (_this.JSON.YAxis.length == 1)
                return;
            _this.JSON.YAxis.splice(index, 1);
            _this.JSON.Series.forEach(function (series) {
                if (series.Axis >= index)
                    series.Axis = (index > 0 ? series.Axis - 1 : 0);
            });
        };
        _this.UpdateAxis = function (index, field, value) { _this.JSON.YAxis[index][field] = value; };
        _this.CalculateAxisRange = function (type, index) {
            var _a, _b, _c, _d;
            if (_this.JSON.Series.length == 0)
                return;
            var ds = _this.Data.find(function (ds) { return ds.DataSource.ID === _this.JSON.Series[0].DataSourceID; });
            var dd = [].concat.apply([], __spreadArray([], __read(_this.Data.map(function (d) { return d.Data; }))));
            if (type === 'x') {
                var ss = void 0;
                if (ds.DataSource.Type === 'TrenDAPDB') {
                    var phases_1 = _this.JSON.Series.map(function (s) { return s.Phase; });
                    var types_1 = _this.JSON.Series.map(function (s) { return s.Type; });
                    var characteristics_1 = _this.JSON.Series.map(function (s) { return s.Characteristic; });
                    ss = ((_b = (_a = dd.find(function (d) { return d[_this.By] === _this.Device && phases_1.indexOf(d.Phase) >= 0 && characteristics_1.indexOf(d.Characteristic) >= 0 && types_1.indexOf(d.Type) >= 0; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return new Date(d.Timestamp).getTime(); });
                }
                else if (ds.DataSource.Type === 'OpenHistorian') {
                    var phases_2 = _this.JSON.Series.map(function (s) { return s.Phase; });
                    var types_2 = _this.JSON.Series.map(function (s) { return s.Type; });
                    ss = ((_d = (_c = dd.find(function (d) { return d[_this.By] === _this.Device && phases_2.indexOf(d.Phase) >= 0 && types_2.indexOf(d.SignalType) >= 0; })) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : []).map(function (d) { return new Date(d.Timestamp).getTime(); });
                }
                else
                    ss = [];
                var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                _this.JSON.Max = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                _this.JSON.Min = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
            }
            else {
                if (index == undefined) {
                    var _loop_1 = function (index_1) {
                        var ss = void 0;
                        if (ds.DataSource.Type === 'TrenDAPDB')
                            ss = _this.JSON.Series.filter(function (series) { return series.Axis === index_1; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Characteristic === series.Characteristic && d.Type === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                        if (ds.DataSource.Type === 'OpenHistorian')
                            ss = _this.JSON.Series.filter(function (series) { return series.Axis === index_1; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.SignalType === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                        else
                            ss = [];
                        var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                        _this.JSON.YAxis[index_1]['Max'] = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                        _this.JSON.YAxis[index_1]['Min'] = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                        var buffer = (_this.JSON.YAxis[index_1]['Max'] - _this.JSON.YAxis[index_1]['Min']) * .10;
                        _this.JSON.YAxis[index_1]['Max'] = _this.JSON.YAxis[index_1]['Max'] + buffer;
                        _this.JSON.YAxis[index_1]['Min'] = _this.JSON.YAxis[index_1]['Min'] - buffer;
                    };
                    for (var index_1 = 0; index_1 < _this.JSON.YAxis.length; index_1++) {
                        _loop_1(index_1);
                    }
                }
                else {
                    var ss = void 0;
                    if (ds.DataSource.Type === 'TrenDAPDB')
                        ss = _this.JSON.Series.filter(function (series) { return series.Axis === index; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Characteristic === series.Characteristic && d.Type === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                    if (ds.DataSource.Type === 'OpenHistorian')
                        ss = _this.JSON.Series.filter(function (series) { return series.Axis === index; }).map(function (series) { var _a, _b; return ((_b = (_a = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.SignalType === series.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : []).map(function (d) { return d[series.Field]; }); });
                    else
                        ss = [];
                    var mm = ss.map(function (s) { return [Math.min.apply(Math, __spreadArray([], __read(s))), Math.max.apply(Math, __spreadArray([], __read(s)))]; });
                    _this.JSON.YAxis[index]['Max'] = Math.max.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                    _this.JSON.YAxis[index]['Min'] = Math.min.apply(Math, __spreadArray([], __read([].concat.apply([], __spreadArray([], __read(mm))))));
                    var buffer = (_this.JSON.YAxis[index]['Max'] - _this.JSON.YAxis[index]['Min']) * .10;
                    _this.JSON.YAxis[index]['Max'] = _this.JSON.YAxis[index]['Max'] + buffer;
                    _this.JSON.YAxis[index]['Min'] = _this.JSON.YAxis[index]['Min'] - buffer;
                }
            }
            return new Trend(_this);
        };
        _this.AddSeriesXDA = function (dataSourceID, phase, type, characteristic) {
            var label = '';
            if (characteristic === 'Frequency')
                label = 'Frequency';
            else if (type === 'Voltage' && characteristic === 'RMS')
                label = "V" + phase;
            else if (type === 'Voltage')
                label = "V" + phase + " " + characteristic;
            else if (type === 'Current' && characteristic === 'RMS')
                label = "I" + phase;
            else if (type === 'Current')
                label = "I" + phase + " " + characteristic;
            else
                label = type + " " + phase + " " + characteristic;
            var series = {
                Phase: phase,
                Type: type,
                Characteristic: characteristic,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(label),
                Axis: 0,
                ShowEvents: false
            };
            _this.JSON.Series.push(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.AddSeriesOH = function (dataSourceID, phase, type) {
            var label = type + " " + phase;
            var series = {
                Phase: phase,
                Type: type,
                DataSourceID: dataSourceID,
                Field: "Average",
                Color: GetColor(label),
                Axis: 0
            };
            _this.JSON.Series.push(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddVoltageRMS = function (dataSourceID) {
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'Volts'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'Volts', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            var series = [{
                    Phase: 'AN',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VAN RMS'),
                    Axis: 0,
                    Label: 'VAN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'BN',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VBN RMS'),
                    Axis: 0,
                    Label: 'VBN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'CN',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VCN RMS'),
                    Axis: 0,
                    Label: 'VCN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'AB',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VAB RMS'),
                    Axis: 0,
                    Label: 'VAB RMS',
                    ShowEvents: false
                }, {
                    Phase: 'BC',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VBC RMS'),
                    Axis: 0,
                    Label: 'VBC RMS',
                    ShowEvents: false
                }, {
                    Phase: 'CA',
                    Type: 'Voltage',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('VCA RMS'),
                    Axis: 0,
                    Label: 'VCA RMS',
                    ShowEvents: false
                }];
            _this.JSON.Series.concat(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.QuickAddCurrentRMS = function (dataSourceID) {
            var axis = _this.JSON.YAxis.findIndex(function (axis) { return axis.Units === 'Amps'; });
            if (axis < 0) {
                axis = _this.JSON.YAxis.push({ Units: 'Amps', Position: 'left', Min: 0, Max: 100 }) - 1;
            }
            var series = [{
                    Phase: 'AN',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('IAN RMS'),
                    Axis: 0,
                    Label: 'IAN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'BN',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('IBN RMS'),
                    Axis: 0,
                    Label: 'IBN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'CN',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('ICN RMS'),
                    Axis: 0,
                    Label: 'ICN RMS',
                    ShowEvents: false
                }, {
                    Phase: 'NG',
                    Type: 'Current',
                    Characteristic: 'RMS',
                    DataSourceID: dataSourceID,
                    Field: "Average",
                    Color: GetColor('ING RMS'),
                    Axis: 0,
                    Label: 'ING RMS',
                    ShowEvents: false
                }];
            _this.JSON.Series.concat(series);
            _this.CalculateAxisRange('x');
            _this.CalculateAxisRange('y');
            return new Trend(_this);
        };
        _this.RemoveSeries = function (index) { return _this.JSON.Series.splice(index, 1); };
        _this.RemoveAll = function (dataSourceID) {
            _this.JSON.Series = [];
            return new Trend(_this);
        };
        _this.UpdateSeries = function (index, field, value) { _this.JSON.Series[index][field] = value; };
        _this.Pan = function (value) {
            _this.JSON.Max = _this.JSON.Max + value;
            _this.JSON.Min = _this.JSON.Min + value;
            return new Trend(_this);
        };
        _this.Type = "Trend";
        if (_this.JSON === undefined)
            _this.JSON = { Min: 0, Max: 10, Legend: false, Split: false, SplitType: 'Axis', YAxis: [{ Max: 10, Min: 0, Position: 'left', Units: '' }], Series: [] };
        return _this;
    }
    return Trend;
}(Widget));

//export class Profile extends Widget<TrenDAP.iProfile> {
//    constructor(height: number, width: number, json?: TrenDAP.iTrend) {
//        super("Profile", height, width, json);
//        if (json === undefined)
//            this.JSON = {  };
//    }
//}
var Stats = /** @class */ (function (_super) {
    __extends(Stats, _super);
    function Stats(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeriesXDA = function (dataSourceID, phase, type, characteristic) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Characteristic: characteristic, Field: 'Average' }; };
        _this.SetSeriesOH = function (dataSourceID, phase, type) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Field: 'Average' }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        _this.Stats = function () {
            var _a, _b, _c, _d, _e, _f;
            var series = _this.JSON.Series;
            if (series == null)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            var dataSourceData = _this.Data.find(function (ds) { return ds.DataSource.ID === series.DataSourceID; });
            //?.Data ?? [];
            var dataSeries;
            if ((dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.DataSource.Type) === 'TrenDAPDB')
                dataSeries = (_c = (_b = ((_a = dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.Data) !== null && _a !== void 0 ? _a : []).find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.Type === series.Type && series.Characteristic === d.Characteristic; })) === null || _b === void 0 ? void 0 : _b.Data) !== null && _c !== void 0 ? _c : [];
            else if ((dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.DataSource.Type) === 'OpenHistorian')
                dataSeries = (_f = (_e = ((_d = dataSourceData === null || dataSourceData === void 0 ? void 0 : dataSourceData.Data) !== null && _d !== void 0 ? _d : []).find(function (d) { return d[_this.By] === _this.Device && d.Phase === series.Phase && d.SignalType === series.Type; })) === null || _e === void 0 ? void 0 : _e.Data) !== null && _f !== void 0 ? _f : [];
            else
                dataSeries = [];
            var data = dataSeries.map(function (d) { return d[series.Field]; });
            if (data.length == 0)
                return {
                    Mean: '',
                    Median: '',
                    //Mode: '',
                    Variance: '',
                    StdDev: '',
                    Percentile: {
                        10: '',
                        25: '',
                        50: '',
                        75: '',
                        90: '',
                    }
                };
            return {
                Mean: stats_lite__WEBPACK_IMPORTED_MODULE_1__.mean(data).toFixed(_this.JSON.Precision),
                Median: stats_lite__WEBPACK_IMPORTED_MODULE_1__.median(data).toFixed(_this.JSON.Precision),
                //Mode: stats.mode(data)/*.toPrecision(this.JSON.Precision)*/,
                Variance: stats_lite__WEBPACK_IMPORTED_MODULE_1__.variance(data).toFixed(_this.JSON.Precision),
                StdDev: stats_lite__WEBPACK_IMPORTED_MODULE_1__.stdev(data).toFixed(_this.JSON.Precision),
                Percentile: {
                    10: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.10).toFixed(_this.JSON.Precision),
                    25: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.25).toFixed(_this.JSON.Precision),
                    50: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.50).toFixed(_this.JSON.Precision),
                    75: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.75).toFixed(_this.JSON.Precision),
                    90: stats_lite__WEBPACK_IMPORTED_MODULE_1__.percentile(data, 0.90).toFixed(_this.JSON.Precision),
                }
            };
        };
        _this.Type = "Stats";
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Stats;
}(Widget));

var Table = /** @class */ (function (_super) {
    __extends(Table, _super);
    function Table(props) {
        var _this = _super.call(this, props) || this;
        _this.SetSeriesXDA = function (dataSourceID, phase, type, characteristic) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Characteristic: characteristic, Field: 'Average' }; };
        _this.SetSeriesOH = function (dataSourceID, phase, type) { return _this.JSON.Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Field: 'Average' }; };
        _this.SetSeriesField = function (field) {
            _this.JSON.Series.Field = field;
            return new Stats(_this);
        };
        _this.SetPrecsision = function (value) {
            _this.JSON.Precision = value;
            return new Stats(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = { Series: null, Precision: 3 };
        return _this;
    }
    return Table;
}(Widget));

var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(props) {
        var _this = _super.call(this, props) || this;
        if (_this.JSON === undefined)
            _this.JSON = { Text: '' };
        return _this;
    }
    return Text;
}(Widget));

var XvsY = /** @class */ (function (_super) {
    __extends(XvsY, _super);
    function XvsY(props) {
        var _this = _super.call(this, props) || this;
        _this.CalculateRange = function (type) {
            var _a;
            var ds = _this.Data.find(function (ds) { return ds.DataSource.ID === _this.JSON.X.Series.DataSourceID; });
            var dd = (_a = ds === null || ds === void 0 ? void 0 : ds.Data) !== null && _a !== void 0 ? _a : [];
            var ss;
            if (type === 'time') {
                if (ds.DataSource.Type === 'TrenDAPDB')
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === _this.JSON[type].Series.Phase && d.Characteristic === _this.JSON[type].Series.Characteristic && d.Type === _this.JSON[type].Series.Type; }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                else if (ds.DataSource.Type === 'OpenHistorian')
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === _this.JSON[type].Series.Phase && d.SignalType === _this.JSON[type].Series.Type; }).Data.map(function (d) { return new Date(d.Timestamp).getTime(); });
                else
                    ss = [];
                _this.JSON.TimeMax = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON.TimeMin = Math.min.apply(Math, __spreadArray([], __read(ss)));
            }
            else {
                if (ds.DataSource.Type === 'TrenDAPDB')
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === _this.JSON[type].Series.Phase && d.Characteristic === _this.JSON[type].Series.Characteristic && d.Type === _this.JSON[type].Series.Type; }).Data.map(function (d) { return d[_this.JSON[type].Series.Field]; });
                else if (ds.DataSource.Type === 'OpenHistorian')
                    ss = dd.find(function (d) { return d[_this.By] === _this.Device && d.Phase === _this.JSON[type].Series.Phase && d.SignalType === _this.JSON[type].Series.Type; }).Data.map(function (d) { return d[_this.JSON[type].Series.Field]; });
                else
                    ss = [];
                _this.JSON[type].Max = Math.max.apply(Math, __spreadArray([], __read(ss)));
                _this.JSON[type].Min = Math.min.apply(Math, __spreadArray([], __read(ss)));
                var buffer = (_this.JSON[type].Max - _this.JSON[type].Min) * .10;
                _this.JSON[type].Max = _this.JSON[type].Max + buffer;
                _this.JSON[type].Min = _this.JSON[type].Min - buffer;
            }
            return new XvsY(_this);
        };
        _this.SetAxis = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X[field] = value;
            else
                _this.JSON.Y[field] = value;
            return new XvsY(_this);
        };
        _this.SetSeriesXDA = function (axis, dataSourceID, phase, type, characteristic) {
            _this.JSON[axis].Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Characteristic: characteristic, Field: 'Average' };
            return new XvsY(_this);
        };
        _this.SetSeriesOH = function (axis, dataSourceID, phase, type) {
            _this.JSON[axis].Series = { DataSourceID: dataSourceID, Phase: phase, Type: type, Field: 'Average' };
            return new XvsY(_this);
        };
        _this.UpdateSeries = function (axis, field, value) {
            if (axis === 'x')
                _this.JSON.X.Series[field] = value;
            else
                _this.JSON.Y.Series[field] = value;
            return new XvsY(_this);
        };
        _this.RemoveSeries = function (axis) {
            if (axis === 'x')
                _this.JSON.X.Series = null;
            else
                _this.JSON.Y.Series = null;
            return new XvsY(_this);
        };
        if (_this.JSON === undefined)
            _this.JSON = {
                Y: { Min: 0, Max: 100, Units: '', Series: null },
                X: { Min: 0, Max: 100, Units: '', Series: null },
                TimeMin: null, TimeMax: null, RegressionLine: false
            };
        if (_this.JSON.X == undefined)
            _this.JSON.X = { Min: 0, Max: 100, Units: '', Series: null };
        if (_this.JSON.Y == undefined)
            _this.JSON.Y = { Min: 0, Max: 100, Units: '', Series: null };
        return _this;
    }
    return XvsY;
}(Widget));

function CreateWidget(type, by, device, height, width) {
    if (type == 'Histogram')
        return new Histogram({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    //else if (type == 'Profile')
    //    return new Profile(height, width);
    else if (type == 'Stats')
        return new Stats({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    else if (type == 'Table')
        return new Table({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    else if (type == 'Text')
        return new Text({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    else if (type == 'Trend')
        return new Trend({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
    if (type == 'XvsY')
        return new XvsY({ Height: height, Width: width, By: by, Device: device, Label: type, Type: type, JSON: undefined });
}
function GetColor(label) {
    if (label == undefined)
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
    else if (label.indexOf('Voltage A') >= 0)
        return '#A30000';
    else if (label.indexOf('Voltage B') >= 0)
        return '#0029A3';
    else if (label.indexOf('Voltage C') >= 0)
        return '#007A29';
    else if (label.indexOf('Voltage N') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('Current A') >= 0)
        return '#FF0000';
    else if (label.indexOf('Current B') >= 0)
        return '#0066CC';
    else if (label.indexOf('Current C') >= 0)
        return '#33CC33';
    else if (label.indexOf('AN') >= 0)
        return '#FF0000';
    else if (label.indexOf('BN') >= 0)
        return '#0066CC';
    else if (label.indexOf('CN') >= 0)
        return '#33CC33';
    else if (label.indexOf('NG') >= 0)
        return '#c3c3c3';
    else if (label.indexOf('RES') >= 0)
        return '#ffc107';
    else if (label.indexOf('Average') >= 0)
        return '#9A52A4';
    else if (label.indexOf('Total') >= 0)
        return '#9A52A4';
    else if (label.indexOf('S0') >= 0)
        return '#A30000';
    else if (label.indexOf('S2') >= 0)
        return '#007A29';
    else if (label.indexOf('S1') >= 0)
        return '#0029A3';
    else
        return (0,_gpa_gemstone_helper_functions__WEBPACK_IMPORTED_MODULE_0__.RandomColor)();
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Profile.tsx":
/*!*********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Profile.tsx ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Profile)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  Widgit.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function Profile(props) {
    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", null, "Profile");
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Stats.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Stats.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StatsJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Stats.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};







function StatsJSX(props) {
    var _a;
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _b[0], setToggle = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(props)), 2), record = _c[0], setRecord = _c[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(props));
    }, [props.Data, props.Height, props.Device]);
    var stats = record.Stats();
    var dataSource = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
    var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
    var datum;
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
        datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === record.JSON.Series.Type && dd.Phase === record.JSON.Series.Phase; });
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
        datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === record.JSON.Series.Type && dd.Phase === record.JSON.Series.Phase && dd.Characteristic === record.JSON.Series.Characteristic; });
    else
        datum = { Data: [] };
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("table", { className: 'table' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("thead", null,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", null,
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Category"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("th", null, "Statistic"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("tbody", null, Object.keys(stats).map(function (key) {
                    if (key !== 'Percentile')
                        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, key),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats[key]));
                    else
                        return Object.keys(stats.Percentile).map(function (pkey) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("tr", { key: key + pkey },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null,
                                    pkey,
                                    "th Percentile"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("td", null, stats.Percentile[pkey]));
                        });
                })))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_6__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Stats(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_a = datum) === null || _a === void 0 ? void 0 : _a.Name),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_4__.default, { Index: i, Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = datum) === null || _b === void 0 ? void 0 : _b.Description),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Data: datum })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: record.JSON.Series.Field, onChange: function (evt) { return setRecord(record.SetSeriesField(evt.target.value)); } },
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Table.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Table.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TableJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/react-table */ "./node_modules/@gpa-gemstone/react-table/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_8__);
//******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};









function TableJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(props)), 2), record = _b[0], setRecord = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState('Timestamp'), 2), sortField = _c[0], setSortField = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(true), 2), ascending = _d[0], setAscending = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), data = _e[0], setData = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({}), 2), info = _f[0], setInfo = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(props));
    }, [props.Data, props.Device]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a;
        var dataSource = record.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID === ((_a = record.JSON.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
        var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === record.JSON.Series.Type && dd.Phase === record.JSON.Series.Phase; });
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === record.JSON.Series.Type && dd.Phase === record.JSON.Series.Phase && dd.Characteristic === record.JSON.Series.Characteristic; });
        else
            datum = { Data: [] };
        if (datum == undefined)
            setInfo({});
        else
            setInfo(datum);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var _a;
        var ordered = lodash__WEBPACK_IMPORTED_MODULE_8___default().orderBy((_a = info === null || info === void 0 ? void 0 : info.Data) !== null && _a !== void 0 ? _a : [], [sortField], [ascending ? 'asc' : 'desc']);
        setData(ordered);
    }, [ascending, sortField, info]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height, maxHeight: props.Height, overflowY: 'auto' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_table__WEBPACK_IMPORTED_MODULE_2__.default, { tableClass: 'table', cols: [
                    { key: 'Timestamp', field: 'Timestamp', label: 'Timestamp' },
                    { key: 'Minimum', field: 'Minimum', label: 'Min', content: function (item, key, style) { return item.Minimum.toFixed(record.JSON.Precision); } },
                    { key: 'Average', field: 'Average', label: 'Avg', content: function (item, key, style) { return item.Average.toFixed(record.JSON.Precision); } },
                    { key: 'Maximum', field: 'Maximum', label: 'Max', content: function (item, key, style) { return item.Maximum.toFixed(record.JSON.Precision); } },
                ], data: data, sortKey: sortField, onClick: function (data) { }, ascending: ascending, onSort: function (data) {
                    if (data.colField === sortField)
                        setAscending(!ascending);
                    else {
                        setSortField(data.colField);
                        setAscending(true);
                    }
                } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_7__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_3__.Table(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: "list-group" },
                                    d.DataSource.Type === 'TrenDAPDB' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_b = (_a = info) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null,
                                    d.DataSource.Type === 'OpenHistorian' && record.JSON.Series != undefined ?
                                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { key: i, className: "list-group-item" },
                                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" },
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, (_d = (_c = info) === null || _c === void 0 ? void 0 : _c.Description) !== null && _d !== void 0 ? _d : ''),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_6__.default, { Data: info })),
                                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Precision"),
                                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { className: "form-control", type: "number", value: record.JSON.Precision, onChange: function (evt) { return setRecord(record.SetPrecsision(parseInt(evt.target.value))); } }))))
                                        : null))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Text.tsx":
/*!******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Text.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextJSX)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
//******************************************************************************************************
//  Text.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function TextJSX(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(props)), 2), record = _b[0], setRecord = _b[1];
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("p", { style: { position: 'relative', top: 30 } }, props.JSON.Text)),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width")))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_4__.TextArea, { Record: record.JSON, Field: "Text", Rows: 10, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_2__.Text(__assign(__assign({}, record), { JSON: __assign({}, r) }))); }, Valid: function (field) { return true; } })))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Axis.tsx":
/*!************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Axis.tsx ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Axis)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
//******************************************************************************************************
//  Axis.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function Axis(props) {
    var firstRender = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        firstRender.current = false;
    }, []);
    //const [bins, setBins] = React.useState<number>(props.Series?.BinCount ?? 10);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Units), 2), units = _a[0], setUnits = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Position), 2), position = _b[0], setPosition = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Min), 2), min = _c[0], setMin = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Axis.Max), 2), max = _d[0], setMax = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Units", units);
            props.Callback();
        }
    }, [units]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Position", position);
            props.Callback();
        }
    }, [position]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Max", max);
            props.Callback();
        }
    }, [max]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (!firstRender.current) {
            props.Widget.UpdateAxis(props.Index, "Min", min);
            props.Callback();
        }
    }, [min]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Position"),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: position, onChange: function (evt) { return setPosition(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "left" }, "Left"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "right" }, "Right"))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Units', Record: props.Axis, Type: 'text', Setter: function (r) { return setUnits(r.Units); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Min', Label: 'Min', Record: props.Axis, Type: 'number', Setter: function (r) { return setMin(r.Min); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.Input, { Field: 'Max', Record: props.Axis, Type: 'number', Setter: function (r) { return setMax(r.Max); }, Valid: function (field) { return true; } })),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-2", style: { position: 'relative' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", style: { position: 'absolute', bottom: 16 }, type: "button", onClick: function () {
                    props.Widget.CalculateAxisRange('y', props.Index);
                    props.Callback();
                } }, "Use Data")),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", style: { top: 30 }, onClick: function () {
                    props.Widget.RemoveAxis(props.Index);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/SeriesPicker.tsx":
/*!********************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/SeriesPicker.tsx ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesPicker)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Widget/OpenHistorian/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
//******************************************************************************************************
//  SeriesPicker.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};






function SeriesPicker(props) {
    var _a, _b;
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Axis), 2), axis = _c[0], setAxis = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Color), 2), color = _d[0], setColor = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Series.Field), 2), type = _e[0], setType = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState((_b = (_a = props.Series) === null || _a === void 0 ? void 0 : _a.ShowEvents) !== null && _b !== void 0 ? _b : false), 2), showEvents = _f[0], setShowEvents = _f[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Color", color);
        props.Callback();
    }, [color]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Field", type);
        props.Callback();
    }, [type]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "ShowEvents", showEvents);
        props.Callback();
    }, [showEvents]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        props.Widget.UpdateSeries(props.Index, "Axis", axis);
        props.Widget.CalculateAxisRange('y');
        props.Widget.CalculateAxisRange('x');
        props.Callback();
    }, [axis]);
    function ShowAdditionInfo() {
        if (props.Type === 'TrenDAPDB')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_2__.default, { Index: props.Index, Data: props.Data });
        else if (props.Type === 'OpenHistorian')
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widget_OpenHistorian_AdditionalInfo__WEBPACK_IMPORTED_MODULE_3__.default, { Data: props.Data });
        return null;
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-3" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, props.Series.Label),
                ShowAdditionInfo()),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Field"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Average" }, "Avg"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Minimum" }, "Min"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: "Maximum" }, "Max"))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "YAxis"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: "form-control", value: axis, onChange: function (evt) { return setAxis(parseInt(evt.target.value)); } }, props.Widget.JSON.YAxis.map(function (axis, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: index, key: index }, axis.Units); }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: "form-label" }, "Color"),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "color", className: "form-control", value: color, onChange: function (evt) { return setColor(evt.target.value); } })),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "col-1" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-link", onClick: function () {
                        props.Widget.RemoveSeries(props.Index);
                        props.Callback();
                    } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_4__.CrossMark))),
        (props.Type === 'TrenDAPDB' && props.Data.Events.length > 0 ?
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_1__.CheckBox, { Record: props.Series, Field: 'ShowEvents', Label: 'Show Events', Setter: function (r) { return setShowEvents(!showEvents); } })))
            : null)));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Trend.tsx":
/*!*************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Trend.tsx ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TrendJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! bootstrap-switch-button-react */ "./node_modules/bootstrap-switch-button-react/lib/bootstrap-switch-button-react.js");
/* harmony import */ var bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Axis */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Axis.tsx");
/* harmony import */ var _SeriesPicker__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SeriesPicker */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/SeriesPicker.tsx");
/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ "./node_modules/console-browserify/index.js");
//******************************************************************************************************
//  Trend.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/13/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};












function TrendJSX(props) {
    var _a, _b, _c, _d;
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _e[0], setToggle = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props)), 2), record = _f[0], setRecord = _f[1];
    var hover = react__WEBPACK_IMPORTED_MODULE_1__.useRef(-10);
    var svgs = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);
    var margin = react__WEBPACK_IMPORTED_MODULE_1__.useRef({ bottom: 50, left: 50, top: 40, right: 50 });
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('Pan'), 2), chartAction = _g[0], setChartAction = _g[1];
    var chartActionRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef('Pan');
    var setHover = react__WEBPACK_IMPORTED_MODULE_1__.useCallback(function (value) {
        HandleHoverUpdate(value);
    }, []);
    try {
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props));
        }, [props]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            chartActionRef.current = chartAction;
        }, [chartAction]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            Initialize(record);
        }, [record]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(props));
        }, [props.Height, props.Data, props.Device]);
        react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
            return function () { d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove(); };
        }, []);
    }
    catch (ex) {
        console.log(ex);
    }
    function GetDataSeries(settings, series) {
        var _a, _b, _c, _d, _e;
        var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
        var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
            datum = (_c = (_b = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; })) === null || _b === void 0 ? void 0 : _b.Data) !== null && _c !== void 0 ? _c : [];
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
            datum = (_e = (_d = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; })) === null || _d === void 0 ? void 0 : _d.Data) !== null && _e !== void 0 ? _e : [];
        else
            datum = [];
        return datum.map(function (d) { return [new Date(d.Timestamp).getTime(), d[series.Field]]; });
    }
    function Initialize(settings) {
        //d3.select(ref.current).selectAll('svg').remove()
        var svgCount = 1;
        if (settings.JSON.Split && settings.JSON.SplitType === 'Axis') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.YAxis.length;
        }
        else if (settings.JSON.Split && settings.JSON.SplitType === 'Series') {
            margin.current = { bottom: 50, left: 50, top: 40, right: 50 };
            svgCount = settings.JSON.Series.length;
        }
        else
            margin.current = {
                bottom: 50,
                left: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).length * 50),
                top: 40,
                right: (settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length == 0 ? 50 : settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).length * 50)
            };
        if (settings.JSON.Legend)
            margin.current.right = margin.current.right + 200;
        var svgHeight = props.Height / svgCount;
        if (svgs.current.length !== svgCount) {
            svgs.current = [];
            d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
            for (var i = 0; i < svgCount; i++) {
                var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).append('svg');
                svg.attr('width', settings.Width).attr('height', svgHeight);
                svgs.current.push(svg);
            }
        }
        var x = GetXScale(settings);
        svgs.current.forEach(function (svg, i) {
            if (settings.JSON.Split && settings.JSON.SplitType === 'Axis')
                return InitializeSplitOnAxis(settings, svg, x, i);
            if (settings.JSON.Split && settings.JSON.SplitType === 'Series')
                return InitializeSplitOnSeries(settings, svg, x, i);
            else
                return InitializeNotSplit(settings, svg, x);
        });
    }
    function InitializeSplitOnSeries(settings, svg, x, i) {
        var svgHeight = parseInt(svg.attr('height'));
        var series = settings.JSON.Series[i];
        var axis = settings.JSON.YAxis[series.Axis];
        var field = series.Field;
        AddXAxis(svg, x);
        var y = GetYScale(settings, svgHeight, axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        //const dataSource = record.Data.find(dd => dd.DataSource.ID ===series?.DataSourceID ?? 0)
        //const data = dataSource?.Data ?? [];
        //let datum;
        //if (dataSource?.DataSource.Type === 'OpenHistorian')
        //    datum = data.find((dd: TrenDAP.iOpenHistorianReturn) => dd[props.By] === props.Device && dd.SignalType === (series as TrenDAP.iTrendTemplateSeriesOpenHistorian).Type && dd.Phase === (series as TrenDAP.iTrendTemplateSeriesOpenHistorian).Phase);
        //if (dataSource?.DataSource.Type === 'TrenDAPDB')
        //    datum = data.find((dd: TrenDAP.iXDAReturnData) => dd[props.By] === props.Device && dd.Type === (series as TrenDAP.iTrendTemplateSeriesXDA).Type && dd.Phase === (series as TrenDAP.iTrendTemplateSeriesXDA).Phase && dd.Characteristic === (series as TrenDAP.iTrendTemplateSeriesXDA).Characteristic);
        //else
        //    datum = {Data: []};
        var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd[0]); }).y(function (dd) { return y(dd[1]); });
        var data = GetDataSeries(settings, series);
        svg.selectAll("g.line").remove();
        svg.selectAll('g.line')
            .data([data])
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", series.Color)
            .attr("d", function (d) {
            return lineFunc(data);
        });
        if (series.ShowEvents) {
            AddEventLine(series, svg, x);
        }
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, [series]);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeSplitOnAxis(settings, svg, x, i) {
        var svgHeight = parseInt(svg.attr('height'));
        var axis = settings.JSON.YAxis[i];
        var series = settings.JSON.Series.filter(function (s) { return s.Axis === i; }).map(function (s) {
            var _a, _b;
            var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (s === null || s === void 0 ? void 0 : s.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum;
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === s.Type && dd.Phase === s.Phase; });
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === s.Type && dd.Phase === s.Phase && dd.Characteristic === s.Characteristic; });
            else
                datum = { Data: [] };
            datum = (_b = datum === null || datum === void 0 ? void 0 : datum.Data) !== null && _b !== void 0 ? _b : [];
            return __assign(__assign({}, s), { Data: datum.filter(function (ds) { return moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() >= settings.JSON.Min && moment__WEBPACK_IMPORTED_MODULE_7___default()(ds.Timestamp).toDate().getTime() <= settings.JSON.Max && ds[s.Field] >= axis.Min && ds[s.Field] <= axis.Max; }).map(function (point) { return [point.Timestamp, point[s.Field]]; }) });
        });
        AddXAxis(svg, x);
        var y = GetYScale(settings, svgHeight, axis);
        svg.selectAll('g.yaxis').remove();
        AddYAxisLeft(axis, svg, y);
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(series)
            .enter()
            .append('g')
            .classed('line', true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (s) { return s.Color; })
            .attr("d", function (s) {
            var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd[0]); }).y(function (dd) { return y(dd[1]); });
            var data = GetDataSeries(settings, s);
            return lineFunc(data);
        });
        series.forEach(function (s) { return AddEventLine(s, svg, x); });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, series);
        }
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
    }
    function InitializeNotSplit(settings, svg, x) {
        AddXAxis(svg, x);
        var y = settings.JSON.YAxis.map(function (axis) { return GetYScale(settings, settings.Height, axis); });
        svg.selectAll('g.yaxis').remove();
        var yAxis = settings.JSON.YAxis.map(function (axis, index) {
            var a;
            if (axis.Position === 'left') {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'left'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisLeft(axis, svg, y[index], false, ind);
            }
            else {
                var ind = settings.JSON.YAxis.filter(function (axis) { return axis.Position === 'right'; }).findIndex(function (axis) { return axis === settings.JSON.YAxis[index]; });
                AddYAxisRight(axis, svg, y[index], ind);
            }
            return a;
        });
        svg.selectAll("g.legend").remove();
        if (settings.JSON.Legend) {
            AddLegend(svg, settings.JSON.Series);
        }
        svg.selectAll("g.line").remove();
        svg.selectAll("g.line")
            .data(settings.JSON.Series)
            .enter()
            .append("g")
            .classed("line", true)
            .append("path")
            .attr("fill", "none")
            .attr("stroke-width", 1.5)
            .attr("stroke", function (d) { return d.Color; })
            .attr("d", function (d) {
            var yScale = y[d.Axis];
            var lineFunc = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (dd) { return x(dd[0]); }).y(function (dd) { return yScale(dd[1]); });
            var data = GetDataSeries(settings, d);
            return lineFunc(data);
        });
        svg.on('mousemove', function (d) { return setHover(d.offsetX); });
        svg.on('mousedown', function (d) { return HandleChartAction(d, svg, x); });
        settings.JSON.Series.filter(function (series) { return series.ShowEvents; }).forEach(function (series) { return AddEventLine(series, svg, x); });
    }
    function AddLegend(svg, series) {
        var svgHeight = parseInt(svg.attr('height'));
        var svgWidth = parseInt(svg.attr('width'));
        var legend = svg.selectAll('g.legend')
            .data([series])
            .enter()
            .append('g')
            .attr('class', 'legend')
            .attr('transform', "translate(" + (svgWidth - 200) + "," + margin.current.top + ")");
        var legendRows = legend.selectAll('g.legendRow')
            .data(function (d) { return d; })
            .enter()
            .append('g')
            .attr('class', 'legendrow')
            .attr('transform', function (d, i) { return "translate(10," + i * 30 + ")"; });
        legendRows.append('rect').attr('height', 20).attr('width', 20).attr('fill', function (d) { return d.Color; });
        legendRows.append('text').attr('x', 30).attr('y', 15)
            .text(function (d) {
            if (d.Label.length > 15)
                return d.Label.slice(0, 15) + '...';
            else
                return d.Label;
        });
        legendRows.append('title').text(function (d) { return d.Label; });
    }
    function AddEventLine(series, svg, x) {
        var _a, _b, _c;
        var svgHeight = parseInt(svg.attr('height'));
        var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
        var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if (dataSource.DataSource.Type === 'TrenDAPDB')
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
        else
            return;
        var d = (_c = (_b = datum) === null || _b === void 0 ? void 0 : _b.Events) !== null && _c !== void 0 ? _c : [];
        svg.selectAll('g.event-line').remove();
        var g = svg.selectAll('g.event-line')
            .data(d)
            .enter()
            .append('g')
            .classed('event-line', true);
        g.append('path')
            .attr('stroke-width', '2px')
            .attr("d", function (d) { return "M0," + (svgHeight - margin.current.bottom - margin.current.top) + "L-10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + ",L10," + (svgHeight - margin.current.bottom - margin.current.top + 10) + "L0," + (svgHeight - margin.current.bottom - margin.current.top) + "Z"; })
            .attr("transform", function (d) { return "translate(" + x(moment__WEBPACK_IMPORTED_MODULE_7___default()(d.StartTime, 'YYYY-MM-DDTHH:mm:ss.fff')) + "," + margin.current.top + ")"; })
            .attr('stroke', 'red')
            .attr('fill', 'red')
            .style('cursor', 'pointer')
            .on('click', function (e, d) {
            window.open(record.Data.find(function (ds) { return ds.DataSource.ID === series.DataSourceID; }).DataSource.OpenSEE + '?eventID=' + d.ID);
        });
    }
    function AddXAxis(svg, x) {
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        svg.selectAll('g.xaxis').remove();
        var xAxis = svg.append("g").classed('xaxis', true)
            .attr("transform", "translate(0," + (svgHeight - margin.current.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("g").classed('xaxis', true).append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (svgWidth / 2) + "," + (svgHeight - margin.current.bottom / 3) + ")")
            .text("Time");
    }
    function AddYAxisLeft(axis, svg, y, rotate, index) {
        if (rotate === void 0) { rotate = true; }
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (margin.current.left - index * 50) + ",0)")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return d3__WEBPACK_IMPORTED_MODULE_0__.format("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        if (rotate)
            text.attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + ((margin.current.left - index * 50) / 3) + ")").style("text-anchor", "middle");
        else
            text.attr("transform", "translate(" + (margin.current.left - index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "end");
    }
    function AddYAxisRight(axis, svg, y, index) {
        if (index === void 0) { index = 0; }
        var svgWidth = parseInt(svg.attr('width'));
        var svgHeight = parseInt(svg.attr('height'));
        var yAxis = svg.append("g").classed('yaxis', true)
            .attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + ",0)")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisRight(y).ticks(Math.floor(svgHeight / 50) + 1).tickFormat(function (value) { return d3__WEBPACK_IMPORTED_MODULE_0__.format("~s")(value); }));
        var text = svg.append("g")
            .classed('yaxis', true)
            .append("text")
            .text(axis.Units);
        text.attr("transform", "translate(" + (svgWidth - margin.current.right + index * 50) + "," + (svgHeight - margin.current.bottom / 2) + ")").style("text-anchor", "start");
    }
    function GetXScale(settings) {
        var d = settings.JSON.Series.map(function (s) { return GetDataSeries(settings, s); });
        var dd = [].concat.apply([], __spreadArray([], __read(d)));
        var ddx = dd.map(function (dp) { return new Date(dp.Timestamp).getTime(); });
        var xMax = Math.max.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[0]; }))));
        var xMin = Math.min.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[0]; }))));
        return d3__WEBPACK_IMPORTED_MODULE_0__.scaleUtc()
            .domain([xMin, xMax]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([margin.current.left, settings.Width - margin.current.right]);
    }
    function GetYScale(settings, svgHeight, axis) {
        var d = settings.JSON.Series.map(function (s) { return GetDataSeries(settings, s); });
        var dd = [].concat.apply([], __spreadArray([], __read(d)));
        var yMax = Math.max.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[1]; }))));
        var yMin = Math.min.apply(Math, __spreadArray([], __read(dd.map(function (dp) { return dp[1]; }))));
        return d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.current.bottom, margin.current.top])
            .domain([yMin, yMax]);
    }
    function HandleHoverUpdate(hover) {
        if (chartActionRef.current !== 'Click')
            return;
        svgs.current.forEach(function (svg, index) {
            var height = parseInt(svg.attr('height')) - margin.current.top - margin.current.bottom;
            if (hover >= margin.current.left && hover <= (props.Width - margin.current.right)) {
                svg.selectAll('g.mouse-over').remove();
                svg.append('g')
                    .classed('mouse-over', true)
                    .append('path')
                    .attr("d", function (d) { return "M 0 0 V " + height; })
                    .attr("transform", "translate(" + hover + "," + margin.current.top + ")")
                    .attr('stroke', 'gray');
            }
        });
    }
    function HandleReset() {
        setRecord(record.CalculateAxisRange('x'));
    }
    function HandleChartAction(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var width = parseInt(svg.attr('width'));
        evt.preventDefault();
        if (evt.offsetX < margin.current.left || evt.offsetX > width - margin.current.right)
            return;
        else if (evt.offsetY < margin.current.top || evt.offsetY > height - margin.current.bottom)
            return;
        else if (chartActionRef.current == 'Click')
            OnClick(evt, svg, scale);
        else if (chartActionRef.current == 'Pan')
            OnPan(evt, svg, scale);
        else if (chartActionRef.current == 'ZoomX')
            OnXZoom(evt, svg, scale);
    }
    function OnClick(evt, svg, scale) {
        var height = parseInt(svg.attr('height'));
        var tooltipHeight = record.JSON.Series.length * 15;
        if (evt.offsetX < margin.current.left && evt.offsetX > (props.Width - margin.current.right))
            return;
        svg.selectAll('g.mouse-over2').remove();
        svg.append('g')
            .classed('mouse-over2', true)
            .append('path')
            .attr("d", function (d) { return "M 0 0 V " + (height - margin.current.bottom - margin.current.top); })
            .attr("transform", "translate(" + evt.offsetX + "," + margin.current.top + ")")
            .attr('stroke', 'grey');
        svg.selectAll('g.charttooltip').remove();
        var tooltip = svg.append('g')
            .attr('class', 'charttooltip')
            .attr("transform", "translate(" + (evt.offsetX + 15) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
        var rect = tooltip.append('rect')
            .attr('fill', 'gainsboro')
            .attr('height', record.JSON.Series.length + 'em')
            .attr('width', 200)
            .attr('x', 0)
            .attr('y', 0);
        var text = tooltip.append('text')
            .attr('x', 0)
            .attr('y', 0);
        var width = 200;
        record.JSON.Series.forEach(function (series, index) {
            var _a, _b;
            tooltip.append('rect').attr('x', 5).attr('y', index + "em").attr('height', '1em').attr('width', '1em').attr('fill', series.Color);
            var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
            var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
            var datum;
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
            if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
                datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
            else
                datum = { Data: [] };
            datum = (_b = datum === null || datum === void 0 ? void 0 : datum.Data) !== null && _b !== void 0 ? _b : [];
            var floor = Math.floor(datum.length * evt.offsetX / props.Width * .95);
            var ceil = Math.ceil(datum.length * evt.offsetX / props.Width * 1.05);
            var shortenedData = datum.slice(floor, ceil);
            var dist = shortenedData.map(function (d) { return ({ Value: d[series.Field], Distance: Math.abs(evt.offsetX - scale(moment__WEBPACK_IMPORTED_MODULE_7___default()(d.Timestamp, 'YYYY-MM-DDTHH:mm:ss.fffZ').toDate().getTime())) }); });
            dist.sort(function (a, b) {
                if (a.Distance > b.Distance)
                    return 1;
                else if (a.Distance == b.Distance)
                    return 0;
                else
                    return -1;
            });
            var formated = d3__WEBPACK_IMPORTED_MODULE_0__.format('.2f')(dist[0].Value);
            text.append('tspan').text(series.Label + ' - ' + formated).attr('x', '1.5em').attr('y', index + 1 + "em");
            width = text.node().getBBox().width + 25 > width ? text.node().getBBox().width + 25 : width;
        });
        rect.attr('width', width);
        if (width > props.Width - margin.current.right - evt.offsetX)
            tooltip.attr("transform", "translate(" + (evt.offsetX - 15 - width) + "," + (evt.offsetY - tooltipHeight / 2) + ")");
    }
    function OnPan(evt, svg, scale) {
        var start = evt.clientX;
        svg.on('mousemove.pan', function (e) {
            record.UpdateJSON('Min', scale.invert(scale.range()[0] + start - e.clientX).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(scale.range()[1] + start - e.clientX).getTime())));
        });
        svg.on('mouseup.pan', function () { return svg.on('mousemove.pan', null); });
    }
    function OnXZoom(evt, svg, scale) {
        var start = evt.offsetX;
        var brush = d3__WEBPACK_IMPORTED_MODULE_0__.brushX()
            .extent([[margin.current.left, margin.current.top + 0.5], [props.Width - margin.current.right, parseInt(svg.attr('height')) - margin.current.bottom + 0.5]]);
        var br = svg.append('g').call(brush);
        br.call(brush.move, [start, start + 1]);
        svg.on('mousemove.brush', function (e) {
            br.call(brush.move, [start, e.offsetX]);
        });
        svg.on('mouseup.brush', function (e) {
            var min = Math.min(start, e.offsetX);
            var max = Math.max(start, e.offsetX);
            record.UpdateJSON('Min', scale.invert(min).getTime());
            setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record.UpdateJSON('Max', scale.invert(max).getTime())));
            br.remove();
            svg.on('mousemove.brush', null);
            svg.on('mouseup.brush', null);
        });
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref, style: { userSelect: 'none' } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { style: { position: 'absolute', left: 10, zIndex: 1010 } }))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'row' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-1' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Split"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9___default()), { checked: (_b = (_a = record === null || record === void 0 ? void 0 : record.JSON) === null || _a === void 0 ? void 0 : _a.Split) !== null && _b !== void 0 ? _b : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Split', checked)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Select, { Label: 'Split On', Field: 'SplitType', Record: record === null || record === void 0 ? void 0 : record.JSON, Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(__assign(__assign({}, record), { JSON: r }))); }, Options: [{ Value: 'Axis', Label: 'Axis' }, { Value: 'Series', Label: 'Series' }] })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: 'col-2' },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Legend"),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement((bootstrap_switch_button_react__WEBPACK_IMPORTED_MODULE_9___default()), { checked: (_d = (_c = record.JSON) === null || _c === void 0 ? void 0 : _c.Legend) !== null && _d !== void 0 ? _d : false, onChange: function (checked) { return setRecord(record.UpdateJSON('Legend', checked)); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Axis"),
                " ",
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { style: { position: 'relative', float: 'right', top: -30 }, className: 'btn btn-link', onClick: function () {
                        record.AddAxis();
                        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record));
                    } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_5__.Plus),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group list-group-flush", style: { maxHeight: window.innerHeight - 625, overflowY: 'auto', overflowX: 'hidden', width: '100%' } }, record.JSON.YAxis.map(function (axis, index) { return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: index, className: 'list-group-item' },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Axis__WEBPACK_IMPORTED_MODULE_10__.default, { Axis: axis, Index: index, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }))); }))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 250 } }, record.Data.map(function (d, i) {
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                (d.DataSource.Type === 'TrenDAPDB' ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddVoltageRMS(d.DataSource.ID)); } }, "Quick Add VRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.QuickAddCurrentRMS(d.DataSource.ID)); } }, "Quick Add IRMS"),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: 'btn btn-primary', onClick: function () { return setRecord(record.RemoveAll(d.DataSource.ID)); } }, "Remove All")) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } }),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("ul", { className: "list-group" }, (record.JSON.Series).map(function (series, ind) {
                                    var _a, _b;
                                    var dataSource = record.Data.find(function (dd) { var _a; return (_a = dd.DataSource.ID === (series === null || series === void 0 ? void 0 : series.DataSourceID)) !== null && _a !== void 0 ? _a : 0; });
                                    var data = (_a = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _a !== void 0 ? _a : [];
                                    var datum;
                                    if (dataSource.DataSource.Type === 'OpenHistorian')
                                        datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === series.Type && dd.Phase === series.Phase; });
                                    if (dataSource.DataSource.Type === 'TrenDAPDB')
                                        datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === series.Type && dd.Phase === series.Phase && dd.Characteristic === series.Characteristic; });
                                    else
                                        datum = { Data: [] };
                                    var d = (_b = datum === null || datum === void 0 ? void 0 : datum.Data) !== null && _b !== void 0 ? _b : [];
                                    if (datum === undefined)
                                        return null;
                                    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("li", { key: ind, className: "list-group-item" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_SeriesPicker__WEBPACK_IMPORTED_MODULE_11__.default, { Type: dataSource.DataSource.Type, Index: ind, Series: series, Data: datum, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_6__.Trend(record)); } })));
                                })))));
                }))))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx":
/*!*************************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/AdditionalInfo.tsx ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************


function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    var id = lodash__WEBPACK_IMPORTED_MODULE_1___default().uniqueId('dropdown-');
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: id, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": id },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Device: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Device),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Reference: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.SignalReference),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Signal Type: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.SignalType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Engineering Units: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.EngineeringUnits),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phasor Type: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.PhasorType),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Description: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Description))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/SeriesSelect.tsx":
/*!***********************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/SeriesSelect.tsx ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/application-typings */ "./node_modules/@gpa-gemstone/application-typings/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};


function SeriesSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(undefined), 2), dataSource = _a[0], setDataSource = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState({ ID: '0' }), 2), selected = _b[0], setSelected = _b[1];
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(''), 2), delimeter = _c[0], setDelimeter = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('VPHM'), 2), type = _d[0], setType = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('A'), 2), phase = _e[0], setPhase = _e[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } }, _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenHistorian.Lists.SignalTypes.map(function (a, i) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: i, value: a }, a); })),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: phase, onChange: function (evt) { return setPhase(evt.target.value); } }, _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenHistorian.Lists.Phases.map(function (a, i) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: i, value: a }, a); })),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-append" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                        if (props.Widget.Type === 'Histogram')
                            props.Widget.AddSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'Trend')
                            props.Widget.AddSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'Stats')
                            props.Widget.SetSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'Table')
                            props.Widget.SetSeriesOH(props.DataSourceID, phase, type);
                        else if (props.Widget.Type === 'XvsY')
                            props.Widget.SetSeriesOH(props.Axis, props.DataSourceID, phase, type);
                        props.Callback();
                    } }, "Select")))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx":
/*!***************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Widgit),
/* harmony export */   "SeriesSelect": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
/* harmony import */ var _XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./XDA/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/SeriesSelect.tsx");
/* harmony import */ var _OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./OpenHistorian/SeriesSelect */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/OpenHistorian/SeriesSelect.tsx");
//******************************************************************************************************
//  Widget.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};




function Widgit(props) {
    return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: props.Toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog mw-100 w-75", role: "document" },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content mx-auto" },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" },
                        props.Label,
                        " Settings"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return props.SetToggle(false); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "row" }, props.children)),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                            props.Update(props.Record);
                            props.SetToggle(false);
                        } }, "Save changes"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-danger", onClick: function () {
                            props.Remove();
                            props.SetToggle(false);
                        } }, "Delete Widgit"),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return props.SetToggle(false); } }, "Close"))))), document.getElementById("window"));
}
function SeriesSelect(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(undefined), 2), dataSource = _a[0], setDataSource = _a[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
            //setSelected((dataSource?.Data ?? [undefined])[0]);
        }
    }, [props.Widget.Data]);
    if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_XDA_SeriesSelect__WEBPACK_IMPORTED_MODULE_2__.default, __assign({}, props));
    else if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_OpenHistorian_SeriesSelect__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else
        return null;
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx":
/*!***************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AdditionalInfo)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
//******************************************************************************************************
//  AdditionalInfo.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************

function AdditionalInfo(props) {
    var _a, _b, _c, _d, _e, _f, _g;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown" },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "form-control dropdown-toggle", type: "button", id: "dropdownMenuButton" + props.Index, "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, "Addition Info"),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu", "aria-labelledby": "dropdownMenuButton" + props.Index },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Meter: ", (_a = props.Data) === null || _a === void 0 ? void 0 :
                _a.Meter),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Asset: ", (_b = props.Data) === null || _b === void 0 ? void 0 :
                _b.Asset),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Characteristic: ", (_c = props.Data) === null || _c === void 0 ? void 0 :
                _c.Characteristic),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Type: ", (_d = props.Data) === null || _d === void 0 ? void 0 :
                _d.Type),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Station: ", (_e = props.Data) === null || _e === void 0 ? void 0 :
                _e.Station),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Phase: ", (_f = props.Data) === null || _f === void 0 ? void 0 :
                _f.Phase),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-item" },
                "Harmonic: ", (_g = props.Data) === null || _g === void 0 ? void 0 :
                _g.Harmonic))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/SeriesSelect.tsx":
/*!*************************************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/SeriesSelect.tsx ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SeriesSelect)
/* harmony export */ });
/* harmony import */ var _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @gpa-gemstone/application-typings */ "./node_modules/@gpa-gemstone/application-typings/lib/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
//******************************************************************************************************
//  SeriesSelect.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/10/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function SeriesSelect(props) {
    var _a, _b, _c;
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(undefined), 2), dataSource = _d[0], setDataSource = _d[1];
    var _e = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState({ ID: 0 }), 2), selected = _e[0], setSelected = _e[1];
    var _f = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('Voltage'), 2), measurementType = _f[0], setMeasurementType = _f[1];
    var _g = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('RMS'), 2), measurementCharacteristic = _g[0], setMeasurementCharacteristic = _g[1];
    var _h = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState('AN'), 2), phase = _h[0], setPhase = _h[1];
    var _j = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(''), 2), delimeter = _j[0], setDelimeter = _j[1];
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_2__.useDispatch)();
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        var dataSource = props.Widget.Data.find(function (d) { return d.DataSource.ID === props.DataSourceID; });
        if (dataSource != undefined) {
            setDataSource(dataSource);
        }
    }, [props.Widget.Data]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: measurementType, onChange: function (evt) { return setMeasurementType(evt.target.value); } }, ((_a = _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenXDA.Lists.MeasurementTypes) !== null && _a !== void 0 ? _a : []).sort(function (a, b) {
            if (a > b)
                return 1;
            else if (a == b)
                return 0;
            else
                -1;
        }).map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: mts, value: mts }, mts); })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: measurementCharacteristic, onChange: function (evt) { return setMeasurementCharacteristic(evt.target.value); } }, ((_b = _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenXDA.Lists.MeasurementCharacteristics) !== null && _b !== void 0 ? _b : []).sort(function (a, b) {
            if (a > b)
                return 1;
            else if (a == b)
                return 0;
            else
                -1;
        }).map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: mts, value: mts }, mts); })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: phase, onChange: function (evt) { return setPhase(evt.target.value); } }, ((_c = _gpa_gemstone_application_typings__WEBPACK_IMPORTED_MODULE_0__.OpenXDA.Lists.Phases) !== null && _c !== void 0 ? _c : []).sort(function (a, b) {
            if (a > b)
                return 1;
            else if (a == b)
                return 0;
            else
                -1;
        }).map(function (mts) { return react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { key: mts, value: mts }, mts); })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-append" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function () {
                    if (props.Widget.Type === 'Histogram')
                        props.Widget.AddSeriesXDA(props.DataSourceID, phase, measurementType, measurementCharacteristic);
                    else if (props.Widget.Type === 'Trend')
                        props.Widget.AddSeriesXDA(props.DataSourceID, phase, measurementType, measurementCharacteristic);
                    else if (props.Widget.Type === 'Stats')
                        props.Widget.SetSeriesXDA(props.DataSourceID, phase, measurementType, measurementCharacteristic);
                    else if (props.Widget.Type === 'Table')
                        props.Widget.SetSeriesXDA(props.DataSourceID, phase, measurementType, measurementCharacteristic);
                    else if (props.Widget.Type === 'XvsY')
                        props.Widget.SetSeriesXDA(props.Axis, props.DataSourceID, phase, measurementType, measurementCharacteristic);
                    props.Callback();
                } }, "Select"))));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/Widgets/Templatable/XvsY.tsx":
/*!******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/Widgets/Templatable/XvsY.tsx ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ XvsYJSX)
/* harmony export */ });
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @gpa-gemstone/react-forms */ "./node_modules/@gpa-gemstone/react-forms/lib/index.js");
/* harmony import */ var _Widget_Widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Widget/Widget */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/Widget.tsx");
/* harmony import */ var _Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Widget/XDA/AdditionalInfo */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Widget/XDA/AdditionalInfo.tsx");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Implementations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var react_datetime_css_react_datetime_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-datetime/css/react-datetime.css */ "./node_modules/react-datetime/css/react-datetime.css");
/* harmony import */ var simple_statistics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! simple-statistics */ "./node_modules/simple-statistics/dist/simple-statistics.mjs");
//******************************************************************************************************
//  XvsY.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/16/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};










function XvsYJSX(props) {
    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(props)), 2), record = _b[0], setRecord = _b[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        Initialize(record);
    }, [record]);
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(props));
    }, [props.Height, props.Data, props.Device]);
    function Zip(array1, field1, array2, field2, zipField) {
        var returnArray = [];
        if (array1.length > array2.length) {
            array1.forEach(function (xd, i) {
                var array2Point = array2.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array2Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array1: xd[field1], Array2: array2Point[field2]
                });
            });
        }
        else {
            array2.forEach(function (xd, i) {
                var array1Point = array1.find(function (point) { return point[zipField] === xd[zipField]; });
                if (array1Point == undefined)
                    return;
                returnArray.push({
                    ZipField: xd[zipField], Array2: xd[field1], Array1: array1Point[field2]
                });
            });
        }
        return returnArray;
    }
    function Initialize(settings) {
        var _a, _b, _c, _d, _e, _f;
        if (settings.JSON.X.Series == undefined || settings.JSON.Y.Series == undefined || ((_a = settings === null || settings === void 0 ? void 0 : settings.Data.length) !== null && _a !== void 0 ? _a : 0) == 0)
            return;
        var dataSource = settings.Data.find(function (dd) { var _a, _b; return (_b = dd.DataSource.ID === ((_a = settings.JSON.X.Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
        var data = (_b = dataSource === null || dataSource === void 0 ? void 0 : dataSource.Data) !== null && _b !== void 0 ? _b : [];
        var xSeries, ySeries;
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'OpenHistorian') {
            xSeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === settings.JSON.X.Series.Type && dd.Phase === settings.JSON.X.Series.Phase; });
            ySeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === settings.JSON.Y.Series.Type && dd.Phase === settings.JSON.Y.Series.Phase; });
        }
        if ((dataSource === null || dataSource === void 0 ? void 0 : dataSource.DataSource.Type) === 'TrenDAPDB') {
            xSeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === settings.JSON.X.Series.Type && dd.Phase === settings.JSON.X.Series.Phase && dd.Characteristic === settings.JSON.X.Series.Characteristic; });
            ySeries = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === settings.JSON.Y.Series.Type && dd.Phase === settings.JSON.Y.Series.Phase && dd.Characteristic === settings.JSON.Y.Series.Characteristic; });
        }
        else {
            xSeries = { Data: [] };
            ySeries = { Data: [] };
        }
        var xMax = 100, xMin = 0, yMax = 100, yMin = 0;
        if ((xSeries === null || xSeries === void 0 ? void 0 : xSeries.Data.length) > 0) {
            xMax = Math.max.apply(Math, __spreadArray([], __read(xSeries.Data.map(function (d) { return d[settings.JSON.X.Series.Field]; }))));
            xMin = Math.min.apply(Math, __spreadArray([], __read(xSeries.Data.map(function (d) { return d[settings.JSON.X.Series.Field]; }))));
        }
        if ((xSeries === null || xSeries === void 0 ? void 0 : xSeries.Data.length) > 0) {
            yMax = Math.max.apply(Math, __spreadArray([], __read(ySeries.Data.map(function (d) { return d[settings.JSON.Y.Series.Field]; }))));
            yMin = Math.min.apply(Math, __spreadArray([], __read(ySeries.Data.map(function (d) { return d[settings.JSON.Y.Series.Field]; }))));
        }
        var margin = { bottom: 50, left: 50, top: 40, right: 50 };
        var svgHeight = props.Height;
        d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current).selectAll('svg').remove();
        var x = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .domain([xMin, xMax]) // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, settings.Width - margin.left - margin.right]);
        var y = d3__WEBPACK_IMPORTED_MODULE_0__.scaleLinear()
            .range([svgHeight - margin.top - margin.bottom, 0])
            .domain([yMin, yMax]); // d3.hist has to be called before the Y axis obviously
        var svg = d3__WEBPACK_IMPORTED_MODULE_0__.select(ref.current)
            .append('svg')
            .attr('width', settings.Width)
            .attr('height', svgHeight);
        var xAxis = svg.append("g")
            .attr("transform", "translate(" + margin.left + "," + (svgHeight - margin.bottom) + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisBottom(x));
        svg.append("text")
            .style("text-anchor", "middle")
            .attr("transform", "translate(" + (settings.Width / 2) + "," + (svgHeight - margin.bottom / 3) + ")")
            .text(settings.JSON.X.Units);
        var yAxis = svg.append("g")
            .attr("transform", "translate(" + (margin.left) + "," + margin.top + ")")
            .call(d3__WEBPACK_IMPORTED_MODULE_0__.axisLeft(y));
        svg.append("text")
            .attr("transform", "rotate(-90) translate(-" + svgHeight / 2 + "," + (margin.left / 3) + ")")
            .style("text-anchor", "middle")
            .text(settings.JSON.Y.Units);
        var xData = (_d = (_c = GetDatum('X')) === null || _c === void 0 ? void 0 : _c.Data) !== null && _d !== void 0 ? _d : [];
        var yData = (_f = (_e = GetDatum('Y')) === null || _e === void 0 ? void 0 : _e.Data) !== null && _f !== void 0 ? _f : [];
        var combinedData = Zip(xData, record.JSON.X.Series.Field, yData, record.JSON.Y.Series.Field, 'Timestamp');
        //const combinedData = xData.map((xd, i) => ({ Timestamp: xd.Timestamp, X: xd[record.JSON.XSeries.Field], Y: yData[i][record.JSON.YSeries.Field] }))
        //const filteredData = combinedData.filter(d => moment(d.ZipField).toDate().getTime() >= record.JSON.TimeMin && moment(d.ZipField).toDate().getTime() <= record.JSON.TimeMax);
        svg.selectAll("dot")
            .data(combinedData)
            .enter().append("circle")
            .attr("r", 3.5)
            .attr("cx", function (d) { return x(d.Array1); })
            .attr("cy", function (d) { return y(d.Array2); })
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (record.JSON.RegressionLine) {
            var data_1 = combinedData.map(function (d) { return [d.Array1, d.Array2]; });
            var model = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_9__.linearRegression)(data_1);
            var lrLine_1 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_9__.linearRegressionLine)(model);
            var r2 = (0,simple_statistics__WEBPACK_IMPORTED_MODULE_9__.rSquared)(data_1, lrLine_1);
            var lineFunc_1 = d3__WEBPACK_IMPORTED_MODULE_0__.line().x(function (d) { return x(d[0]); }).y(function (d) { return y(lrLine_1(d[0])); });
            svg.append('text')
                .attr('stroke', 'red')
                .attr("transform", "translate(" + (props.Width - margin.left - margin.right) + "," + margin.top + ")")
                .text("R2 - " + r2.toFixed(3));
            svg.append("path")
                .data([data_1])
                .attr("fill", "none")
                .attr("stroke-width", 1.5)
                .attr("stroke", 'red')
                .attr("d", function (d) { return lineFunc_1(d); })
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        }
    }
    function GetDatum(axis) {
        var _a;
        if (record.JSON[axis].Series == undefined)
            return { Name: '' };
        var ds = record.Data.find(function (dd) { var _a, _b; return (_b = (dd === null || dd === void 0 ? void 0 : dd.DataSource.ID) === ((_a = record.JSON[axis].Series) === null || _a === void 0 ? void 0 : _a.DataSourceID)) !== null && _b !== void 0 ? _b : 0; });
        var data = (_a = ds === null || ds === void 0 ? void 0 : ds.Data) !== null && _a !== void 0 ? _a : [];
        var datum;
        if ((ds === null || ds === void 0 ? void 0 : ds.DataSource.Type) === 'OpenHistorian')
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.SignalType === record.JSON[axis].Series.Type && dd.Phase === record.JSON[axis].Series.Phase; });
        if ((ds === null || ds === void 0 ? void 0 : ds.DataSource.Type) === 'TrenDAPDB')
            datum = data.find(function (dd) { return dd[props.By] === props.Device && dd.Type === record.JSON[axis].Series.Type && dd.Phase === record.JSON[axis].Series.Phase && dd.Characteristic === record.JSON[axis].Series.Characteristic; });
        else
            datum = { Name: '' };
        return datum;
    }
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card", style: { width: props.Width, height: props.Height } },
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body", style: { padding: 0 } },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-label"] },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("span", null,
                    props.Label,
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn " + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default["widgit-controls"], title: 'Widget Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { ref: ref })),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props, { Record: record, Toggle: toggle, SetToggle: function (bool) { return setToggle(bool); } }),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Field: 'Label', Record: record, Type: 'text', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(r)); }, Valid: function (field) { return true; } }),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, "Width"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("input", { type: "number", className: "form-control", value: record === null || record === void 0 ? void 0 : record.Width, onChange: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: parseInt(evt.target.value) }))); } }),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "input-group-prepend" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(__assign(__assign({}, record), { Width: window.innerWidth - 200 }))); } }, "Full Width"))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.CheckBox, { Record: record.JSON, Field: 'RegressionLine', Label: 'Add Regression', Setter: function (r) { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record.UpdateJSON('RegressionLine', r.RegressionLine))); } }))),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("br", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.X, Field: 'Units', Label: 'X Axis Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('x', 'Units', r.Units)); } })),
                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(_gpa_gemstone_react_forms__WEBPACK_IMPORTED_MODULE_3__.Input, { Record: record.JSON.Y, Field: 'Units', Label: 'Y Axis Units', Valid: function () { return true; }, Setter: function (r) { return setRecord(record.SetAxis('y', 'Units', r.Units)); } })))),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Series"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "accordion", style: { overflowY: 'auto', maxHeight: window.innerHeight - 300, height: window.innerHeight / 2 } }, record.Data.map(function (d, i) {
                    var _a, _b, _c, _d;
                    return react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, { key: i },
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-header" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("a", { className: "card-link", "data-toggle": "collapse", href: "#collapse" + i }, d.DataSource.Name)),
                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { id: "collapse" + i, className: "collapse show", "data-parent": "#accordion" },
                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "card-body" },
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "X Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'X', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.X.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_b = (_a = GetDatum('X')) === null || _a === void 0 ? void 0 : _a.Name) !== null && _b !== void 0 ? _b : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('X') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'x', Series: record.JSON.X.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("h6", null, "Y Series"),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement("hr", null),
                                react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_Widget__WEBPACK_IMPORTED_MODULE_4__.SeriesSelect, { Widget: record, DataSourceID: d.DataSource.ID, Axis: 'Y', Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } }),
                                (record.JSON.Y.Series != undefined ?
                                    react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "row" },
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-3" },
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", null, (_d = (_c = GetDatum('Y')) === null || _c === void 0 ? void 0 : _c.Name) !== null && _d !== void 0 ? _d : ''),
                                            react__WEBPACK_IMPORTED_MODULE_1__.createElement(_Widget_XDA_AdditionalInfo__WEBPACK_IMPORTED_MODULE_5__.default, { Index: i, Data: GetDatum('Y') })),
                                        react__WEBPACK_IMPORTED_MODULE_1__.createElement(SeriesPicker, { Axis: 'y', Series: record.JSON.Y.Series, Widget: record, Callback: function () { return setRecord(new _Implementations__WEBPACK_IMPORTED_MODULE_7__.XvsY(record)); } })) : null))));
                }))))));
}
var SeriesPicker = function (props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_1__.useState(props.Series.Field), 2), type = _a[0], setType = _a[1];
    react__WEBPACK_IMPORTED_MODULE_1__.useEffect(function () {
        props.Widget.UpdateSeries(props.Axis, "Field", type);
        props.Callback();
    }, [type]);
    return (react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("label", { className: "form-label" }, "Field"),
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("select", { className: "form-control", value: type, onChange: function (evt) { return setType(evt.target.value); } },
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Average" }, "Avg"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Minimum" }, "Min"),
                react__WEBPACK_IMPORTED_MODULE_1__.createElement("option", { value: "Maximum" }, "Max"))),
        react__WEBPACK_IMPORTED_MODULE_1__.createElement("div", { className: "col-1" },
            react__WEBPACK_IMPORTED_MODULE_1__.createElement("button", { className: "btn btn-link", onClick: function () {
                    props.Widget.RemoveSeries(props.Axis);
                    props.Callback();
                } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_6__.CrossMark))));
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Editor.tsx":
/*!*******************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Regular/Editor.tsx ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Editor)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Row__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Row */ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Row.tsx");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../WorkSpacesSlice */ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpacesSlice.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
//******************************************************************************************************
//  Editor.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************





function Editor(props) {
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();
    var workSpaceJSON = JSON.parse(props.WorkSpace.JSONString);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["tab-content"] }, workSpaceJSON.Rows.map(function (row, index) {
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Row__WEBPACK_IMPORTED_MODULE_2__.default, { key: index, WorkSpace: props.WorkSpace, Data: props.Data, Widgets: row.Widgets, Height: row.Height, Update: function (record) {
                var json = __assign({}, workSpaceJSON);
                json.Rows[index].Height = record.Height;
                json.Rows[index].Widgets = record.Widgets;
                json.Rows[index].WorkSpace = undefined;
                json.Rows[index].Data = undefined;
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            }, RemoveRow: function () {
                var json = __assign({}, workSpaceJSON);
                json.Rows.splice(index, 1);
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            }, MoveUp: function () {
                if (index <= 0)
                    return;
                var newIndex = index - 1;
                var json = __assign({}, workSpaceJSON);
                var a = json.Rows[newIndex];
                var b = json.Rows[index];
                json.Rows[newIndex] = b;
                json.Rows[index] = a;
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            }, MoveDown: function () {
                var json = __assign({}, workSpaceJSON);
                if (index >= json.Rows.length)
                    return;
                var newIndex = index + 1;
                var a = json.Rows[newIndex];
                var b = json.Rows[index];
                json.Rows[newIndex] = b;
                json.Rows[index] = a;
                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
            } });
    })));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Row.tsx":
/*!****************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Regular/Row.tsx ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Row)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Widgets_Regular_Histogram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Widgets/Regular/Histogram */ "./wwwroot/TypeScript/Features/Widgets/Regular/Histogram.tsx");
/* harmony import */ var _Widgets_Regular_Profile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Widgets/Regular/Profile */ "./wwwroot/TypeScript/Features/Widgets/Regular/Profile.tsx");
/* harmony import */ var _Widgets_Regular_Stats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Widgets/Regular/Stats */ "./wwwroot/TypeScript/Features/Widgets/Regular/Stats.tsx");
/* harmony import */ var _Widgets_Regular_Table__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Widgets/Regular/Table */ "./wwwroot/TypeScript/Features/Widgets/Regular/Table.tsx");
/* harmony import */ var _Widgets_Regular_Text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Widgets/Regular/Text */ "./wwwroot/TypeScript/Features/Widgets/Regular/Text.tsx");
/* harmony import */ var _Widgets_Regular_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Widgets/Regular/Trend/Trend */ "./wwwroot/TypeScript/Features/Widgets/Regular/Trend/Trend.tsx");
/* harmony import */ var _Widgets_Regular_XvsY__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Widgets/Regular/XvsY */ "./wwwroot/TypeScript/Features/Widgets/Regular/XvsY.tsx");
/* harmony import */ var _Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Widgets/Regular/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
//******************************************************************************************************
//  Row.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};











var NavMargin = 85;
var NavWidth = 200;
function Row(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Height), 2), height = _b[0], setHeight = _b[1];
    function HandleAddObject(type) {
        var row = __assign(__assign({}, props), { Update: undefined, WorkSpace: undefined, RemoveRow: undefined });
        row.Widgets.push((0,_Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_10__.CreateWidget)(type, 100, (window.innerWidth - NavWidth) / 2));
        props.Update(row);
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { height: props.Height, display: 'grid' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0, zIndex: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default.triangle },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["row-controls"] },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Add Object', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-plus" })),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Histogram'); } }, "Histogram"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Stats'); } }, "Stats"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Table'); } }, "Table"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Text'); } }, "Text"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Trend'); } }, "Trend"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('XvsY'); } }, "X vs Y"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Remove Row', onClick: function () { return props.RemoveRow(); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-minus" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Row Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'grid-container', style: { display: 'inline-flex' } }, props.Widgets.map(function (widget, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Widget, __assign({}, __assign(__assign({}, widget), { Height: props.Height, WorkSpace: props.WorkSpace, Data: props.Data, Update: function (newRecord) {
                    var row = __assign({}, props);
                    var widget = __assign({}, newRecord);
                    widget.WorkSpace = undefined;
                    widget.Data = undefined;
                    row.Widgets[index] = widget;
                    props.Update(row);
                }, Remove: function () {
                    var row = __assign({}, props);
                    row.Widgets.splice(index, 1);
                    props.Update(row);
                } }), { key: index })); }))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog", role: "document", style: { maxWidth: 525 } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" }, "Row Settings"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return setToggle(false); } },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Height"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: height != null ? height : 0, onChange: function (evt) { return setHeight(parseInt(evt.target.value)); } }),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setHeight(window.innerHeight - NavMargin); } }, "Full Height"))),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null,
                            "Widgets (Max Width : ",
                            window.innerWidth - 200,
                            " px, Width Used: ",
                            (props.Widgets.length == 0 ? 0 : props.Widgets.map(function (w) { return w.Width; }).reduce(function (a, b) { return a + b; })),
                            "px)"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: 'list-group' }, props.Widgets.map(function (widget, i) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { className: 'list-group-item', key: i },
                                widget.Label,
                                " -",
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'pull-right' },
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width:"),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { value: widget.Width, type: 'number', onChange: function (evt) {
                                            var row = __assign({}, props);
                                            row.Widgets[i].Width = parseInt(evt.target.value);
                                            props.Update(row);
                                        } }),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i <= 0, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i <= 0)
                                                return;
                                            var newIndex = i - 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.UpArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i >= props.Widgets.length - 1, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i >= row.Widgets.length - 1)
                                                return;
                                            var newIndex = i + 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.DownArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', onClick: function () {
                                            var row = __assign({}, props);
                                            row.Widgets.splice(i, 1);
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark)));
                        }))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveUp();
                                setToggle(false);
                            } }, "Move Row Up"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveDown();
                                setToggle(false);
                            } }, "Move Row Down"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.Update(__assign(__assign({}, props), { Height: height }));
                                setToggle(false);
                            } }, "Save changes"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return setToggle(false); } }, "Close")))))));
}
var Widget = function (props) {
    if (props.Type == 'Histogram')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Histogram__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else if (props.Type == 'Profile')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Profile__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props));
    else if (props.Type == 'Stats')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Stats__WEBPACK_IMPORTED_MODULE_5__.default, __assign({}, props));
    else if (props.Type == 'Table')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Table__WEBPACK_IMPORTED_MODULE_6__.default, __assign({}, props));
    else if (props.Type == 'Text')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Text__WEBPACK_IMPORTED_MODULE_7__.default, __assign({}, props));
    else if (props.Type == 'Trend')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__.default, __assign({}, props));
    else if (props.Type == 'XvsY')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Regular_XvsY__WEBPACK_IMPORTED_MODULE_9__.default, __assign({}, props));
    else
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null, "Not a widget.");
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Editor.tsx":
/*!***********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Editor.tsx ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Editor)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _Row__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Row */ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Row.tsx");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../WorkSpacesSlice */ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpacesSlice.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
//******************************************************************************************************
//  Editor.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************





function Editor(props) {
    var _a, _b;
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.useDispatch)();
    var workSpaceJSON = JSON.parse(props.WorkSpace.JSONString);
    var dataSet = (_b = (_a = props.Data.find(function (d) { return d.DataSource.Type === workSpaceJSON.Type; })) === null || _a === void 0 ? void 0 : _a.Data) !== null && _b !== void 0 ? _b : [];
    var options = __spreadArray([], __read(new Set(dataSet.map(function (ds) { return ds[workSpaceJSON.By]; })))).sort();
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(options[0]), 2), selection = _c[0], setSelection = _c[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (selection == undefined)
            setSelection(options[0]);
    }, [options.length]);
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["tab-content"] },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'row' },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'col' },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: 'pull-right form-control', value: selection, style: { width: 300 }, onChange: function (evt) { return setSelection(evt.target.value); } }, options.map(function (option, i) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { key: i, value: option }, option); })),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", { className: 'pull-right', style: { padding: 7 } },
                    workSpaceJSON.By,
                    ":"))),
        workSpaceJSON.Rows.map(function (row, index) {
            return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Row__WEBPACK_IMPORTED_MODULE_2__.default, { key: index, WorkSpace: props.WorkSpace, Data: props.Data, Widgets: row.Widgets, Height: row.Height, By: workSpaceJSON.By, Device: selection, Update: function (record) {
                    var json = __assign({}, workSpaceJSON);
                    json.Rows[index].Height = record.Height;
                    json.Rows[index].Widgets = record.Widgets;
                    json.Rows[index].WorkSpace = undefined;
                    json.Rows[index].Data = undefined;
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                }, RemoveRow: function () {
                    var json = __assign({}, workSpaceJSON);
                    json.Rows.splice(index, 1);
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                }, MoveUp: function () {
                    if (index <= 0)
                        return;
                    var newIndex = index - 1;
                    var json = __assign({}, workSpaceJSON);
                    var a = json.Rows[newIndex];
                    var b = json.Rows[index];
                    json.Rows[newIndex] = b;
                    json.Rows[index] = a;
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                }, MoveDown: function () {
                    var json = __assign({}, workSpaceJSON);
                    if (index >= json.Rows.length)
                        return;
                    var newIndex = index + 1;
                    var a = json.Rows[newIndex];
                    var b = json.Rows[index];
                    json.Rows[newIndex] = b;
                    json.Rows[index] = a;
                    dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_4__.UpdateWorkSpace)(__assign(__assign({}, props.WorkSpace), { JSONString: JSON.stringify(json) })));
                } });
        })));
}


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Row.tsx":
/*!********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Row.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Row)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
/* harmony import */ var _Widgets_Templatable_Histogram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Widgets/Templatable/Histogram */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Histogram.tsx");
/* harmony import */ var _Widgets_Templatable_Profile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Widgets/Templatable/Profile */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Profile.tsx");
/* harmony import */ var _Widgets_Templatable_Stats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Widgets/Templatable/Stats */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Stats.tsx");
/* harmony import */ var _Widgets_Templatable_Table__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Widgets/Templatable/Table */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Table.tsx");
/* harmony import */ var _Widgets_Templatable_Text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Widgets/Templatable/Text */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Text.tsx");
/* harmony import */ var _Widgets_Templatable_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Widgets/Templatable/Trend/Trend */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Trend/Trend.tsx");
/* harmony import */ var _Widgets_Templatable_XvsY__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Widgets/Templatable/XvsY */ "./wwwroot/TypeScript/Features/Widgets/Templatable/XvsY.tsx");
/* harmony import */ var _Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Widgets/Templatable/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
//******************************************************************************************************
//  Row.tsx - Gbtc
//
//  Copyright Â© 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  03/12/2021 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};











var NavMargin = 85;
var NavWidth = 200;
function Row(props) {
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _a[0], setToggle = _a[1];
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(props.Height), 2), height = _b[0], setHeight = _b[1];
    function HandleAddObject(type) {
        var row = __assign(__assign({}, props), { Update: undefined, WorkSpace: undefined, RemoveRow: undefined });
        row.Widgets.push((0,_Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_10__.CreateWidget)(type, props.By, props.Device, 100, (window.innerWidth - NavWidth) / 2));
        props.Update(row);
    }
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card", style: { height: props.Height, display: 'grid' } },
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "card-body", style: { padding: 0, zIndex: 0 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default.triangle },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "" + _Styles_app_scss__WEBPACK_IMPORTED_MODULE_1__.default["row-controls"] },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Add Object', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-plus" })),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Histogram'); } }, "Histogram"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Stats'); } }, "Stats"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Table'); } }, "Table"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Text'); } }, "Text"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Trend'); } }, "Trend"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('XvsY'); } }, "X vs Y"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Remove Row', onClick: function () { return props.RemoveRow(); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-minus" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Row Settings', onClick: function () { return setToggle(true); } },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" })))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'grid-container', style: { display: 'inline-flex' } }, props.Widgets.map(function (widget, index) { return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Widget, __assign({}, __assign(__assign({}, widget), { Height: props.Height, WorkSpace: props.WorkSpace, Data: props.Data, By: props.By, Device: props.Device, Update: function (newRecord) {
                    var row = __assign({}, props);
                    var widget = __assign({}, newRecord);
                    widget.WorkSpace = undefined;
                    widget.Data = undefined;
                    row.Widgets[index] = widget;
                    props.Update(row);
                }, Remove: function () {
                    var row = __assign({}, props);
                    row.Widgets.splice(index, 1);
                    props.Update(row);
                } }), { key: index })); }))),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog", role: "document", style: { maxWidth: 525 } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" }, "Row Settings"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return setToggle(false); } },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Height"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group" },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { type: "number", className: "form-control", value: height != null ? height : 0, onChange: function (evt) { return setHeight(parseInt(evt.target.value)); } }),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "input-group-prepend" },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn btn-outline-secondary", type: "button", onClick: function (evt) { return setHeight(window.innerHeight - NavMargin); } }, "Full Height"))),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null,
                            "Widgets (Max Width : ",
                            window.innerWidth - 200,
                            " px, Width Used: ",
                            (props.Widgets.length == 0 ? 0 : props.Widgets.map(function (w) { return w.Width; }).reduce(function (a, b) { return a + b; })),
                            "px)"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("ul", { className: 'list-group' }, props.Widgets.map(function (widget, i) {
                            return react__WEBPACK_IMPORTED_MODULE_0__.createElement("li", { className: 'list-group-item', key: i },
                                widget.Label,
                                " -",
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: 'pull-right' },
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Width:"),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("input", { value: widget.Width, type: 'number', onChange: function (evt) {
                                            var row = __assign({}, props);
                                            row.Widgets[i].Width = parseInt(evt.target.value);
                                            props.Update(row);
                                        } }),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i <= 0, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i <= 0)
                                                return;
                                            var newIndex = i - 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.UpArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', disabled: i >= props.Widgets.length - 1, onClick: function () {
                                            var row = __assign({}, props);
                                            if (i >= row.Widgets.length - 1)
                                                return;
                                            var newIndex = i + 1;
                                            var a = row.Widgets[newIndex];
                                            var b = row.Widgets[i];
                                            row.Widgets[newIndex] = b;
                                            row.Widgets[i] = a;
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.DownArrow),
                                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: 'btn btn-link', onClick: function () {
                                            var row = __assign({}, props);
                                            row.Widgets.splice(i, 1);
                                            props.Update(row);
                                        } }, _gpa_gemstone_gpa_symbols__WEBPACK_IMPORTED_MODULE_2__.CrossMark)));
                        }))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveUp();
                                setToggle(false);
                            } }, "Move Row Up"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.MoveDown();
                                setToggle(false);
                            } }, "Move Row Down"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                props.Update(__assign(__assign({}, props), { Height: height }));
                                setToggle(false);
                            } }, "Save changes"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return setToggle(false); } }, "Close")))))));
}
var Widget = function (props) {
    if (props.Type == 'Histogram')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Histogram__WEBPACK_IMPORTED_MODULE_3__.default, __assign({}, props));
    else if (props.Type == 'Profile')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Profile__WEBPACK_IMPORTED_MODULE_4__.default, __assign({}, props));
    else if (props.Type == 'Stats')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Stats__WEBPACK_IMPORTED_MODULE_5__.default, __assign({}, props));
    else if (props.Type == 'Table')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Table__WEBPACK_IMPORTED_MODULE_6__.default, __assign({}, props));
    else if (props.Type == 'Text')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Text__WEBPACK_IMPORTED_MODULE_7__.default, __assign({}, props));
    else if (props.Type == 'Trend')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_Trend_Trend__WEBPACK_IMPORTED_MODULE_8__.default, __assign({}, props));
    else if (props.Type == 'XvsY')
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Widgets_Templatable_XvsY__WEBPACK_IMPORTED_MODULE_9__.default, __assign({}, props));
    else
        return react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", null, "Not a widget.");
};


/***/ }),

/***/ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpaceEditor.tsx":
/*!********************************************************************!*\
  !*** ./wwwroot/TypeScript/Features/WorkSpaces/WorkSpaceEditor.tsx ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router/esm/react-router.js");
/* harmony import */ var react_router_dom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react-router-dom */ "./node_modules/react-router-dom/esm/react-router-dom.js");
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Styles/app.scss */ "./wwwroot/Styles/app.scss");
/* harmony import */ var _WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WorkSpacesSlice */ "./wwwroot/TypeScript/Features/WorkSpaces/WorkSpacesSlice.ts");
/* harmony import */ var _DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DataSets/DataSetsSlice */ "./wwwroot/TypeScript/Features/DataSets/DataSetsSlice.ts");
/* harmony import */ var _DataSets_DataSetData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DataSets/DataSetData */ "./wwwroot/TypeScript/Features/DataSets/DataSetData.tsx");
/* harmony import */ var _Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../Widgets/Regular/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Regular/Implementations.ts");
/* harmony import */ var _Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../Widgets/Templatable/Implementations */ "./wwwroot/TypeScript/Features/Widgets/Templatable/Implementations.ts");
/* harmony import */ var _Regular_Editor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Regular/Editor */ "./wwwroot/TypeScript/Features/WorkSpaces/Regular/Editor.tsx");
/* harmony import */ var _Templatable_Editor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Templatable/Editor */ "./wwwroot/TypeScript/Features/WorkSpaces/Templatable/Editor.tsx");
//******************************************************************************************************
//  WorkSpaceEditor.tsx - Gbtc
//
//  Copyright Â© 2020, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  11/10/2020 - Billy Ernest
//       Generated original version of source code.
//
//******************************************************************************************************
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};











var NavMargin = 85;
var NavWidth = 200;
var WorkSpaceEditor = function (props) {
    var _a;
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState([]), 2), data = _b[0], setData = _b[1];
    var dispatch = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useDispatch)();
    var id = (0,react_router_dom__WEBPACK_IMPORTED_MODULE_10__.useParams)().id;
    var workSpace = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { return (0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.SelectWorkSpaceByID)(state, parseInt(id)); });
    var dataSet = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(function (state) { var _a; return (0,_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.SelectDataSetByID)(state, (_a = workSpace === null || workSpace === void 0 ? void 0 : workSpace.DataSetID) !== null && _a !== void 0 ? _a : 0); });
    var wsStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.SelectWorkSpacesStatus);
    var dsStatus = (0,react_redux__WEBPACK_IMPORTED_MODULE_1__.useSelector)(_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.SelectDataSetsStatus);
    var _c = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState({ Rows: [], By: 'Meter' }), 2), workSpaceJSON = _c[0], setWorkSpaceJSON = _c[1];
    var _d = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(false), 2), toggle = _d[0], setToggle = _d[1];
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (workSpace === undefined)
            return;
        var json = JSON.parse(workSpace.JSONString);
        setWorkSpaceJSON(json);
        (0,_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.GetDataSetDataFromIDB)(workSpace.DataSetID).then(function (d) {
            setData(d);
        });
    }, [workSpace]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (wsStatus == 'unitiated' || wsStatus == 'changed')
            dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.FetchWorkSpaces)());
        return function () {
        };
    }, [dispatch, wsStatus]);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        if (dsStatus == 'unitiated' || dsStatus === 'changed')
            dispatch((0,_DataSets_DataSetsSlice__WEBPACK_IMPORTED_MODULE_4__.FetchDataSets)());
        return function () {
        };
    }, [dispatch, dsStatus]);
    function HandleAddObject(type) {
        if (type === 'Row') {
            dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(__assign(__assign({}, workSpaceJSON), { Rows: __spreadArray(__spreadArray([], __read(workSpaceJSON.Rows)), [{ Height: 500, Widgets: [] }]) })) })));
        }
        else {
            dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(__assign(__assign({}, workSpaceJSON), { Rows: __spreadArray(__spreadArray([], __read(workSpaceJSON.Rows)), [{
                            Height: window.innerHeight - NavMargin,
                            Widgets: [workSpace.Type === 'Regular' ? (0,_Widgets_Regular_Implementations__WEBPACK_IMPORTED_MODULE_6__.CreateWidget)(type, window.innerHeight - NavMargin, window.innerWidth - NavWidth) : (0,_Widgets_Templatable_Implementations__WEBPACK_IMPORTED_MODULE_7__.CreateWidget)(type, workSpaceJSON.By, workSpaceJSON.Type, window.innerHeight - NavMargin, window.innerWidth - NavWidth)]
                        }]) })) })));
        }
    }
    if (workSpace == undefined)
        return null;
    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { height: 42 } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: _Styles_app_scss__WEBPACK_IMPORTED_MODULE_2__.default.navbarbuttons },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { style: { padding: '6px 12px', position: 'relative' } },
                    "Data Set: ",
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router_dom__WEBPACK_IMPORTED_MODULE_11__.Link, { to: homePath + "EditDataSet/" + (dataSet === null || dataSet === void 0 ? void 0 : dataSet.ID) }, dataSet === null || dataSet === void 0 ? void 0 : dataSet.Name),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(_DataSets_DataSetData__WEBPACK_IMPORTED_MODULE_5__.default, __assign({}, dataSet))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Add Object', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-plus" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function (e) { return HandleAddObject('Row'); } }, "Row"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-divider" }),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Histogram'); } }, "Histogram"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Stats'); } }, "Stats"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Table'); } }, "Table"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Text'); } }, "Text"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('Trend'); } }, "Trend"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "dropdown-item", onClick: function () { return HandleAddObject('XvsY'); } }, "X vs Y"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "btn-group" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Export Current Data Set', "data-toggle": 'dropdown', "aria-haspopup": 'true', "aria-expanded": 'false' },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-download" })),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "dropdown-menu" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "dropdown-item", href: "#" }, "PDF"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", { className: "dropdown-item", href: "#" }, "CSV"))),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Save current workspace...', onClick: function (e) {
                        e.preventDefault();
                        dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(workSpaceJSON) })));
                    } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-save" })),
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { className: "btn", title: 'Workspace Settings', onClick: function () { return setToggle(true); } },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("i", { className: "fa fa-cog" }))),
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { style: { padding: '6px 12px' } },
                "Workspace: ", (_a = workSpace === null || workSpace === void 0 ? void 0 : workSpace.Name) !== null && _a !== void 0 ? _a : '')),
        workSpace.Type === 'Regular' ?
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Regular_Editor__WEBPACK_IMPORTED_MODULE_8__.default, { WorkSpace: workSpace, Data: data }) :
            react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Templatable_Editor__WEBPACK_IMPORTED_MODULE_9__.default, { WorkSpace: workSpace, Data: data }),
        react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal", role: "dialog", style: { display: toggle ? 'block' : 'none', backgroundColor: 'rgba(0,0,0,0.4)' } },
            react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-dialog", role: "document", style: { maxWidth: 525 } },
                react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-content" },
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-header" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("h5", { className: "modal-title" }, "Workspace Settings"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "close", onClick: function () { return setToggle(false); } },
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("span", { "aria-hidden": "true" }, "\u00D7"))),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-body" }, workSpace.Type === 'Templatable' ?
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Template Type"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: 'form-control', value: workSpaceJSON.Type, onChange: function (evt) { return setWorkSpaceJSON(__assign(__assign({}, workSpaceJSON), { Type: evt.target.value })); } },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }, " "),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'TrenDAPDB' }, "TrenDAPDB"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'OpenHistorian' }, "OpenHistorian")),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("label", null, "Template By"),
                            react__WEBPACK_IMPORTED_MODULE_0__.createElement("select", { className: 'form-control', value: workSpaceJSON.By, onChange: function (evt) { return setWorkSpaceJSON(__assign(__assign({}, workSpaceJSON), { By: evt.target.value })); } },
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: '' }, " "),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Meter', hidden: workSpaceJSON.Type !== 'TrenDAPDB' }, "Meter"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Asset', hidden: workSpaceJSON.Type !== 'TrenDAPDB' }, "Asset"),
                                react__WEBPACK_IMPORTED_MODULE_0__.createElement("option", { value: 'Device', hidden: workSpaceJSON.Type !== 'OpenHistorian' }, "Device"))) : null),
                    react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: "modal-footer" },
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-primary", onClick: function () {
                                dispatch((0,_WorkSpacesSlice__WEBPACK_IMPORTED_MODULE_3__.UpdateWorkSpace)(__assign(__assign({}, workSpace), { JSONString: JSON.stringify(workSpaceJSON) })));
                                setToggle(false);
                            } }, "Save changes"),
                        react__WEBPACK_IMPORTED_MODULE_0__.createElement("button", { type: "button", className: "btn btn-secondary", onClick: function () { return setToggle(false); } }, "Close")))))));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WorkSpaceEditor);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,