"use strict";
(self["webpackChunktrendap"] = self["webpackChunktrendap"] || []).push([["vendors-node_modules_gpa-gemstone_react-table_lib_index_js"],{

/***/ "./node_modules/@gpa-gemstone/gpa-symbols/lib/SVGIcons.js":
/*!****************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/gpa-symbols/lib/SVGIcons.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SVGIcons = void 0;
// ******************************************************************************************************
//  SVGIcons.tsx - Gbtc
//
//  Copyright © 2022, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  02/17/2022 - C Lackner
//       Generated original version of source code.
//
// ******************************************************************************************************
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var SVGIcons;
(function (SVGIcons) {
    SVGIcons.DataContainer = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file" },
        React.createElement("path", { d: "M 3,4.5 a 9,4.5 0,0,0 18 3 a 9,4.5 0,0,0 -18 0 l 0,11 a 9,4.5 0,0,0 18 0 l 0,-11" }));
    SVGIcons.Cube = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file" },
        React.createElement("rect", { x: "1", y: "8", width: "15", height: "15" }),
        React.createElement("rect", { x: "6", y: "3", width: "15", height: "15" }),
        React.createElement("line", { x1: "1", x2: "6", y1: "8", y2: "3" }),
        React.createElement("line", { x1: "16", x2: "21", y1: "8", y2: "3" }),
        React.createElement("line", { x1: "16", x2: "21", y1: "23", y2: "18" }),
        React.createElement("line", { x1: "1", x2: "6", y1: "23", y2: "18" }));
    SVGIcons.House = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-home" },
        React.createElement("path", { d: "M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" }),
        React.createElement("polyline", { points: "9 22 9 12 15 12 15 22" }));
    SVGIcons.Document = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("path", { d: "M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" }),
        React.createElement("polyline", { points: "14 2 14 8 20 8" }),
        React.createElement("line", { x1: "16", y1: "13", x2: "8", y2: "13" }),
        React.createElement("line", { x1: "16", y1: "17", x2: "8", y2: "17" }),
        React.createElement("polyline", { points: "10 9 9 9 8 9" }));
    SVGIcons.ArrowForward = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "currentColor", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("polygon", { points: "6.23,20.23 8,22 18,12 8,2 6.23,3.77 14.46,12" }));
    SVGIcons.ArrowBackward = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "currentColor", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("polygon", { points: "17.77,3.77 16,2 6,12 16,22 17.77,20.23 9.54,12" }));
    SVGIcons.ArrowDropUp = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "currentColor", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("path", { d: "M7 14l5-5 5 5z" }));
    SVGIcons.ArrowDropDown = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "currentColor", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("path", { d: "M7 10l5 5 5-5z" }));
    SVGIcons.Settings = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("path", { d: "M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z" }));
    SVGIcons.Filter = React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "feather feather-file-text" },
        React.createElement("path", { d: "M4.25,5.61C6.27,8.2,10,13,10,13v6c0,0.55,0.45,1,1,1h2c0.55,0,1-0.45,1-1v-6c0,0,3.72-4.8,5.74-7.39 C20.25,4.95,19.78,4,18.95,4H5.04C4.21,4,3.74,4.95,4.25,5.61z" }));
})(SVGIcons = exports.SVGIcons || (exports.SVGIcons = {}));


/***/ }),

/***/ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// ******************************************************************************************************
//  index.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  09/30/2020 - Billy Ernest
//       Generated original version of source code.
//
// ******************************************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SVGIcons = exports.Questionmark = exports.RewindButton = exports.FastForwardButton = exports.PauseButton = exports.StopButton = exports.PlayButton = exports.Scroll = exports.House = exports.MagnifyingGlass = exports.FourWayArrow = exports.InputNumbers = exports.DNA = exports.DownArrow = exports.RightArrow = exports.LeftArrow = exports.UpArrow = exports.Flag = exports.Wrench = exports.Spinner = exports.Warning = exports.Plus = exports.CrossMark = exports.TrashCan = exports.Pencil = exports.HeavyCheckMark = void 0;
var SVGIcons_1 = __webpack_require__(/*! ./SVGIcons */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/SVGIcons.js");
Object.defineProperty(exports, "SVGIcons", ({ enumerable: true, get: function () { return SVGIcons_1.SVGIcons; } }));
exports.HeavyCheckMark = '✔️';
exports.Pencil = '✏️';
exports.TrashCan = '🗑️';
exports.CrossMark = '❌';
exports.Plus = '➕';
exports.Warning = '⚠️';
exports.Spinner = '🔄';
exports.Wrench = '🔧';
exports.Flag = '🚩';
exports.UpArrow = '⬆️';
exports.LeftArrow = '⬅';
exports.RightArrow = '➡';
exports.DownArrow = '⬇️';
exports.DNA = '🧬';
exports.InputNumbers = '🔢';
exports.FourWayArrow = '☩';
exports.MagnifyingGlass = '🔍';
exports.House = '🏠';
exports.Scroll = '📜';
exports.PlayButton = '▶️';
exports.StopButton = '⏹️';
exports.PauseButton = '⏸️';
exports.FastForwardButton = '⏩';
exports.RewindButton = '⏪';
exports.Questionmark = '?';


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/DynamicTable.js":
/*!********************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/DynamicTable.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// ******************************************************************************************************
//  DynamicTable.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/26/2021 - Billy Ernest
//       Generated original version of source code.
//
// ******************************************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DynamicTable = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
function DynamicTable(props) {
    if (props.data.length <= 0)
        return null;
    var cols = [];
    var keys = Object.keys(props.data[0]);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        cols.push({ key: key, label: key, field: key });
    }
    return (React.createElement("table", { className: props.tableClass !== undefined ? props.tableClass : '', style: props.tableStyle },
        React.createElement(Table_1.Header, { Class: props.theadClass, Style: props.theadStyle, Cols: cols, SortKey: props.sortKey, Ascending: props.ascending, Click: function (d, e) { return handleSort(d, e); } }),
        React.createElement(Table_1.Rows, { Data: props.data, Cols: cols, RowStyle: props.rowStyle, BodyStyle: props.tbodyStyle, BodyClass: props.tbodyClass, Click: function (data, e) { return props.onClick(data, e); }, Selected: props.selected, KeySelector: props.keySelector })));
    function handleSort(data, event) {
        if (data.colKey !== null)
            props.onSort(data);
    }
}
exports.DynamicTable = DynamicTable;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/SearchableTable.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/SearchableTable.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// ******************************************************************************************************
//  SearchableTable.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/12/2021 - C. Lackner
//       Generated original version of source code.
//
// ******************************************************************************************************
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchableTable = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
/**
 * A Table with an input Field to search on top
 */
function SearchableTable(props) {
    var _a = React.useState(props.data), data = _a[0], setData = _a[1];
    var _b = React.useState(''), searchTextAS = _b[0], setSearchTextAS = _b[1];
    React.useEffect(function () {
        setData(props.data.filter(function (s) { return props.matchSearch(s, searchTextAS); }));
    }, [props.data, searchTextAS]);
    return React.createElement(React.Fragment, null,
        React.createElement("input", { className: "form-control", placeholder: "Search filter for select box ...", value: searchTextAS, onChange: function (e) { return setSearchTextAS(e.target.value); } }),
        React.createElement(Table_1.default, __assign({}, props, { data: data })));
}
exports.SearchableTable = SearchableTable;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/SelectTable.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/SelectTable.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// ******************************************************************************************************
//  SelectTable.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/22/2021 - C. Lackner
//       Generated original version of source code.
//
// ******************************************************************************************************
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectTable = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
function SelectTable(props) {
    var didMountRef = React.useRef(false);
    var _a = React.useState(props.data), data = _a[0], setData = _a[1];
    var _b = React.useState([]), selected = _b[0], setSelected = _b[1];
    var _c = React.useState(props.sortKey), sortKey = _c[0], setSortKey = _c[1];
    var _d = React.useState(props.ascending), ascending = _d[0], setAscending = _d[1];
    React.useEffect(function () {
        if (didMountRef.current)
            selectAll();
        else
            didMountRef.current = true;
    }, [props.selectAllCounter]);
    React.useEffect(function () {
        if (props.data.length !== data.length)
            setData(props.data);
    }, [props.data]);
    React.useEffect(function () {
        setSelected(function (d) { return d.filter(function (keyItem) { return data.findIndex(function (item) { return item[props.KeyField] === keyItem; }) > -1; }); });
    }, [data]);
    React.useEffect(function () {
        var sortColumn = props.cols.filter(function (col) { return col.key === sortKey; })[0];
        if (sortColumn === undefined || sortColumn.field === undefined)
            return;
        var sortField = sortColumn.field;
        setData(function (lst) { return (_.orderBy(lst, [sortField], [(ascending ? "asc" : "desc")])); });
    }, [ascending, sortKey]);
    React.useEffect(function () {
        props.onSelection(data.filter(function (item) { return selected.findIndex(function (key) { return key === item[props.KeyField]; }) > -1; }));
    }, [selected]);
    function handleClick(d, event) {
        var sIndex = selected.findIndex(function (item) { return item === d.row[props.KeyField]; });
        if (sIndex === -1)
            setSelected(function (od) { return __spreadArray(__spreadArray([], od, true), [d.row[props.KeyField]], false); });
        else
            setSelected(function (od) { return od.filter(function (item) { return item !== d.row[props.KeyField]; }); });
    }
    function selectAll() {
        setSelected(function (d) { if (d.length === data.length)
            return [];
        else
            return data.map(function (row) { return row[props.KeyField]; }); });
    }
    function handleSort(d) {
        if (d.colKey === sortKey)
            setAscending(!ascending);
        else
            setSortKey(d.colKey);
    }
    var tableProps = {
        cols: __spreadArray([
            { key: 'gemstone-checkbox', field: props.KeyField, label: '', headerStyle: { width: '4em' }, rowStyle: { width: '4em' }, content: function (item, key, field, style) {
                    var index = selected.findIndex(function (i) { return i === item[props.KeyField]; });
                    if (index > -1)
                        return React.createElement("div", { style: { marginTop: '16px', textAlign: 'center' } },
                            React.createElement("i", { className: "fa fa-check-square-o fa-3x" }));
                    return null;
                } }
        ], props.cols, true),
        data: data,
        onClick: handleClick,
        sortKey: sortKey,
        ascending: ascending,
        onSort: handleSort,
        tableClass: props.tableClass,
        tableStyle: props.tableStyle,
        theadStyle: props.theadStyle,
        theadClass: props.theadClass,
        tbodyStyle: props.tbodyStyle,
        tbodyClass: props.tbodyClass,
        selected: function (d) { return false; },
        rowStyle: props.rowStyle
    };
    return React.createElement(Table_1.default, __assign({}, tableProps));
}
exports.SelectTable = SelectTable;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/Table.js":
/*!*************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/Table.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


//  ******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  08/02/2018 - Billy Ernest
//       Generated original version of source code.
//
//  ******************************************************************************************************
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Header = exports.Rows = void 0;
var gpa_symbols_1 = __webpack_require__(/*! @gpa-gemstone/gpa-symbols */ "./node_modules/@gpa-gemstone/gpa-symbols/lib/index.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
function Table(props) {
    return (React.createElement("table", { className: props.tableClass !== undefined ? props.tableClass : '', style: props.tableStyle },
        React.createElement(Header, { Class: props.theadClass, Style: props.theadStyle, Cols: props.cols, SortKey: props.sortKey, Ascending: props.ascending, Click: function (d, e) { return handleSort(d, e); } }),
        React.createElement(Rows, { Data: props.data, Cols: props.cols, RowStyle: props.rowStyle, BodyStyle: props.tbodyStyle, BodyClass: props.tbodyClass, Click: function (data, e) { return (props.onClick === undefined ? null : props.onClick(data, e)); }, Selected: props.selected, KeySelector: props.keySelector })));
    function handleSort(data, event) {
        if (data.colKey !== null)
            props.onSort(data);
    }
}
exports["default"] = Table;
function Rows(props) {
    if (props.Data.length === 0)
        return null;
    var rows = props.Data.map(function (item, rowIndex) {
        var cells = props.Cols.map(function (colData) {
            return React.createElement(Cell, { key: colData.key, Style: colData.rowStyle, DataKey: colData.key, DataField: colData.field, Object: item, RowIndex: rowIndex, Content: colData.content, Click: function (data, e) { return props.Click(data, e); } });
        });
        var style = (props.RowStyle !== undefined) ? __assign({}, props.RowStyle) : {};
        if (style.cursor === undefined)
            style.cursor = 'pointer';
        if (props.Selected !== undefined && props.Selected(item))
            style.backgroundColor = 'yellow';
        function ToKey(index, data) {
            if (props.KeySelector === undefined)
                return index.toString();
            return props.KeySelector(data);
        }
        return (React.createElement("tr", { style: style, key: ToKey(rowIndex, item) }, cells));
    });
    return (React.createElement("tbody", { style: props.BodyStyle, className: props.BodyClass }, rows));
}
exports.Rows = Rows;
function Cell(props) {
    var css = (props.Style !== undefined) ? __assign({}, props.Style) : {};
    var getFieldValue = function () { return props.DataField !== undefined ? props.Object[props.DataField] : null; };
    var getFieldContent = function () { return props.Content !== undefined ? props.Content(props.Object, props.DataKey, props.DataField, css, props.RowIndex) : getFieldValue(); };
    return (React.createElement("td", { style: css, onClick: function (e) { return props.Click({ colKey: props.DataKey, colField: props.DataField, row: props.Object, data: getFieldValue(), index: props.RowIndex }, e); } }, getFieldContent()));
}
function Header(props) {
    return (React.createElement("thead", { className: props.Class, style: props.Style },
        React.createElement("tr", null, props.Cols.map(function (col) { return React.createElement(HeaderCell, { key: col.key, HeaderStyle: col.headerStyle, DataKey: col.key, Click: function (e) { return props.Click({ colKey: col.key, colField: col.field, ascending: props.Ascending }, e); }, Label: col.label, SortKey: props.SortKey, Ascending: props.Ascending }); }))));
}
exports.Header = Header;
function HeaderCell(props) {
    var style = (props.HeaderStyle !== undefined) ? props.HeaderStyle : {};
    if (style.cursor === undefined && props.DataKey !== null) {
        style.cursor = 'pointer';
    }
    if (style.position === undefined) {
        style.position = 'relative';
    }
    return (React.createElement("th", { style: style, onClick: function (e) { return props.Click(e); } },
        React.createElement("div", { style: { position: 'absolute', width: 25 } },
            React.createElement(RenderAngleIcon, { SortKey: props.SortKey, Key: props.DataKey, Ascending: props.Ascending })),
        React.createElement("div", { style: { marginLeft: 25 } }, props.Label)));
}
function RenderAngleIcon(props) {
    var AngleIcon = function (a) { return a.ascending ? gpa_symbols_1.SVGIcons.ArrowDropUp : gpa_symbols_1.SVGIcons.ArrowDropDown; };
    if (props.SortKey === null)
        return null;
    if (props.SortKey !== props.Key)
        return null;
    return React.createElement(AngleIcon, { ascending: props.Ascending });
}
;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


//  ******************************************************************************************************
//  index.tsx - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  08/02/2018 - Billy Ernest
//       Generated original version of source code.
//  02/12/2021 - C. lackner
//       Moved table to seperate File.
//
//  ******************************************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rows = exports.DynamicTable = exports.SearchableTable = exports.SelectTable = void 0;
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
Object.defineProperty(exports, "Rows", ({ enumerable: true, get: function () { return Table_1.Rows; } }));
var SelectTable_1 = __webpack_require__(/*! ./SelectTable */ "./node_modules/@gpa-gemstone/react-table/lib/SelectTable.js");
Object.defineProperty(exports, "SelectTable", ({ enumerable: true, get: function () { return SelectTable_1.SelectTable; } }));
var SearchableTable_1 = __webpack_require__(/*! ./SearchableTable */ "./node_modules/@gpa-gemstone/react-table/lib/SearchableTable.js");
Object.defineProperty(exports, "SearchableTable", ({ enumerable: true, get: function () { return SearchableTable_1.SearchableTable; } }));
var DynamicTable_1 = __webpack_require__(/*! ./DynamicTable */ "./node_modules/@gpa-gemstone/react-table/lib/DynamicTable.js");
Object.defineProperty(exports, "DynamicTable", ({ enumerable: true, get: function () { return DynamicTable_1.DynamicTable; } }));
exports["default"] = Table_1.default;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,