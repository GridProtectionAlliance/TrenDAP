(self["webpackChunktrendap"] = self["webpackChunktrendap"] || []).push([["vendors-node_modules_gpa-gemstone_react-table_lib_index_js"],{

/***/ "./node_modules/@gpa-gemstone/react-table/lib/DynamicTable.js":
/*!********************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/DynamicTable.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// ******************************************************************************************************
//  DynamicTable.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/26/2021 - Billy Ernest
//       Generated original version of source code.
//
// ******************************************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DynamicTable = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
function DynamicTable(props) {
    if (props.data.length <= 0)
        return null;
    var cols = [];
    var keys = Object.keys(props.data[0]);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        cols.push({ key: key, label: key, field: key });
    }
    return (React.createElement("table", { className: props.tableClass !== undefined ? props.tableClass : '', style: props.tableStyle },
        React.createElement(Table_1.Header, { Class: props.theadClass, Style: props.theadStyle, Cols: cols, SortKey: props.sortKey, Ascending: props.ascending, Click: function (d, e) { return handleSort(d, e); } }),
        React.createElement(Table_1.Rows, { Data: props.data, Cols: cols, RowStyle: props.rowStyle, BodyStyle: props.tbodyStyle, BodyClass: props.tbodyClass, Click: function (data, e) { return props.onClick(data, e); }, Selected: props.selected, KeySelector: props.keySelector })));
    function handleSort(data, event) {
        if (data.colKey !== null)
            props.onSort(data);
    }
}
exports.DynamicTable = DynamicTable;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/SearchableTable.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/SearchableTable.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// ******************************************************************************************************
//  SearchableTable.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  07/12/2021 - C. Lackner
//       Generated original version of source code.
//
// ******************************************************************************************************
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchableTable = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
/**
 * A Table with an input Field to search on top
 */
function SearchableTable(props) {
    var _a = React.useState(props.data), data = _a[0], setData = _a[1];
    var _b = React.useState(''), searchTextAS = _b[0], setSearchTextAS = _b[1];
    React.useEffect(function () {
        setData(props.data.filter(function (s) { return props.matchSearch(s, searchTextAS); }));
    }, [props.data, searchTextAS]);
    return React.createElement(React.Fragment, null,
        React.createElement("input", { className: "form-control", placeholder: "Search filter for select box ...", value: searchTextAS, onChange: function (e) { return setSearchTextAS(e.target.value); } }),
        React.createElement(Table_1.default, __assign({}, props, { data: data })));
}
exports.SearchableTable = SearchableTable;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/SelectTable.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/SelectTable.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

// ******************************************************************************************************
//  SelectTable.tsx - Gbtc
//
//  Copyright © 2021, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  01/22/2021 - C. Lackner
//       Generated original version of source code.
//
// ******************************************************************************************************
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectTable = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
function SelectTable(props) {
    var didMountRef = React.useRef(false);
    var _a = React.useState(props.data), data = _a[0], setData = _a[1];
    var _b = React.useState([]), selected = _b[0], setSelected = _b[1];
    var _c = React.useState(props.sortKey), sortKey = _c[0], setSortKey = _c[1];
    var _d = React.useState(props.ascending), ascending = _d[0], setAscending = _d[1];
    React.useEffect(function () {
        if (didMountRef.current)
            selectAll();
        else
            didMountRef.current = true;
    }, [props.selectAllCounter]);
    React.useEffect(function () {
        if (props.data.length !== data.length)
            setData(props.data);
    }, [props.data]);
    React.useEffect(function () {
        setSelected(function (d) { return d.filter(function (keyItem) { return data.findIndex(function (item) { return item[props.KeyField] === keyItem; }) > -1; }); });
    }, [data]);
    React.useEffect(function () {
        var sortColumn = props.cols.filter(function (col) { return col.key === sortKey; })[0];
        if (sortColumn === undefined || sortColumn.field === undefined)
            return;
        var sortField = sortColumn.field;
        setData(function (lst) { return (_.orderBy(lst, [sortField], [(ascending ? "asc" : "desc")])); });
    }, [ascending, sortKey]);
    React.useEffect(function () {
        props.onSelection(data.filter(function (item) { return selected.findIndex(function (key) { return key === item[props.KeyField]; }) > -1; }));
    }, [selected]);
    function handleClick(d, event) {
        var sIndex = selected.findIndex(function (item) { return item === d.row[props.KeyField]; });
        if (sIndex === -1)
            setSelected(function (od) { return __spreadArray(__spreadArray([], od), [d.row[props.KeyField]]); });
        else
            setSelected(function (od) { return od.filter(function (item) { return item !== d.row[props.KeyField]; }); });
    }
    function selectAll() {
        setSelected(function (d) { if (d.length === data.length)
            return [];
        else
            return data.map(function (row) { return row[props.KeyField]; }); });
    }
    function handleSort(d) {
        if (d.colKey === sortKey)
            setAscending(!ascending);
        else
            setSortKey(d.colKey);
    }
    var tableProps = {
        cols: __spreadArray([
            { key: 'gemstone-checkbox', field: props.KeyField, label: '', headerStyle: { width: '4em' }, rowStyle: { width: '4em' }, content: function (item, key, field, style) {
                    var index = selected.findIndex(function (i) { return i === item[props.KeyField]; });
                    if (index > -1)
                        return React.createElement("div", { style: { marginTop: '16px', textAlign: 'center' } },
                            React.createElement("i", { className: "fa fa-check-square-o fa-3x" }));
                    return null;
                } }
        ], props.cols),
        data: data,
        onClick: handleClick,
        sortKey: sortKey,
        ascending: ascending,
        onSort: handleSort,
        tableClass: props.tableClass,
        tableStyle: props.tableStyle,
        theadStyle: props.theadStyle,
        theadClass: props.theadClass,
        tbodyStyle: props.tbodyStyle,
        tbodyClass: props.tbodyClass,
        selected: function (d) { return false; },
        rowStyle: props.rowStyle
    };
    return React.createElement(Table_1.default, __assign({}, tableProps));
}
exports.SelectTable = SelectTable;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/Table.js":
/*!*************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/Table.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

//  ******************************************************************************************************
//  Table.tsx - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  08/02/2018 - Billy Ernest
//       Generated original version of source code.
//
//  ******************************************************************************************************
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Header = exports.Rows = void 0;
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
function Table(props) {
    return (React.createElement("table", { className: props.tableClass !== undefined ? props.tableClass : '', style: props.tableStyle },
        React.createElement(Header, { Class: props.theadClass, Style: props.theadStyle, Cols: props.cols, SortKey: props.sortKey, Ascending: props.ascending, Click: function (d, e) { return handleSort(d, e); } }),
        React.createElement(Rows, { Data: props.data, Cols: props.cols, RowStyle: props.rowStyle, BodyStyle: props.tbodyStyle, BodyClass: props.tbodyClass, Click: function (data, e) { return props.onClick(data, e); }, Selected: props.selected, KeySelector: props.keySelector })));
    function handleSort(data, event) {
        if (data.colKey !== null)
            props.onSort(data);
    }
}
exports.default = Table;
function Rows(props) {
    if (props.Data.length === 0)
        return null;
    var rows = props.Data.map(function (item, rowIndex) {
        var cells = props.Cols.map(function (colData) {
            return React.createElement(Cell, { key: colData.key, Style: colData.rowStyle, DataKey: colData.key, DataField: colData.field, Object: item, RowIndex: rowIndex, Content: colData.content, Click: function (data, e) { return props.Click(data, e); } });
        });
        var style = (props.RowStyle !== undefined) ? __assign({}, props.RowStyle) : {};
        if (style.cursor === undefined)
            style.cursor = 'pointer';
        if (props.Selected !== undefined && props.Selected(item))
            style.backgroundColor = 'yellow';
        function ToKey(index, data) {
            if (props.KeySelector === undefined)
                return index.toString();
            return props.KeySelector(data);
        }
        return (React.createElement("tr", { style: style, key: ToKey(rowIndex, item) }, cells));
    });
    return (React.createElement("tbody", { style: props.BodyStyle, className: props.BodyClass }, rows));
}
exports.Rows = Rows;
function Cell(props) {
    var css = (props.Style !== undefined) ? __assign({}, props.Style) : {};
    var getFieldValue = function () { return props.DataField !== undefined ? props.Object[props.DataField] : null; };
    var getFieldContent = function () { return props.Content !== undefined ? props.Content(props.Object, props.DataKey, props.DataField, css, props.RowIndex) : getFieldValue(); };
    return (React.createElement("td", { style: css, onClick: function (e) { return props.Click({ colKey: props.DataKey, colField: props.DataField, row: props.Object, data: getFieldValue(), index: props.RowIndex }, e); } }, getFieldContent()));
}
function Header(props) {
    return (React.createElement("thead", { className: props.Class, style: props.Style },
        React.createElement("tr", null, props.Cols.map(function (col) { return React.createElement(HeaderCell, { key: col.key, HeaderStyle: col.headerStyle, DataKey: col.key, Click: function (e) { return props.Click({ colKey: col.key, colField: col.field, ascending: props.Ascending }, e); }, Label: col.label, SortKey: props.SortKey, Ascending: props.Ascending }); }))));
}
exports.Header = Header;
function HeaderCell(props) {
    var style = (props.HeaderStyle !== undefined) ? props.HeaderStyle : {};
    if (style.cursor === undefined && props.DataKey !== null) {
        style.cursor = 'pointer';
    }
    if (style.position === undefined) {
        style.position = 'relative';
    }
    return (React.createElement("th", { style: style, onClick: function (e) { return props.Click(e); } },
        React.createElement(RenderAngleIcon, { SortKey: props.SortKey, Key: props.DataKey, Ascending: props.Ascending }),
        React.createElement("div", { style: { marginLeft: 10 } }, props.Label)));
}
function RenderAngleIcon(props) {
    var AngleIcon = function () { return (React.createElement("div", { style: { position: 'absolute', top: 10, transform: (props.Ascending ? 'rotate(0deg)' : 'rotate(180deg)') } }, '^')); };
    if (props.SortKey === null)
        return null;
    if (props.SortKey !== props.Key)
        return null;
    return React.createElement(AngleIcon, { ascending: props.Ascending });
}
;


/***/ }),

/***/ "./node_modules/@gpa-gemstone/react-table/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@gpa-gemstone/react-table/lib/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

//  ******************************************************************************************************
//  index.tsx - Gbtc
//
//  Copyright © 2018, Grid Protection Alliance.  All Rights Reserved.
//
//  Licensed to the Grid Protection Alliance (GPA) under one or more contributor license agreements. See
//  the NOTICE file distributed with this work for additional information regarding copyright ownership.
//  The GPA licenses this file to you under the MIT License (MIT), the "License"; you may not use this
//  file except in compliance with the License. You may obtain a copy of the License at:
//
//      http://opensource.org/licenses/MIT
//
//  Unless agreed to in writing, the subject software distributed under the License is distributed on an
//  "AS-IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. Refer to the
//  License for the specific language governing permissions and limitations.
//
//  Code Modification History:
//  ----------------------------------------------------------------------------------------------------
//  08/02/2018 - Billy Ernest
//       Generated original version of source code.
//  02/12/2021 - C. lackner
//       Moved table to seperate File.
//
//  ******************************************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rows = exports.DynamicTable = exports.SearchableTable = exports.SelectTable = void 0;
var Table_1 = __webpack_require__(/*! ./Table */ "./node_modules/@gpa-gemstone/react-table/lib/Table.js");
Object.defineProperty(exports, "Rows", ({ enumerable: true, get: function () { return Table_1.Rows; } }));
var SelectTable_1 = __webpack_require__(/*! ./SelectTable */ "./node_modules/@gpa-gemstone/react-table/lib/SelectTable.js");
Object.defineProperty(exports, "SelectTable", ({ enumerable: true, get: function () { return SelectTable_1.SelectTable; } }));
var SearchableTable_1 = __webpack_require__(/*! ./SearchableTable */ "./node_modules/@gpa-gemstone/react-table/lib/SearchableTable.js");
Object.defineProperty(exports, "SearchableTable", ({ enumerable: true, get: function () { return SearchableTable_1.SearchableTable; } }));
var DynamicTable_1 = __webpack_require__(/*! ./DynamicTable */ "./node_modules/@gpa-gemstone/react-table/lib/DynamicTable.js");
Object.defineProperty(exports, "DynamicTable", ({ enumerable: true, get: function () { return DynamicTable_1.DynamicTable; } }));
exports.default = Table_1.default;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,